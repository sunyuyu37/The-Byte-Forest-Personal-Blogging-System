2025-09-01 23:09:00.827 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-09-01 23:09:00.871 [main] INFO  com.blog.BlogApplication - Starting BlogApplication using Java 17.0.2 with PID 44692 (D:\java\boke\backend\target\classes started by Redmi in D:\java\boke\backend)
2025-09-01 23:09:00.871 [main] DEBUG com.blog.BlogApplication - Running with Spring Boot v3.2.0, Spring v6.1.1
2025-09-01 23:09:00.872 [main] INFO  com.blog.BlogApplication - No active profile set, falling back to 1 default profile: "default"
2025-09-01 23:09:01.649 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-01 23:09:01.651 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-09-01 23:09:01.823 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 166 ms. Found 15 JPA repository interfaces.
2025-09-01 23:09:01.838 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-01 23:09:01.839 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-09-01 23:09:01.855 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.AnnouncementRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:09:01.856 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleLikeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:09:01.857 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:09:01.857 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:09:01.858 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CategoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:09:01.858 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CommentLikeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:09:01.858 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CommentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:09:01.859 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.FileInfoRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:09:01.859 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.LoginLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:09:01.859 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.NotificationRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:09:01.859 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.OperationLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:09:01.859 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.SecuritySettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:09:01.860 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.TagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:09:01.861 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.UserAnnouncementReadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:09:01.861 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:09:01.861 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 13 ms. Found 0 Redis repository interfaces.
2025-09-01 23:09:02.674 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-09-01 23:09:02.683 [main] INFO  org.apache.catalina.core.AprLifecycleListener - An older version [1.2.38] of the Apache Tomcat Native library is installed, while Tomcat recommends a minimum version of [2.0.5]
2025-09-01 23:09:02.684 [main] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [1.2.38] using APR version [1.7.4].
2025-09-01 23:09:02.686 [main] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 1.1.1v  1 Aug 2023]
2025-09-01 23:09:02.698 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-09-01 23:09:02.700 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-09-01 23:09:02.700 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.16]
2025-09-01 23:09:02.781 [main] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] - Initializing Spring embedded WebApplicationContext
2025-09-01 23:09:02.782 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1870 ms
2025-09-01 23:09:03.114 [main] DEBUG com.blog.filter.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-09-01 23:09:03.217 [main] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-09-01 23:09:03.264 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.3.1.Final
2025-09-01 23:09:03.297 [main] INFO  o.hibernate.cache.internal.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-09-01 23:09:03.485 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-09-01 23:09:03.510 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-09-01 23:09:03.645 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@24668b5b
2025-09-01 23:09:03.647 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-09-01 23:09:03.685 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-09-01 23:09:03.687 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-09-01 23:09:04.696 [main] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-09-01 23:09:04.757 [main] DEBUG org.hibernate.SQL - 
    create table operation_logs (
        id bigint not null auto_increment,
        created_at datetime(6) not null,
        description varchar(500),
        error_message varchar(1000),
        execution_time bigint,
        ip_address varchar(50),
        method varchar(10),
        module varchar(50) not null,
        operation_time datetime(6) not null,
        operation_type enum ('CREATE','UPDATE','DELETE','QUERY','LOGIN','LOGOUT','UPLOAD','DOWNLOAD','EXPORT','IMPORT','OTHER') not null,
        request_params TEXT,
        request_url varchar(500),
        response_result TEXT,
        status enum ('SUCCESS','FAILURE','ERROR') not null,
        user_agent varchar(500),
        user_id bigint,
        username varchar(50),
        primary key (id)
    ) engine=InnoDB
2025-09-01 23:09:04.885 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-09-01 23:09:05.203 [main] INFO  o.s.data.jpa.repository.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-09-01 23:09:07.174 [main] WARN  o.s.b.a.s.s.UserDetailsServiceAutoConfiguration - 

Using generated security password: c00cc238-868d-48ee-9596-f8ce0490545e

This generated password is for development use only. Your security configuration must be updated before running your application in production.

2025-09-01 23:09:07.533 [main] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@4b1d75ea, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@37dc38cc, org.springframework.security.web.context.SecurityContextHolderFilter@3b4d0434, org.springframework.security.web.header.HeaderWriterFilter@6b7961a1, org.springframework.web.filter.CorsFilter@4d7c00fe, org.springframework.security.web.authentication.logout.LogoutFilter@84ed7c7, com.blog.filter.JwtAuthenticationFilter@bc8d68b, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@5789f118, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@28bb278a, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@1bc0d43d, org.springframework.security.web.session.SessionManagementFilter@3a47d7d4, org.springframework.security.web.access.ExceptionTranslationFilter@4ecac4d4, org.springframework.security.web.access.intercept.AuthorizationFilter@23f0cad]
2025-09-01 23:09:07.942 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-09-01 23:09:07.964 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/api'
2025-09-01 23:09:07.971 [main] INFO  com.blog.BlogApplication - Started BlogApplication in 7.628 seconds (process running for 7.994)
2025-09-01 23:09:34.414 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-09-01 23:09:34.461 [main] INFO  com.blog.BlogApplication - Starting BlogApplication using Java 17.0.2 with PID 23052 (D:\java\boke\backend\target\classes started by Redmi in D:\java\boke\backend)
2025-09-01 23:09:34.461 [main] DEBUG com.blog.BlogApplication - Running with Spring Boot v3.2.0, Spring v6.1.1
2025-09-01 23:09:34.462 [main] INFO  com.blog.BlogApplication - No active profile set, falling back to 1 default profile: "default"
2025-09-01 23:09:35.175 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-01 23:09:35.176 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-09-01 23:09:35.354 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 171 ms. Found 15 JPA repository interfaces.
2025-09-01 23:09:35.370 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-01 23:09:35.373 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-09-01 23:09:35.388 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.AnnouncementRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:09:35.389 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleLikeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:09:35.390 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:09:35.390 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:09:35.390 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CategoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:09:35.391 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CommentLikeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:09:35.391 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CommentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:09:35.392 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.FileInfoRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:09:35.392 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.LoginLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:09:35.392 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.NotificationRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:09:35.392 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.OperationLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:09:35.393 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.SecuritySettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:09:35.393 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.TagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:09:35.394 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.UserAnnouncementReadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:09:35.394 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:09:35.394 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 13 ms. Found 0 Redis repository interfaces.
2025-09-01 23:09:36.113 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-09-01 23:09:36.125 [main] INFO  org.apache.catalina.core.AprLifecycleListener - An older version [1.2.38] of the Apache Tomcat Native library is installed, while Tomcat recommends a minimum version of [2.0.5]
2025-09-01 23:09:36.126 [main] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [1.2.38] using APR version [1.7.4].
2025-09-01 23:09:36.128 [main] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 1.1.1v  1 Aug 2023]
2025-09-01 23:09:36.138 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-09-01 23:09:36.141 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-09-01 23:09:36.142 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.16]
2025-09-01 23:09:36.237 [main] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] - Initializing Spring embedded WebApplicationContext
2025-09-01 23:09:36.237 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1735 ms
2025-09-01 23:09:36.560 [main] DEBUG com.blog.filter.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-09-01 23:09:36.669 [main] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-09-01 23:09:36.715 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.3.1.Final
2025-09-01 23:09:36.746 [main] INFO  o.hibernate.cache.internal.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-09-01 23:09:36.925 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-09-01 23:09:36.950 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-09-01 23:09:37.079 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@6148827c
2025-09-01 23:09:37.081 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-09-01 23:09:37.124 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-09-01 23:09:37.126 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-09-01 23:09:38.131 [main] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-09-01 23:09:38.239 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-09-01 23:09:38.542 [main] INFO  o.s.data.jpa.repository.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-09-01 23:09:40.488 [main] WARN  o.s.b.a.s.s.UserDetailsServiceAutoConfiguration - 

Using generated security password: af0ded73-dfdf-4b7e-be40-acff9e0d6790

This generated password is for development use only. Your security configuration must be updated before running your application in production.

2025-09-01 23:09:40.859 [main] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@3bd2508a, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@6d1e1564, org.springframework.security.web.context.SecurityContextHolderFilter@7b04ea0d, org.springframework.security.web.header.HeaderWriterFilter@2dc572fd, org.springframework.web.filter.CorsFilter@404883c9, org.springframework.security.web.authentication.logout.LogoutFilter@7f438d3e, com.blog.filter.JwtAuthenticationFilter@fee881, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@5879efdb, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@290f0429, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@5db4c6c1, org.springframework.security.web.session.SessionManagementFilter@3fb09dfe, org.springframework.security.web.access.ExceptionTranslationFilter@5cde6aaf, org.springframework.security.web.access.intercept.AuthorizationFilter@4d7c00fe]
2025-09-01 23:09:41.245 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-09-01 23:09:41.255 [main] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.context.ApplicationContextException: Failed to start bean 'webServerStartStop'
2025-09-01 23:09:41.258 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-09-01 23:09:41.263 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-09-01 23:09:41.270 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-09-01 23:09:41.290 [main] INFO  o.s.b.a.logging.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-09-01 23:09:41.307 [main] ERROR o.s.b.diagnostics.LoggingFailureAnalysisReporter - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Web server failed to start. Port 8080 was already in use.

Action:

Identify and stop the process that's listening on port 8080 or configure this application to listen on another port.

2025-09-01 23:10:24.374 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-09-01 23:10:24.419 [main] INFO  com.blog.BlogApplication - Starting BlogApplication using Java 17.0.2 with PID 40512 (D:\java\boke\backend\target\classes started by Redmi in D:\java\boke\backend)
2025-09-01 23:10:24.420 [main] DEBUG com.blog.BlogApplication - Running with Spring Boot v3.2.0, Spring v6.1.1
2025-09-01 23:10:24.422 [main] INFO  com.blog.BlogApplication - No active profile set, falling back to 1 default profile: "default"
2025-09-01 23:10:25.134 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-01 23:10:25.136 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-09-01 23:10:25.313 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 171 ms. Found 15 JPA repository interfaces.
2025-09-01 23:10:25.329 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-01 23:10:25.331 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-09-01 23:10:25.345 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.AnnouncementRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:10:25.346 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleLikeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:10:25.347 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:10:25.347 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:10:25.347 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CategoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:10:25.348 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CommentLikeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:10:25.348 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CommentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:10:25.348 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.FileInfoRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:10:25.348 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.LoginLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:10:25.349 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.NotificationRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:10:25.349 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.OperationLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:10:25.349 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.SecuritySettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:10:25.349 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.TagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:10:25.350 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.UserAnnouncementReadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:10:25.351 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:10:25.351 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 11 ms. Found 0 Redis repository interfaces.
2025-09-01 23:10:26.092 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-09-01 23:10:26.100 [main] INFO  org.apache.catalina.core.AprLifecycleListener - An older version [1.2.38] of the Apache Tomcat Native library is installed, while Tomcat recommends a minimum version of [2.0.5]
2025-09-01 23:10:26.101 [main] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [1.2.38] using APR version [1.7.4].
2025-09-01 23:10:26.104 [main] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 1.1.1v  1 Aug 2023]
2025-09-01 23:10:26.112 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-09-01 23:10:26.115 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-09-01 23:10:26.115 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.16]
2025-09-01 23:10:26.208 [main] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] - Initializing Spring embedded WebApplicationContext
2025-09-01 23:10:26.209 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1739 ms
2025-09-01 23:10:26.534 [main] DEBUG com.blog.filter.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-09-01 23:10:26.649 [main] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-09-01 23:10:26.691 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.3.1.Final
2025-09-01 23:10:26.719 [main] INFO  o.hibernate.cache.internal.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-09-01 23:10:26.898 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-09-01 23:10:26.925 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-09-01 23:10:27.055 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@1bf52f10
2025-09-01 23:10:27.057 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-09-01 23:10:27.099 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-09-01 23:10:27.100 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-09-01 23:10:28.074 [main] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-09-01 23:10:28.190 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-09-01 23:10:28.514 [main] INFO  o.s.data.jpa.repository.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-09-01 23:10:30.530 [main] WARN  o.s.b.a.s.s.UserDetailsServiceAutoConfiguration - 

Using generated security password: 45855545-e31b-4e07-8e1e-7861f13a6a60

This generated password is for development use only. Your security configuration must be updated before running your application in production.

2025-09-01 23:10:30.899 [main] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@5751ecf4, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@57ac128c, org.springframework.security.web.context.SecurityContextHolderFilter@52f4963d, org.springframework.security.web.header.HeaderWriterFilter@3b8a9150, org.springframework.web.filter.CorsFilter@7a6d5fdf, org.springframework.security.web.authentication.logout.LogoutFilter@12b4f3a6, com.blog.filter.JwtAuthenticationFilter@fee881, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@40c5e78a, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@58288d3, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@3bcff419, org.springframework.security.web.session.SessionManagementFilter@7294b05e, org.springframework.security.web.access.ExceptionTranslationFilter@29a8c90, org.springframework.security.web.access.intercept.AuthorizationFilter@2bf0d39d]
2025-09-01 23:10:31.256 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-09-01 23:10:31.275 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/api'
2025-09-01 23:10:31.282 [main] INFO  com.blog.BlogApplication - Started BlogApplication in 7.38 seconds (process running for 7.81)
2025-09-01 23:10:51.735 [http-nio-8080-exec-1] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-09-01 23:10:51.735 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-09-01 23:10:51.737 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-09-01 23:10:51.752 [http-nio-8080-exec-1] WARN  o.s.web.servlet.handler.HandlerMappingIntrospector - Cache miss for REQUEST dispatch to '/api/' (previous null). Performing MatchableHandlerMapping lookup. This is logged once only at WARN level, and every time at TRACE.
2025-09-01 23:11:50.360 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-01 23:11:50.360 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-01 23:11:50.403 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:11:50.403 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:11:50.465 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-01 23:11:50.465 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-01 23:11:54.578 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-01 23:11:54.583 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:11:54.589 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-01 23:11:55.094 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-01 23:11:55.099 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:11:55.105 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-01 23:11:55.476 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-01 23:11:55.499 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:11:55.506 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:11:55.509 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:11:55.513 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:11:55.516 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:11:55.520 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:11:55.523 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:11:55.558 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-01 23:11:55.572 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-01 23:11:55.576 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:11:55.579 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:11:55.590 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:11:55.597 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:11:55.604 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:11:55.608 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:11:55.611 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:11:55.614 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:11:55.617 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:11:55.620 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:11:55.626 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:11:55.629 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:11:55.632 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:11:55.635 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:11:55.641 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:11:55.645 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:11:55.648 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:11:55.697 [http-nio-8080-exec-9] ERROR com.blog.exception.GlobalExceptionHandler - 运行时异常: Could not write JSON: Java 8 date/time type `java.time.LocalDateTime` not supported by default: add Module "com.fasterxml.jackson.datatype:jackson-datatype-jsr310" to enable handling (through reference chain: org.springframework.data.domain.PageImpl["content"]->java.util.Collections$UnmodifiableRandomAccessList[0]->com.blog.dto.ArticleDTO["author"]->com.blog.dto.UserDTO["lastLoginTime"])
org.springframework.data.redis.serializer.SerializationException: Could not write JSON: Java 8 date/time type `java.time.LocalDateTime` not supported by default: add Module "com.fasterxml.jackson.datatype:jackson-datatype-jsr310" to enable handling (through reference chain: org.springframework.data.domain.PageImpl["content"]->java.util.Collections$UnmodifiableRandomAccessList[0]->com.blog.dto.ArticleDTO["author"]->com.blog.dto.UserDTO["lastLoginTime"])
	at org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer.serialize(GenericJackson2JsonRedisSerializer.java:255)
	at org.springframework.data.redis.serializer.DefaultRedisElementWriter.write(DefaultRedisElementWriter.java:41)
	at org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair.write(RedisSerializationContext.java:292)
	at org.springframework.data.redis.cache.RedisCache.serializeCacheValue(RedisCache.java:374)
	at org.springframework.data.redis.cache.RedisCache.put(RedisCache.java:227)
	at org.springframework.cache.interceptor.AbstractCacheInvoker.doPut(AbstractCacheInvoker.java:87)
	at org.springframework.cache.interceptor.CacheAspectSupport$CachePutRequest.performCachePut(CacheAspectSupport.java:976)
	at org.springframework.cache.interceptor.CacheAspectSupport$CachePutRequest.apply(CacheAspectSupport.java:964)
	at org.springframework.cache.interceptor.CacheAspectSupport.evaluate(CacheAspectSupport.java:531)
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:409)
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:371)
	at org.springframework.cache.interceptor.CacheInterceptor.invoke(CacheInterceptor.java:74)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.blog.service.impl.ArticleServiceImpl$$SpringCGLIB$$0.findPublishedArticles(<generated>)
	at com.blog.controller.ArticleController.getPublishedArticles(ArticleController.java:153)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:352)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)
	at com.blog.aspect.PerformanceMonitorAspect.monitorControllerPerformance(PerformanceMonitorAspect.java:55)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:637)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:627)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:71)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.blog.controller.ArticleController$$SpringCGLIB$$0.getPublishedArticles(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:254)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:182)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:917)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:829)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Java 8 date/time type `java.time.LocalDateTime` not supported by default: add Module "com.fasterxml.jackson.datatype:jackson-datatype-jsr310" to enable handling (through reference chain: org.springframework.data.domain.PageImpl["content"]->java.util.Collections$UnmodifiableRandomAccessList[0]->com.blog.dto.ArticleDTO["author"]->com.blog.dto.UserDTO["lastLoginTime"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1308)
	at com.fasterxml.jackson.databind.ser.impl.UnsupportedTypeSerializer.serialize(UnsupportedTypeSerializer.java:35)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:772)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeWithType(BeanSerializerBase.java:655)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:734)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:772)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeWithType(BeanSerializerBase.java:655)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:147)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase.serializeWithType(AsArraySerializerBase.java:266)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:734)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:772)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeWithType(BeanSerializerBase.java:655)
	at com.fasterxml.jackson.databind.ser.impl.TypeWrappedSerializer.serialize(TypeWrappedSerializer.java:32)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:479)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:318)
	at com.fasterxml.jackson.databind.ObjectMapper._writeValueAndClose(ObjectMapper.java:4719)
	at com.fasterxml.jackson.databind.ObjectMapper.writeValueAsBytes(ObjectMapper.java:3987)
	at org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer.serialize(GenericJackson2JsonRedisSerializer.java:252)
	... 140 common frames omitted
2025-09-01 23:11:55.793 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-01 23:11:55.796 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-01 23:11:55.804 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:11:55.804 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-01 23:11:55.809 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:11:55.809 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:11:55.813 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:11:55.814 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:11:55.815 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:11:55.817 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:11:55.818 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:11:55.820 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:11:55.821 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:11:55.823 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:11:55.823 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:11:55.825 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:11:55.827 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:11:55.827 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:11:55.830 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:11:55.833 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:11:55.836 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:11:55.839 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:11:55.842 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:11:55.845 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:11:55.848 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:11:55.851 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:11:55.853 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:11:55.861 [http-nio-8080-exec-3] ERROR com.blog.exception.GlobalExceptionHandler - 运行时异常: Could not write JSON: Java 8 date/time type `java.time.LocalDateTime` not supported by default: add Module "com.fasterxml.jackson.datatype:jackson-datatype-jsr310" to enable handling (through reference chain: org.springframework.data.domain.PageImpl["content"]->java.util.Collections$UnmodifiableRandomAccessList[0]->com.blog.dto.ArticleDTO["author"]->com.blog.dto.UserDTO["lastLoginTime"])
org.springframework.data.redis.serializer.SerializationException: Could not write JSON: Java 8 date/time type `java.time.LocalDateTime` not supported by default: add Module "com.fasterxml.jackson.datatype:jackson-datatype-jsr310" to enable handling (through reference chain: org.springframework.data.domain.PageImpl["content"]->java.util.Collections$UnmodifiableRandomAccessList[0]->com.blog.dto.ArticleDTO["author"]->com.blog.dto.UserDTO["lastLoginTime"])
	at org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer.serialize(GenericJackson2JsonRedisSerializer.java:255)
	at org.springframework.data.redis.serializer.DefaultRedisElementWriter.write(DefaultRedisElementWriter.java:41)
	at org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair.write(RedisSerializationContext.java:292)
	at org.springframework.data.redis.cache.RedisCache.serializeCacheValue(RedisCache.java:374)
	at org.springframework.data.redis.cache.RedisCache.put(RedisCache.java:227)
	at org.springframework.cache.interceptor.AbstractCacheInvoker.doPut(AbstractCacheInvoker.java:87)
	at org.springframework.cache.interceptor.CacheAspectSupport$CachePutRequest.performCachePut(CacheAspectSupport.java:976)
	at org.springframework.cache.interceptor.CacheAspectSupport$CachePutRequest.apply(CacheAspectSupport.java:964)
	at org.springframework.cache.interceptor.CacheAspectSupport.evaluate(CacheAspectSupport.java:531)
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:409)
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:371)
	at org.springframework.cache.interceptor.CacheInterceptor.invoke(CacheInterceptor.java:74)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.blog.service.impl.ArticleServiceImpl$$SpringCGLIB$$0.findPublishedArticles(<generated>)
	at com.blog.controller.ArticleController.getPublishedArticles(ArticleController.java:153)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:352)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)
	at com.blog.aspect.PerformanceMonitorAspect.monitorControllerPerformance(PerformanceMonitorAspect.java:55)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:637)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:627)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:71)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.blog.controller.ArticleController$$SpringCGLIB$$0.getPublishedArticles(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:254)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:182)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:917)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:829)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Java 8 date/time type `java.time.LocalDateTime` not supported by default: add Module "com.fasterxml.jackson.datatype:jackson-datatype-jsr310" to enable handling (through reference chain: org.springframework.data.domain.PageImpl["content"]->java.util.Collections$UnmodifiableRandomAccessList[0]->com.blog.dto.ArticleDTO["author"]->com.blog.dto.UserDTO["lastLoginTime"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1308)
	at com.fasterxml.jackson.databind.ser.impl.UnsupportedTypeSerializer.serialize(UnsupportedTypeSerializer.java:35)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:772)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeWithType(BeanSerializerBase.java:655)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:734)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:772)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeWithType(BeanSerializerBase.java:655)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:147)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase.serializeWithType(AsArraySerializerBase.java:266)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:734)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:772)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeWithType(BeanSerializerBase.java:655)
	at com.fasterxml.jackson.databind.ser.impl.TypeWrappedSerializer.serialize(TypeWrappedSerializer.java:32)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:479)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:318)
	at com.fasterxml.jackson.databind.ObjectMapper._writeValueAndClose(ObjectMapper.java:4719)
	at com.fasterxml.jackson.databind.ObjectMapper.writeValueAsBytes(ObjectMapper.java:3987)
	at org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer.serialize(GenericJackson2JsonRedisSerializer.java:252)
	... 140 common frames omitted
2025-09-01 23:11:56.262 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-01 23:11:56.284 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.content,
        a1_0.created_at,
        a1_0.deleted,
        a1_0.enabled,
        a1_0.end_time,
        a1_0.pinned,
        a1_0.priority,
        a1_0.publisher_id,
        a1_0.start_time,
        a1_0.title,
        a1_0.type,
        a1_0.updated_at 
    from
        personal_blog_announcement a1_0 
    where
        a1_0.deleted=0 
        and a1_0.enabled=1 
        and (
            a1_0.start_time is null 
            or a1_0.start_time<=?
        ) 
        and (
            a1_0.end_time is null 
            or a1_0.end_time>=?
        ) 
        and a1_0.id not in (select
            uar1_0.announcement_id 
        from
            personal_blog_user_announcement_read uar1_0 
        where
            uar1_0.user_id=?) 
    order by
        a1_0.pinned desc,
        a1_0.priority desc,
        a1_0.created_at desc
2025-09-01 23:11:56.477 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-01 23:11:56.511 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.content,
        a1_0.created_at,
        a1_0.deleted,
        a1_0.enabled,
        a1_0.end_time,
        a1_0.pinned,
        a1_0.priority,
        a1_0.publisher_id,
        a1_0.start_time,
        a1_0.title,
        a1_0.type,
        a1_0.updated_at 
    from
        personal_blog_announcement a1_0 
    where
        a1_0.deleted=0 
        and a1_0.enabled=1 
        and (
            a1_0.start_time is null 
            or a1_0.start_time<=?
        ) 
        and (
            a1_0.end_time is null 
            or a1_0.end_time>=?
        ) 
        and a1_0.id not in (select
            uar1_0.announcement_id 
        from
            personal_blog_user_announcement_read uar1_0 
        where
            uar1_0.user_id=?) 
    order by
        a1_0.pinned desc,
        a1_0.priority desc,
        a1_0.created_at desc
2025-09-01 23:13:44.275 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-01 23:13:44.280 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-01 23:13:44.281 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:13:44.283 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:13:44.286 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:13:44.287 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:13:44.289 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:13:44.291 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:13:44.292 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:13:44.295 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:13:44.297 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:13:44.299 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:13:44.301 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:13:44.305 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:13:44.307 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:13:44.309 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:13:44.311 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:13:44.313 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:13:44.315 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:13:44.321 [http-nio-8080-exec-5] ERROR com.blog.exception.GlobalExceptionHandler - 运行时异常: Could not write JSON: Java 8 date/time type `java.time.LocalDateTime` not supported by default: add Module "com.fasterxml.jackson.datatype:jackson-datatype-jsr310" to enable handling (through reference chain: org.springframework.data.domain.PageImpl["content"]->java.util.Collections$UnmodifiableRandomAccessList[0]->com.blog.dto.ArticleDTO["author"]->com.blog.dto.UserDTO["lastLoginTime"])
org.springframework.data.redis.serializer.SerializationException: Could not write JSON: Java 8 date/time type `java.time.LocalDateTime` not supported by default: add Module "com.fasterxml.jackson.datatype:jackson-datatype-jsr310" to enable handling (through reference chain: org.springframework.data.domain.PageImpl["content"]->java.util.Collections$UnmodifiableRandomAccessList[0]->com.blog.dto.ArticleDTO["author"]->com.blog.dto.UserDTO["lastLoginTime"])
	at org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer.serialize(GenericJackson2JsonRedisSerializer.java:255)
	at org.springframework.data.redis.serializer.DefaultRedisElementWriter.write(DefaultRedisElementWriter.java:41)
	at org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair.write(RedisSerializationContext.java:292)
	at org.springframework.data.redis.cache.RedisCache.serializeCacheValue(RedisCache.java:374)
	at org.springframework.data.redis.cache.RedisCache.put(RedisCache.java:227)
	at org.springframework.cache.interceptor.AbstractCacheInvoker.doPut(AbstractCacheInvoker.java:87)
	at org.springframework.cache.interceptor.CacheAspectSupport$CachePutRequest.performCachePut(CacheAspectSupport.java:976)
	at org.springframework.cache.interceptor.CacheAspectSupport$CachePutRequest.apply(CacheAspectSupport.java:964)
	at org.springframework.cache.interceptor.CacheAspectSupport.evaluate(CacheAspectSupport.java:531)
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:409)
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:371)
	at org.springframework.cache.interceptor.CacheInterceptor.invoke(CacheInterceptor.java:74)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.blog.service.impl.ArticleServiceImpl$$SpringCGLIB$$0.findPublishedArticles(<generated>)
	at com.blog.controller.ArticleController.getPublishedArticles(ArticleController.java:153)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:352)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)
	at com.blog.aspect.PerformanceMonitorAspect.monitorControllerPerformance(PerformanceMonitorAspect.java:55)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:637)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:627)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:71)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.blog.controller.ArticleController$$SpringCGLIB$$0.getPublishedArticles(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:254)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:182)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:917)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:829)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Java 8 date/time type `java.time.LocalDateTime` not supported by default: add Module "com.fasterxml.jackson.datatype:jackson-datatype-jsr310" to enable handling (through reference chain: org.springframework.data.domain.PageImpl["content"]->java.util.Collections$UnmodifiableRandomAccessList[0]->com.blog.dto.ArticleDTO["author"]->com.blog.dto.UserDTO["lastLoginTime"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1308)
	at com.fasterxml.jackson.databind.ser.impl.UnsupportedTypeSerializer.serialize(UnsupportedTypeSerializer.java:35)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:772)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeWithType(BeanSerializerBase.java:655)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:734)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:772)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeWithType(BeanSerializerBase.java:655)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:147)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase.serializeWithType(AsArraySerializerBase.java:266)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:734)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:772)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeWithType(BeanSerializerBase.java:655)
	at com.fasterxml.jackson.databind.ser.impl.TypeWrappedSerializer.serialize(TypeWrappedSerializer.java:32)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:479)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:318)
	at com.fasterxml.jackson.databind.ObjectMapper._writeValueAndClose(ObjectMapper.java:4719)
	at com.fasterxml.jackson.databind.ObjectMapper.writeValueAsBytes(ObjectMapper.java:3987)
	at org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer.serialize(GenericJackson2JsonRedisSerializer.java:252)
	... 140 common frames omitted
2025-09-01 23:13:56.931 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-01 23:13:56.947 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:13:56.961 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-01 23:13:57.809 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-01 23:13:57.823 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-01 23:13:57.872 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:13:57.887 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-01 23:13:58.073 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:13:58.125 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:13:58.144 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:13:58.250 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:13:58.272 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:13:58.275 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:13:58.280 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:13:58.293 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:13:58.363 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:13:58.369 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:13:58.407 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:13:58.414 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:13:58.431 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:13:58.446 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:13:58.552 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:13:58.815 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:13:58.919 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:13:58.932 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:13:58.937 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-01 23:13:58.971 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.content,
        a1_0.created_at,
        a1_0.deleted,
        a1_0.enabled,
        a1_0.end_time,
        a1_0.pinned,
        a1_0.priority,
        a1_0.publisher_id,
        a1_0.start_time,
        a1_0.title,
        a1_0.type,
        a1_0.updated_at 
    from
        personal_blog_announcement a1_0 
    where
        a1_0.deleted=0 
        and a1_0.enabled=1 
        and (
            a1_0.start_time is null 
            or a1_0.start_time<=?
        ) 
        and (
            a1_0.end_time is null 
            or a1_0.end_time>=?
        ) 
        and a1_0.id not in (select
            uar1_0.announcement_id 
        from
            personal_blog_user_announcement_read uar1_0 
        where
            uar1_0.user_id=?) 
    order by
        a1_0.pinned desc,
        a1_0.priority desc,
        a1_0.created_at desc
2025-09-01 23:13:59.065 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:13:59.147 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:13:59.279 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:13:59.306 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:13:59.311 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:13:59.394 [http-nio-8080-exec-8] ERROR com.blog.exception.GlobalExceptionHandler - 运行时异常: Could not write JSON: Java 8 date/time type `java.time.LocalDateTime` not supported by default: add Module "com.fasterxml.jackson.datatype:jackson-datatype-jsr310" to enable handling (through reference chain: org.springframework.data.domain.PageImpl["content"]->java.util.Collections$UnmodifiableRandomAccessList[0]->com.blog.dto.ArticleDTO["author"]->com.blog.dto.UserDTO["lastLoginTime"])
org.springframework.data.redis.serializer.SerializationException: Could not write JSON: Java 8 date/time type `java.time.LocalDateTime` not supported by default: add Module "com.fasterxml.jackson.datatype:jackson-datatype-jsr310" to enable handling (through reference chain: org.springframework.data.domain.PageImpl["content"]->java.util.Collections$UnmodifiableRandomAccessList[0]->com.blog.dto.ArticleDTO["author"]->com.blog.dto.UserDTO["lastLoginTime"])
	at org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer.serialize(GenericJackson2JsonRedisSerializer.java:255)
	at org.springframework.data.redis.serializer.DefaultRedisElementWriter.write(DefaultRedisElementWriter.java:41)
	at org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair.write(RedisSerializationContext.java:292)
	at org.springframework.data.redis.cache.RedisCache.serializeCacheValue(RedisCache.java:374)
	at org.springframework.data.redis.cache.RedisCache.put(RedisCache.java:227)
	at org.springframework.cache.interceptor.AbstractCacheInvoker.doPut(AbstractCacheInvoker.java:87)
	at org.springframework.cache.interceptor.CacheAspectSupport$CachePutRequest.performCachePut(CacheAspectSupport.java:976)
	at org.springframework.cache.interceptor.CacheAspectSupport$CachePutRequest.apply(CacheAspectSupport.java:964)
	at org.springframework.cache.interceptor.CacheAspectSupport.evaluate(CacheAspectSupport.java:531)
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:409)
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:371)
	at org.springframework.cache.interceptor.CacheInterceptor.invoke(CacheInterceptor.java:74)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.blog.service.impl.ArticleServiceImpl$$SpringCGLIB$$0.findPublishedArticles(<generated>)
	at com.blog.controller.ArticleController.getPublishedArticles(ArticleController.java:153)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:352)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)
	at com.blog.aspect.PerformanceMonitorAspect.monitorControllerPerformance(PerformanceMonitorAspect.java:55)
	at jdk.internal.reflect.GeneratedMethodAccessor110.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:637)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:627)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:71)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.blog.controller.ArticleController$$SpringCGLIB$$0.getPublishedArticles(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:254)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:182)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:917)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:829)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Java 8 date/time type `java.time.LocalDateTime` not supported by default: add Module "com.fasterxml.jackson.datatype:jackson-datatype-jsr310" to enable handling (through reference chain: org.springframework.data.domain.PageImpl["content"]->java.util.Collections$UnmodifiableRandomAccessList[0]->com.blog.dto.ArticleDTO["author"]->com.blog.dto.UserDTO["lastLoginTime"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1308)
	at com.fasterxml.jackson.databind.ser.impl.UnsupportedTypeSerializer.serialize(UnsupportedTypeSerializer.java:35)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:772)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeWithType(BeanSerializerBase.java:655)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:734)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:772)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeWithType(BeanSerializerBase.java:655)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:147)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase.serializeWithType(AsArraySerializerBase.java:266)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:734)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:772)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeWithType(BeanSerializerBase.java:655)
	at com.fasterxml.jackson.databind.ser.impl.TypeWrappedSerializer.serialize(TypeWrappedSerializer.java:32)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:479)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:318)
	at com.fasterxml.jackson.databind.ObjectMapper._writeValueAndClose(ObjectMapper.java:4719)
	at com.fasterxml.jackson.databind.ObjectMapper.writeValueAsBytes(ObjectMapper.java:3987)
	at org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer.serialize(GenericJackson2JsonRedisSerializer.java:252)
	... 139 common frames omitted
2025-09-01 23:13:59.449 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-01 23:13:59.521 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.content,
        a1_0.created_at,
        a1_0.deleted,
        a1_0.enabled,
        a1_0.end_time,
        a1_0.pinned,
        a1_0.priority,
        a1_0.publisher_id,
        a1_0.start_time,
        a1_0.title,
        a1_0.type,
        a1_0.updated_at 
    from
        personal_blog_announcement a1_0 
    where
        a1_0.deleted=0 
        and a1_0.enabled=1 
        and (
            a1_0.start_time is null 
            or a1_0.start_time<=?
        ) 
        and (
            a1_0.end_time is null 
            or a1_0.end_time>=?
        ) 
        and a1_0.id not in (select
            uar1_0.announcement_id 
        from
            personal_blog_user_announcement_read uar1_0 
        where
            uar1_0.user_id=?) 
    order by
        a1_0.pinned desc,
        a1_0.priority desc,
        a1_0.created_at desc
2025-09-01 23:14:02.826 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-01 23:14:02.875 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:14:02.901 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-01 23:14:12.265 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-01 23:14:12.265 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-01 23:14:12.269 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-01 23:14:12.269 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:14:12.271 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:14:12.272 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:14:12.272 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:14:12.274 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:14:12.274 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:14:12.277 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:14:12.277 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:14:12.279 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:14:12.280 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:14:12.282 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:14:12.282 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:14:12.284 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:14:12.284 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:14:12.286 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:14:12.288 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:14:12.290 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:14:12.292 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:14:12.294 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:14:12.296 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:14:12.298 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:14:12.300 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:14:12.302 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:14:12.304 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:14:12.308 [http-nio-8080-exec-4] ERROR com.blog.exception.GlobalExceptionHandler - 运行时异常: Could not write JSON: Java 8 date/time type `java.time.LocalDateTime` not supported by default: add Module "com.fasterxml.jackson.datatype:jackson-datatype-jsr310" to enable handling (through reference chain: org.springframework.data.domain.PageImpl["content"]->java.util.Collections$UnmodifiableRandomAccessList[0]->com.blog.dto.ArticleDTO["author"]->com.blog.dto.UserDTO["lastLoginTime"])
org.springframework.data.redis.serializer.SerializationException: Could not write JSON: Java 8 date/time type `java.time.LocalDateTime` not supported by default: add Module "com.fasterxml.jackson.datatype:jackson-datatype-jsr310" to enable handling (through reference chain: org.springframework.data.domain.PageImpl["content"]->java.util.Collections$UnmodifiableRandomAccessList[0]->com.blog.dto.ArticleDTO["author"]->com.blog.dto.UserDTO["lastLoginTime"])
	at org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer.serialize(GenericJackson2JsonRedisSerializer.java:255)
	at org.springframework.data.redis.serializer.DefaultRedisElementWriter.write(DefaultRedisElementWriter.java:41)
	at org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair.write(RedisSerializationContext.java:292)
	at org.springframework.data.redis.cache.RedisCache.serializeCacheValue(RedisCache.java:374)
	at org.springframework.data.redis.cache.RedisCache.put(RedisCache.java:227)
	at org.springframework.cache.interceptor.AbstractCacheInvoker.doPut(AbstractCacheInvoker.java:87)
	at org.springframework.cache.interceptor.CacheAspectSupport$CachePutRequest.performCachePut(CacheAspectSupport.java:976)
	at org.springframework.cache.interceptor.CacheAspectSupport$CachePutRequest.apply(CacheAspectSupport.java:964)
	at org.springframework.cache.interceptor.CacheAspectSupport.evaluate(CacheAspectSupport.java:531)
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:409)
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:371)
	at org.springframework.cache.interceptor.CacheInterceptor.invoke(CacheInterceptor.java:74)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.blog.service.impl.ArticleServiceImpl$$SpringCGLIB$$0.findPublishedArticles(<generated>)
	at com.blog.controller.ArticleController.getPublishedArticles(ArticleController.java:153)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:352)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)
	at com.blog.aspect.PerformanceMonitorAspect.monitorControllerPerformance(PerformanceMonitorAspect.java:55)
	at jdk.internal.reflect.GeneratedMethodAccessor110.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:637)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:627)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:71)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.blog.controller.ArticleController$$SpringCGLIB$$0.getPublishedArticles(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:254)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:182)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:917)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:829)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Java 8 date/time type `java.time.LocalDateTime` not supported by default: add Module "com.fasterxml.jackson.datatype:jackson-datatype-jsr310" to enable handling (through reference chain: org.springframework.data.domain.PageImpl["content"]->java.util.Collections$UnmodifiableRandomAccessList[0]->com.blog.dto.ArticleDTO["author"]->com.blog.dto.UserDTO["lastLoginTime"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1308)
	at com.fasterxml.jackson.databind.ser.impl.UnsupportedTypeSerializer.serialize(UnsupportedTypeSerializer.java:35)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:772)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeWithType(BeanSerializerBase.java:655)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:734)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:772)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeWithType(BeanSerializerBase.java:655)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:147)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase.serializeWithType(AsArraySerializerBase.java:266)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:734)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:772)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeWithType(BeanSerializerBase.java:655)
	at com.fasterxml.jackson.databind.ser.impl.TypeWrappedSerializer.serialize(TypeWrappedSerializer.java:32)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:479)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:318)
	at com.fasterxml.jackson.databind.ObjectMapper._writeValueAndClose(ObjectMapper.java:4719)
	at com.fasterxml.jackson.databind.ObjectMapper.writeValueAsBytes(ObjectMapper.java:3987)
	at org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer.serialize(GenericJackson2JsonRedisSerializer.java:252)
	... 139 common frames omitted
2025-09-01 23:14:13.518 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-01 23:14:13.522 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.content,
        a1_0.created_at,
        a1_0.deleted,
        a1_0.enabled,
        a1_0.end_time,
        a1_0.pinned,
        a1_0.priority,
        a1_0.publisher_id,
        a1_0.start_time,
        a1_0.title,
        a1_0.type,
        a1_0.updated_at 
    from
        personal_blog_announcement a1_0 
    where
        a1_0.deleted=0 
        and a1_0.enabled=1 
        and (
            a1_0.start_time is null 
            or a1_0.start_time<=?
        ) 
        and (
            a1_0.end_time is null 
            or a1_0.end_time>=?
        ) 
        and a1_0.id not in (select
            uar1_0.announcement_id 
        from
            personal_blog_user_announcement_read uar1_0 
        where
            uar1_0.user_id=?) 
    order by
        a1_0.pinned desc,
        a1_0.priority desc,
        a1_0.created_at desc
2025-09-01 23:16:35.642 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-09-01 23:16:35.769 [main] INFO  com.blog.BlogApplication - Starting BlogApplication using Java 17.0.2 with PID 60904 (D:\java\boke\backend\target\classes started by Redmi in D:\java\boke\backend)
2025-09-01 23:16:35.770 [main] DEBUG com.blog.BlogApplication - Running with Spring Boot v3.2.0, Spring v6.1.1
2025-09-01 23:16:35.776 [main] INFO  com.blog.BlogApplication - No active profile set, falling back to 1 default profile: "default"
2025-09-01 23:16:36.662 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-01 23:16:36.664 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-09-01 23:16:36.861 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 190 ms. Found 15 JPA repository interfaces.
2025-09-01 23:16:36.878 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-01 23:16:36.879 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-09-01 23:16:36.896 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.AnnouncementRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:16:36.896 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleLikeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:16:36.897 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:16:36.898 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:16:36.899 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CategoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:16:36.899 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CommentLikeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:16:36.899 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CommentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:16:36.899 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.FileInfoRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:16:36.899 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.LoginLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:16:36.899 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.NotificationRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:16:36.900 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.OperationLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:16:36.900 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.SecuritySettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:16:36.900 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.TagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:16:36.901 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.UserAnnouncementReadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:16:36.902 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:16:36.903 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 13 ms. Found 0 Redis repository interfaces.
2025-09-01 23:16:37.727 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-09-01 23:16:37.738 [main] INFO  org.apache.catalina.core.AprLifecycleListener - An older version [1.2.38] of the Apache Tomcat Native library is installed, while Tomcat recommends a minimum version of [2.0.5]
2025-09-01 23:16:37.739 [main] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [1.2.38] using APR version [1.7.4].
2025-09-01 23:16:37.742 [main] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 1.1.1v  1 Aug 2023]
2025-09-01 23:16:37.751 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-09-01 23:16:37.753 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-09-01 23:16:37.754 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.16]
2025-09-01 23:16:37.855 [main] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] - Initializing Spring embedded WebApplicationContext
2025-09-01 23:16:37.856 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2012 ms
2025-09-01 23:16:38.240 [main] DEBUG com.blog.filter.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-09-01 23:16:38.366 [main] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-09-01 23:16:38.425 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.3.1.Final
2025-09-01 23:16:38.464 [main] INFO  o.hibernate.cache.internal.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-09-01 23:16:38.684 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-09-01 23:16:38.715 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-09-01 23:16:38.869 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@2ec156fb
2025-09-01 23:16:38.871 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-09-01 23:16:38.913 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-09-01 23:16:38.915 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-09-01 23:16:40.081 [main] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-09-01 23:16:40.201 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-09-01 23:16:40.531 [main] INFO  o.s.data.jpa.repository.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-09-01 23:16:42.756 [main] WARN  o.s.b.a.s.s.UserDetailsServiceAutoConfiguration - 

Using generated security password: a9f48a01-7265-42a9-8179-2621a7cfa0e7

This generated password is for development use only. Your security configuration must be updated before running your application in production.

2025-09-01 23:16:43.168 [main] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@1182bd1c, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@45d952a1, org.springframework.security.web.context.SecurityContextHolderFilter@6a50888c, org.springframework.security.web.header.HeaderWriterFilter@65d80a24, org.springframework.web.filter.CorsFilter@32d52900, org.springframework.security.web.authentication.logout.LogoutFilter@4258eba5, com.blog.filter.JwtAuthenticationFilter@1bdafb01, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@38f89c02, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@6fb763bd, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@4e14a84, org.springframework.security.web.session.SessionManagementFilter@28c946bf, org.springframework.security.web.access.ExceptionTranslationFilter@28b3d948, org.springframework.security.web.access.intercept.AuthorizationFilter@2bbb9812]
2025-09-01 23:16:43.672 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-09-01 23:16:43.692 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/api'
2025-09-01 23:16:43.698 [main] INFO  com.blog.BlogApplication - Started BlogApplication in 8.643 seconds (process running for 9.063)
2025-09-01 23:17:00.351 [http-nio-8080-exec-1] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-09-01 23:17:00.352 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-09-01 23:17:00.354 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-09-01 23:17:00.371 [http-nio-8080-exec-1] WARN  o.s.web.servlet.handler.HandlerMappingIntrospector - Cache miss for REQUEST dispatch to '/api/articles/published' (previous null). Performing MatchableHandlerMapping lookup. This is logged once only at WARN level, and every time at TRACE.
2025-09-01 23:17:00.856 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-01 23:17:00.901 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-01 23:17:00.910 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:17:00.913 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:17:00.920 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:17:00.924 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:17:00.926 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:17:00.928 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:17:00.932 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:17:00.934 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:17:00.936 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:17:00.939 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:17:00.941 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:17:00.944 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:17:00.946 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:17:00.948 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:17:00.950 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:17:00.952 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:17:00.955 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:17:01.040 [http-nio-8080-exec-1] ERROR com.blog.exception.GlobalExceptionHandler - 运行时异常: Could not write JSON: Java 8 date/time type `java.time.LocalDateTime` not supported by default: add Module "com.fasterxml.jackson.datatype:jackson-datatype-jsr310" to enable handling (through reference chain: org.springframework.data.domain.PageImpl["content"]->java.util.Collections$UnmodifiableRandomAccessList[0]->com.blog.dto.ArticleDTO["author"]->com.blog.dto.UserDTO["lastLoginTime"])
org.springframework.data.redis.serializer.SerializationException: Could not write JSON: Java 8 date/time type `java.time.LocalDateTime` not supported by default: add Module "com.fasterxml.jackson.datatype:jackson-datatype-jsr310" to enable handling (through reference chain: org.springframework.data.domain.PageImpl["content"]->java.util.Collections$UnmodifiableRandomAccessList[0]->com.blog.dto.ArticleDTO["author"]->com.blog.dto.UserDTO["lastLoginTime"])
	at org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer.serialize(GenericJackson2JsonRedisSerializer.java:255)
	at org.springframework.data.redis.serializer.DefaultRedisElementWriter.write(DefaultRedisElementWriter.java:41)
	at org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair.write(RedisSerializationContext.java:292)
	at org.springframework.data.redis.cache.RedisCache.serializeCacheValue(RedisCache.java:374)
	at org.springframework.data.redis.cache.RedisCache.put(RedisCache.java:227)
	at org.springframework.cache.interceptor.AbstractCacheInvoker.doPut(AbstractCacheInvoker.java:87)
	at org.springframework.cache.interceptor.CacheAspectSupport$CachePutRequest.performCachePut(CacheAspectSupport.java:976)
	at org.springframework.cache.interceptor.CacheAspectSupport$CachePutRequest.apply(CacheAspectSupport.java:964)
	at org.springframework.cache.interceptor.CacheAspectSupport.evaluate(CacheAspectSupport.java:531)
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:409)
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:371)
	at org.springframework.cache.interceptor.CacheInterceptor.invoke(CacheInterceptor.java:74)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.blog.service.impl.ArticleServiceImpl$$SpringCGLIB$$0.findPublishedArticles(<generated>)
	at com.blog.controller.ArticleController.getPublishedArticles(ArticleController.java:153)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:352)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)
	at com.blog.aspect.PerformanceMonitorAspect.monitorControllerPerformance(PerformanceMonitorAspect.java:55)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:637)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:627)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:71)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.blog.controller.ArticleController$$SpringCGLIB$$0.getPublishedArticles(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:254)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:182)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:917)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:829)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Java 8 date/time type `java.time.LocalDateTime` not supported by default: add Module "com.fasterxml.jackson.datatype:jackson-datatype-jsr310" to enable handling (through reference chain: org.springframework.data.domain.PageImpl["content"]->java.util.Collections$UnmodifiableRandomAccessList[0]->com.blog.dto.ArticleDTO["author"]->com.blog.dto.UserDTO["lastLoginTime"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1308)
	at com.fasterxml.jackson.databind.ser.impl.UnsupportedTypeSerializer.serialize(UnsupportedTypeSerializer.java:35)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:772)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeWithType(BeanSerializerBase.java:655)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:734)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:772)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeWithType(BeanSerializerBase.java:655)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:147)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase.serializeWithType(AsArraySerializerBase.java:266)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:734)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:772)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeWithType(BeanSerializerBase.java:655)
	at com.fasterxml.jackson.databind.ser.impl.TypeWrappedSerializer.serialize(TypeWrappedSerializer.java:32)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:479)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:318)
	at com.fasterxml.jackson.databind.ObjectMapper._writeValueAndClose(ObjectMapper.java:4719)
	at com.fasterxml.jackson.databind.ObjectMapper.writeValueAsBytes(ObjectMapper.java:3987)
	at org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer.serialize(GenericJackson2JsonRedisSerializer.java:252)
	... 140 common frames omitted
2025-09-01 23:17:30.491 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-01 23:17:30.505 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:17:30.623 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-01 23:17:31.246 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-01 23:17:31.247 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-01 23:17:31.253 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-01 23:17:31.254 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:17:31.255 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:17:31.258 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:17:31.258 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:17:31.262 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:17:31.262 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:17:31.265 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:17:31.265 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:17:31.270 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:17:31.273 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:17:31.274 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:17:31.277 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:17:31.280 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:17:31.281 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:17:31.282 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:17:31.285 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:17:31.289 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:17:31.293 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:17:31.297 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:17:31.308 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:17:31.311 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:17:31.314 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:17:31.317 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:17:31.320 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:17:31.329 [http-nio-8080-exec-4] ERROR com.blog.exception.GlobalExceptionHandler - 运行时异常: Could not write JSON: Java 8 date/time type `java.time.LocalDateTime` not supported by default: add Module "com.fasterxml.jackson.datatype:jackson-datatype-jsr310" to enable handling (through reference chain: org.springframework.data.domain.PageImpl["content"]->java.util.Collections$UnmodifiableRandomAccessList[0]->com.blog.dto.ArticleDTO["author"]->com.blog.dto.UserDTO["lastLoginTime"])
org.springframework.data.redis.serializer.SerializationException: Could not write JSON: Java 8 date/time type `java.time.LocalDateTime` not supported by default: add Module "com.fasterxml.jackson.datatype:jackson-datatype-jsr310" to enable handling (through reference chain: org.springframework.data.domain.PageImpl["content"]->java.util.Collections$UnmodifiableRandomAccessList[0]->com.blog.dto.ArticleDTO["author"]->com.blog.dto.UserDTO["lastLoginTime"])
	at org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer.serialize(GenericJackson2JsonRedisSerializer.java:255)
	at org.springframework.data.redis.serializer.DefaultRedisElementWriter.write(DefaultRedisElementWriter.java:41)
	at org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair.write(RedisSerializationContext.java:292)
	at org.springframework.data.redis.cache.RedisCache.serializeCacheValue(RedisCache.java:374)
	at org.springframework.data.redis.cache.RedisCache.put(RedisCache.java:227)
	at org.springframework.cache.interceptor.AbstractCacheInvoker.doPut(AbstractCacheInvoker.java:87)
	at org.springframework.cache.interceptor.CacheAspectSupport$CachePutRequest.performCachePut(CacheAspectSupport.java:976)
	at org.springframework.cache.interceptor.CacheAspectSupport$CachePutRequest.apply(CacheAspectSupport.java:964)
	at org.springframework.cache.interceptor.CacheAspectSupport.evaluate(CacheAspectSupport.java:531)
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:409)
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:371)
	at org.springframework.cache.interceptor.CacheInterceptor.invoke(CacheInterceptor.java:74)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.blog.service.impl.ArticleServiceImpl$$SpringCGLIB$$0.findPublishedArticles(<generated>)
	at com.blog.controller.ArticleController.getPublishedArticles(ArticleController.java:153)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:352)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)
	at com.blog.aspect.PerformanceMonitorAspect.monitorControllerPerformance(PerformanceMonitorAspect.java:55)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:637)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:627)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:71)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.blog.controller.ArticleController$$SpringCGLIB$$0.getPublishedArticles(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:254)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:182)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:917)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:829)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Java 8 date/time type `java.time.LocalDateTime` not supported by default: add Module "com.fasterxml.jackson.datatype:jackson-datatype-jsr310" to enable handling (through reference chain: org.springframework.data.domain.PageImpl["content"]->java.util.Collections$UnmodifiableRandomAccessList[0]->com.blog.dto.ArticleDTO["author"]->com.blog.dto.UserDTO["lastLoginTime"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1308)
	at com.fasterxml.jackson.databind.ser.impl.UnsupportedTypeSerializer.serialize(UnsupportedTypeSerializer.java:35)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:772)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeWithType(BeanSerializerBase.java:655)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:734)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:772)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeWithType(BeanSerializerBase.java:655)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:147)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase.serializeWithType(AsArraySerializerBase.java:266)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:734)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:772)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeWithType(BeanSerializerBase.java:655)
	at com.fasterxml.jackson.databind.ser.impl.TypeWrappedSerializer.serialize(TypeWrappedSerializer.java:32)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:479)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:318)
	at com.fasterxml.jackson.databind.ObjectMapper._writeValueAndClose(ObjectMapper.java:4719)
	at com.fasterxml.jackson.databind.ObjectMapper.writeValueAsBytes(ObjectMapper.java:3987)
	at org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer.serialize(GenericJackson2JsonRedisSerializer.java:252)
	... 140 common frames omitted
2025-09-01 23:17:32.157 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-01 23:17:32.320 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.content,
        a1_0.created_at,
        a1_0.deleted,
        a1_0.enabled,
        a1_0.end_time,
        a1_0.pinned,
        a1_0.priority,
        a1_0.publisher_id,
        a1_0.start_time,
        a1_0.title,
        a1_0.type,
        a1_0.updated_at 
    from
        personal_blog_announcement a1_0 
    where
        a1_0.deleted=0 
        and a1_0.enabled=1 
        and (
            a1_0.start_time is null 
            or a1_0.start_time<=?
        ) 
        and (
            a1_0.end_time is null 
            or a1_0.end_time>=?
        ) 
        and a1_0.id not in (select
            uar1_0.announcement_id 
        from
            personal_blog_user_announcement_read uar1_0 
        where
            uar1_0.user_id=?) 
    order by
        a1_0.pinned desc,
        a1_0.priority desc,
        a1_0.created_at desc
2025-09-01 23:18:19.405 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-01 23:18:19.410 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-01 23:18:19.412 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:18:19.414 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:18:19.416 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:18:19.417 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:18:19.420 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:18:19.422 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:18:19.424 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:18:19.426 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:18:19.428 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:18:19.429 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:18:19.432 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:18:19.434 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:18:19.436 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:18:19.438 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:18:19.439 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:18:19.441 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:18:19.443 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:18:19.448 [http-nio-8080-exec-7] ERROR com.blog.exception.GlobalExceptionHandler - 运行时异常: Could not write JSON: Java 8 date/time type `java.time.LocalDateTime` not supported by default: add Module "com.fasterxml.jackson.datatype:jackson-datatype-jsr310" to enable handling (through reference chain: org.springframework.data.domain.PageImpl["content"]->java.util.Collections$UnmodifiableRandomAccessList[0]->com.blog.dto.ArticleDTO["author"]->com.blog.dto.UserDTO["lastLoginTime"])
org.springframework.data.redis.serializer.SerializationException: Could not write JSON: Java 8 date/time type `java.time.LocalDateTime` not supported by default: add Module "com.fasterxml.jackson.datatype:jackson-datatype-jsr310" to enable handling (through reference chain: org.springframework.data.domain.PageImpl["content"]->java.util.Collections$UnmodifiableRandomAccessList[0]->com.blog.dto.ArticleDTO["author"]->com.blog.dto.UserDTO["lastLoginTime"])
	at org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer.serialize(GenericJackson2JsonRedisSerializer.java:255)
	at org.springframework.data.redis.serializer.DefaultRedisElementWriter.write(DefaultRedisElementWriter.java:41)
	at org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair.write(RedisSerializationContext.java:292)
	at org.springframework.data.redis.cache.RedisCache.serializeCacheValue(RedisCache.java:374)
	at org.springframework.data.redis.cache.RedisCache.put(RedisCache.java:227)
	at org.springframework.cache.interceptor.AbstractCacheInvoker.doPut(AbstractCacheInvoker.java:87)
	at org.springframework.cache.interceptor.CacheAspectSupport$CachePutRequest.performCachePut(CacheAspectSupport.java:976)
	at org.springframework.cache.interceptor.CacheAspectSupport$CachePutRequest.apply(CacheAspectSupport.java:964)
	at org.springframework.cache.interceptor.CacheAspectSupport.evaluate(CacheAspectSupport.java:531)
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:409)
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:371)
	at org.springframework.cache.interceptor.CacheInterceptor.invoke(CacheInterceptor.java:74)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.blog.service.impl.ArticleServiceImpl$$SpringCGLIB$$0.findPublishedArticles(<generated>)
	at com.blog.controller.ArticleController.getPublishedArticles(ArticleController.java:153)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:352)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)
	at com.blog.aspect.PerformanceMonitorAspect.monitorControllerPerformance(PerformanceMonitorAspect.java:55)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:637)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:627)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:71)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.blog.controller.ArticleController$$SpringCGLIB$$0.getPublishedArticles(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:254)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:182)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:917)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:829)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Java 8 date/time type `java.time.LocalDateTime` not supported by default: add Module "com.fasterxml.jackson.datatype:jackson-datatype-jsr310" to enable handling (through reference chain: org.springframework.data.domain.PageImpl["content"]->java.util.Collections$UnmodifiableRandomAccessList[0]->com.blog.dto.ArticleDTO["author"]->com.blog.dto.UserDTO["lastLoginTime"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1308)
	at com.fasterxml.jackson.databind.ser.impl.UnsupportedTypeSerializer.serialize(UnsupportedTypeSerializer.java:35)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:772)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeWithType(BeanSerializerBase.java:655)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:734)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:772)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeWithType(BeanSerializerBase.java:655)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:147)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase.serializeWithType(AsArraySerializerBase.java:266)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:734)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:772)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeWithType(BeanSerializerBase.java:655)
	at com.fasterxml.jackson.databind.ser.impl.TypeWrappedSerializer.serialize(TypeWrappedSerializer.java:32)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:479)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:318)
	at com.fasterxml.jackson.databind.ObjectMapper._writeValueAndClose(ObjectMapper.java:4719)
	at com.fasterxml.jackson.databind.ObjectMapper.writeValueAsBytes(ObjectMapper.java:3987)
	at org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer.serialize(GenericJackson2JsonRedisSerializer.java:252)
	... 140 common frames omitted
2025-09-01 23:19:33.283 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-01 23:19:33.287 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-01 23:19:33.289 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:19:33.292 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:19:33.293 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:19:33.295 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:19:33.297 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:19:33.299 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:19:33.301 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:19:33.304 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:19:33.305 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:19:33.307 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:19:33.309 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:19:33.310 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:19:33.311 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:19:33.313 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:19:33.316 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:19:33.317 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:19:33.320 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:19:33.324 [http-nio-8080-exec-9] ERROR com.blog.exception.GlobalExceptionHandler - 运行时异常: Could not write JSON: Java 8 date/time type `java.time.LocalDateTime` not supported by default: add Module "com.fasterxml.jackson.datatype:jackson-datatype-jsr310" to enable handling (through reference chain: org.springframework.data.domain.PageImpl["content"]->java.util.Collections$UnmodifiableRandomAccessList[0]->com.blog.dto.ArticleDTO["author"]->com.blog.dto.UserDTO["lastLoginTime"])
org.springframework.data.redis.serializer.SerializationException: Could not write JSON: Java 8 date/time type `java.time.LocalDateTime` not supported by default: add Module "com.fasterxml.jackson.datatype:jackson-datatype-jsr310" to enable handling (through reference chain: org.springframework.data.domain.PageImpl["content"]->java.util.Collections$UnmodifiableRandomAccessList[0]->com.blog.dto.ArticleDTO["author"]->com.blog.dto.UserDTO["lastLoginTime"])
	at org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer.serialize(GenericJackson2JsonRedisSerializer.java:255)
	at org.springframework.data.redis.serializer.DefaultRedisElementWriter.write(DefaultRedisElementWriter.java:41)
	at org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair.write(RedisSerializationContext.java:292)
	at org.springframework.data.redis.cache.RedisCache.serializeCacheValue(RedisCache.java:374)
	at org.springframework.data.redis.cache.RedisCache.put(RedisCache.java:227)
	at org.springframework.cache.interceptor.AbstractCacheInvoker.doPut(AbstractCacheInvoker.java:87)
	at org.springframework.cache.interceptor.CacheAspectSupport$CachePutRequest.performCachePut(CacheAspectSupport.java:976)
	at org.springframework.cache.interceptor.CacheAspectSupport$CachePutRequest.apply(CacheAspectSupport.java:964)
	at org.springframework.cache.interceptor.CacheAspectSupport.evaluate(CacheAspectSupport.java:531)
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:409)
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:371)
	at org.springframework.cache.interceptor.CacheInterceptor.invoke(CacheInterceptor.java:74)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.blog.service.impl.ArticleServiceImpl$$SpringCGLIB$$0.findPublishedArticles(<generated>)
	at com.blog.controller.ArticleController.getPublishedArticles(ArticleController.java:153)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:352)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)
	at com.blog.aspect.PerformanceMonitorAspect.monitorControllerPerformance(PerformanceMonitorAspect.java:55)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:637)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:627)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:71)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.blog.controller.ArticleController$$SpringCGLIB$$0.getPublishedArticles(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:254)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:182)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:917)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:829)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Java 8 date/time type `java.time.LocalDateTime` not supported by default: add Module "com.fasterxml.jackson.datatype:jackson-datatype-jsr310" to enable handling (through reference chain: org.springframework.data.domain.PageImpl["content"]->java.util.Collections$UnmodifiableRandomAccessList[0]->com.blog.dto.ArticleDTO["author"]->com.blog.dto.UserDTO["lastLoginTime"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1308)
	at com.fasterxml.jackson.databind.ser.impl.UnsupportedTypeSerializer.serialize(UnsupportedTypeSerializer.java:35)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:772)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeWithType(BeanSerializerBase.java:655)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:734)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:772)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeWithType(BeanSerializerBase.java:655)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:147)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase.serializeWithType(AsArraySerializerBase.java:266)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:734)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:772)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeWithType(BeanSerializerBase.java:655)
	at com.fasterxml.jackson.databind.ser.impl.TypeWrappedSerializer.serialize(TypeWrappedSerializer.java:32)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:479)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:318)
	at com.fasterxml.jackson.databind.ObjectMapper._writeValueAndClose(ObjectMapper.java:4719)
	at com.fasterxml.jackson.databind.ObjectMapper.writeValueAsBytes(ObjectMapper.java:3987)
	at org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer.serialize(GenericJackson2JsonRedisSerializer.java:252)
	... 140 common frames omitted
2025-09-01 23:21:32.409 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-01 23:21:32.413 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-01 23:21:32.415 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:21:32.416 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:21:32.418 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:21:32.419 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:21:32.420 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:21:32.422 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:21:32.423 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:21:32.424 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:21:32.426 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:21:32.428 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:21:32.430 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:21:32.431 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:21:32.432 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:21:32.434 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:21:32.435 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:21:32.436 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:21:32.438 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:21:32.442 [http-nio-8080-exec-3] ERROR com.blog.exception.GlobalExceptionHandler - 运行时异常: Could not write JSON: Java 8 date/time type `java.time.LocalDateTime` not supported by default: add Module "com.fasterxml.jackson.datatype:jackson-datatype-jsr310" to enable handling (through reference chain: org.springframework.data.domain.PageImpl["content"]->java.util.Collections$UnmodifiableRandomAccessList[0]->com.blog.dto.ArticleDTO["author"]->com.blog.dto.UserDTO["lastLoginTime"])
org.springframework.data.redis.serializer.SerializationException: Could not write JSON: Java 8 date/time type `java.time.LocalDateTime` not supported by default: add Module "com.fasterxml.jackson.datatype:jackson-datatype-jsr310" to enable handling (through reference chain: org.springframework.data.domain.PageImpl["content"]->java.util.Collections$UnmodifiableRandomAccessList[0]->com.blog.dto.ArticleDTO["author"]->com.blog.dto.UserDTO["lastLoginTime"])
	at org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer.serialize(GenericJackson2JsonRedisSerializer.java:255)
	at org.springframework.data.redis.serializer.DefaultRedisElementWriter.write(DefaultRedisElementWriter.java:41)
	at org.springframework.data.redis.serializer.RedisSerializationContext$SerializationPair.write(RedisSerializationContext.java:292)
	at org.springframework.data.redis.cache.RedisCache.serializeCacheValue(RedisCache.java:374)
	at org.springframework.data.redis.cache.RedisCache.put(RedisCache.java:227)
	at org.springframework.cache.interceptor.AbstractCacheInvoker.doPut(AbstractCacheInvoker.java:87)
	at org.springframework.cache.interceptor.CacheAspectSupport$CachePutRequest.performCachePut(CacheAspectSupport.java:976)
	at org.springframework.cache.interceptor.CacheAspectSupport$CachePutRequest.apply(CacheAspectSupport.java:964)
	at org.springframework.cache.interceptor.CacheAspectSupport.evaluate(CacheAspectSupport.java:531)
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:409)
	at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:371)
	at org.springframework.cache.interceptor.CacheInterceptor.invoke(CacheInterceptor.java:74)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.blog.service.impl.ArticleServiceImpl$$SpringCGLIB$$0.findPublishedArticles(<generated>)
	at com.blog.controller.ArticleController.getPublishedArticles(ArticleController.java:153)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:352)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)
	at com.blog.aspect.PerformanceMonitorAspect.monitorControllerPerformance(PerformanceMonitorAspect.java:55)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:637)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:627)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:71)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.blog.controller.ArticleController$$SpringCGLIB$$0.getPublishedArticles(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:254)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:182)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:917)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:829)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Java 8 date/time type `java.time.LocalDateTime` not supported by default: add Module "com.fasterxml.jackson.datatype:jackson-datatype-jsr310" to enable handling (through reference chain: org.springframework.data.domain.PageImpl["content"]->java.util.Collections$UnmodifiableRandomAccessList[0]->com.blog.dto.ArticleDTO["author"]->com.blog.dto.UserDTO["lastLoginTime"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1308)
	at com.fasterxml.jackson.databind.ser.impl.UnsupportedTypeSerializer.serialize(UnsupportedTypeSerializer.java:35)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:772)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeWithType(BeanSerializerBase.java:655)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:734)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:772)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeWithType(BeanSerializerBase.java:655)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:147)
	at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serializeContents(CollectionSerializer.java:25)
	at com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase.serializeWithType(AsArraySerializerBase.java:266)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:734)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:772)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeWithType(BeanSerializerBase.java:655)
	at com.fasterxml.jackson.databind.ser.impl.TypeWrappedSerializer.serialize(TypeWrappedSerializer.java:32)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:479)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:318)
	at com.fasterxml.jackson.databind.ObjectMapper._writeValueAndClose(ObjectMapper.java:4719)
	at com.fasterxml.jackson.databind.ObjectMapper.writeValueAsBytes(ObjectMapper.java:3987)
	at org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer.serialize(GenericJackson2JsonRedisSerializer.java:252)
	... 140 common frames omitted
2025-09-01 23:22:12.299 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-09-01 23:22:12.347 [main] INFO  com.blog.BlogApplication - Starting BlogApplication using Java 17.0.2 with PID 30288 (D:\java\boke\backend\target\classes started by Redmi in D:\java\boke\backend)
2025-09-01 23:22:12.347 [main] DEBUG com.blog.BlogApplication - Running with Spring Boot v3.2.0, Spring v6.1.1
2025-09-01 23:22:12.348 [main] INFO  com.blog.BlogApplication - No active profile set, falling back to 1 default profile: "default"
2025-09-01 23:22:13.065 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-01 23:22:13.066 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-09-01 23:22:13.243 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 170 ms. Found 15 JPA repository interfaces.
2025-09-01 23:22:13.259 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-01 23:22:13.260 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-09-01 23:22:13.276 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.AnnouncementRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:22:13.277 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleLikeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:22:13.278 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:22:13.279 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:22:13.279 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CategoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:22:13.279 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CommentLikeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:22:13.279 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CommentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:22:13.280 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.FileInfoRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:22:13.281 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.LoginLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:22:13.281 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.NotificationRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:22:13.281 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.OperationLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:22:13.282 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.SecuritySettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:22:13.282 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.TagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:22:13.283 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.UserAnnouncementReadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:22:13.284 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:22:13.284 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 16 ms. Found 0 Redis repository interfaces.
2025-09-01 23:22:14.012 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-09-01 23:22:14.013 [main] INFO  org.apache.catalina.core.AprLifecycleListener - An older version [1.2.38] of the Apache Tomcat Native library is installed, while Tomcat recommends a minimum version of [2.0.5]
2025-09-01 23:22:14.013 [main] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [1.2.38] using APR version [1.7.4].
2025-09-01 23:22:14.016 [main] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 1.1.1v  1 Aug 2023]
2025-09-01 23:22:14.023 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-09-01 23:22:14.025 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-09-01 23:22:14.026 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.16]
2025-09-01 23:22:14.119 [main] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] - Initializing Spring embedded WebApplicationContext
2025-09-01 23:22:14.119 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1732 ms
2025-09-01 23:22:14.430 [main] DEBUG com.blog.filter.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-09-01 23:22:14.541 [main] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-09-01 23:22:14.589 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.3.1.Final
2025-09-01 23:22:14.653 [main] INFO  o.hibernate.cache.internal.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-09-01 23:22:14.853 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-09-01 23:22:14.874 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-09-01 23:22:15.003 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@7bdf94f2
2025-09-01 23:22:15.005 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-09-01 23:22:15.038 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-09-01 23:22:15.039 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-09-01 23:22:16.050 [main] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-09-01 23:22:16.151 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-09-01 23:22:16.434 [main] INFO  o.s.data.jpa.repository.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-09-01 23:22:18.357 [main] WARN  o.s.b.a.s.s.UserDetailsServiceAutoConfiguration - 

Using generated security password: 70e35fc8-c1ff-4b08-b68d-92282b75d67b

This generated password is for development use only. Your security configuration must be updated before running your application in production.

2025-09-01 23:22:18.709 [main] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@171e2788, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@12eb448b, org.springframework.security.web.context.SecurityContextHolderFilter@260413c2, org.springframework.security.web.header.HeaderWriterFilter@932996b, org.springframework.web.filter.CorsFilter@5565aa1, org.springframework.security.web.authentication.logout.LogoutFilter@62bffd8e, com.blog.filter.JwtAuthenticationFilter@79ba0285, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@4969fb89, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@55cac412, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@3d9c521d, org.springframework.security.web.session.SessionManagementFilter@5f3a486c, org.springframework.security.web.access.ExceptionTranslationFilter@261a01f, org.springframework.security.web.access.intercept.AuthorizationFilter@76dc2ed1]
2025-09-01 23:22:19.062 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-09-01 23:22:19.083 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/api'
2025-09-01 23:22:19.088 [main] INFO  com.blog.BlogApplication - Started BlogApplication in 7.261 seconds (process running for 7.61)
2025-09-01 23:22:27.010 [http-nio-8080-exec-2] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-09-01 23:22:27.011 [http-nio-8080-exec-2] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-09-01 23:22:27.013 [http-nio-8080-exec-2] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-09-01 23:22:27.029 [http-nio-8080-exec-2] WARN  o.s.web.servlet.handler.HandlerMappingIntrospector - Cache miss for REQUEST dispatch to '/api/articles/published' (previous null). Performing MatchableHandlerMapping lookup. This is logged once only at WARN level, and every time at TRACE.
2025-09-01 23:22:27.127 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-01 23:22:27.166 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-01 23:22:27.172 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:22:27.176 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:22:27.182 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:22:27.185 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:22:27.187 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:22:27.188 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:22:27.190 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:22:27.193 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:22:27.194 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:22:27.195 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:22:27.197 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:22:27.199 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:22:27.200 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:22:27.202 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:22:27.204 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:22:27.206 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:22:27.207 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:22:38.844 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-01 23:22:38.855 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:22:38.892 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-01 23:22:39.436 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-01 23:22:39.437 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-01 23:22:39.457 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-01 23:22:39.459 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:22:39.464 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:22:39.485 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:22:39.493 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:22:39.493 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:22:39.503 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:22:39.504 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:22:39.510 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:22:39.514 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:22:39.514 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:22:39.518 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:22:39.523 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:22:39.523 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:22:39.527 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:22:39.530 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:22:39.537 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:22:39.543 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:22:39.547 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:22:39.551 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:22:39.554 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:22:39.558 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:22:39.561 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:22:39.564 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:22:39.568 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:22:39.753 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-01 23:22:40.236 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-01 23:22:40.487 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-01 23:22:40.509 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.content,
        a1_0.created_at,
        a1_0.deleted,
        a1_0.enabled,
        a1_0.end_time,
        a1_0.pinned,
        a1_0.priority,
        a1_0.publisher_id,
        a1_0.start_time,
        a1_0.title,
        a1_0.type,
        a1_0.updated_at 
    from
        personal_blog_announcement a1_0 
    where
        a1_0.deleted=0 
        and a1_0.enabled=1 
        and (
            a1_0.start_time is null 
            or a1_0.start_time<=?
        ) 
        and (
            a1_0.end_time is null 
            or a1_0.end_time>=?
        ) 
        and a1_0.id not in (select
            uar1_0.announcement_id 
        from
            personal_blog_user_announcement_read uar1_0 
        where
            uar1_0.user_id=?) 
    order by
        a1_0.pinned desc,
        a1_0.priority desc,
        a1_0.created_at desc
2025-09-01 23:22:41.811 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-01 23:22:41.817 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:22:41.824 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-01 23:22:42.351 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-01 23:22:42.358 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:22:42.361 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:22:42.364 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:22:42.369 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:22:42.373 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:22:42.377 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:22:42.381 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:22:42.384 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-01 23:22:42.403 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-01 23:22:42.407 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:22:42.411 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:22:42.415 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:22:42.419 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:22:42.423 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:22:42.425 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:22:42.430 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:22:42.433 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:22:42.436 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:22:42.439 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:22:42.441 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:22:42.447 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:22:42.450 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:22:42.453 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:22:42.456 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:22:42.459 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:22:42.464 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:22:42.606 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-01 23:22:43.057 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-01 23:22:43.298 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-01 23:22:43.305 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.content,
        a1_0.created_at,
        a1_0.deleted,
        a1_0.enabled,
        a1_0.end_time,
        a1_0.pinned,
        a1_0.priority,
        a1_0.publisher_id,
        a1_0.start_time,
        a1_0.title,
        a1_0.type,
        a1_0.updated_at 
    from
        personal_blog_announcement a1_0 
    where
        a1_0.deleted=0 
        and a1_0.enabled=1 
        and (
            a1_0.start_time is null 
            or a1_0.start_time<=?
        ) 
        and (
            a1_0.end_time is null 
            or a1_0.end_time>=?
        ) 
        and a1_0.id not in (select
            uar1_0.announcement_id 
        from
            personal_blog_user_announcement_read uar1_0 
        where
            uar1_0.user_id=?) 
    order by
        a1_0.pinned desc,
        a1_0.priority desc,
        a1_0.created_at desc
2025-09-01 23:34:24.528 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-09-01 23:34:24.576 [main] INFO  com.blog.BlogApplication - Starting BlogApplication using Java 17.0.2 with PID 29668 (D:\java\boke\backend\target\classes started by Redmi in D:\java\boke\backend)
2025-09-01 23:34:24.577 [main] DEBUG com.blog.BlogApplication - Running with Spring Boot v3.2.0, Spring v6.1.1
2025-09-01 23:34:24.577 [main] INFO  com.blog.BlogApplication - No active profile set, falling back to 1 default profile: "default"
2025-09-01 23:34:25.376 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-01 23:34:25.379 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-09-01 23:34:25.582 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 197 ms. Found 15 JPA repository interfaces.
2025-09-01 23:34:25.599 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-01 23:34:25.601 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-09-01 23:34:25.617 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.AnnouncementRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:34:25.617 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleLikeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:34:25.618 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:34:25.619 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:34:25.619 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CategoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:34:25.620 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CommentLikeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:34:25.620 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CommentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:34:25.620 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.FileInfoRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:34:25.620 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.LoginLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:34:25.621 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.NotificationRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:34:25.621 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.OperationLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:34:25.621 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.SecuritySettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:34:25.622 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.TagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:34:25.622 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.UserAnnouncementReadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:34:25.623 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:34:25.623 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 14 ms. Found 0 Redis repository interfaces.
2025-09-01 23:34:26.554 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-09-01 23:34:26.562 [main] INFO  org.apache.catalina.core.AprLifecycleListener - An older version [1.2.38] of the Apache Tomcat Native library is installed, while Tomcat recommends a minimum version of [2.0.5]
2025-09-01 23:34:26.563 [main] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [1.2.38] using APR version [1.7.4].
2025-09-01 23:34:26.566 [main] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 1.1.1v  1 Aug 2023]
2025-09-01 23:34:26.578 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-09-01 23:34:26.580 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-09-01 23:34:26.581 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.16]
2025-09-01 23:34:26.662 [main] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] - Initializing Spring embedded WebApplicationContext
2025-09-01 23:34:26.663 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2030 ms
2025-09-01 23:34:26.995 [main] DEBUG com.blog.filter.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-09-01 23:34:27.106 [main] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-09-01 23:34:27.151 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.3.1.Final
2025-09-01 23:34:27.180 [main] INFO  o.hibernate.cache.internal.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-09-01 23:34:27.366 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-09-01 23:34:27.389 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-09-01 23:34:27.523 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@735167e1
2025-09-01 23:34:27.524 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-09-01 23:34:27.561 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-09-01 23:34:27.563 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-09-01 23:34:28.586 [main] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-09-01 23:34:28.695 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-09-01 23:34:28.996 [main] INFO  o.s.data.jpa.repository.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-09-01 23:34:30.973 [main] WARN  o.s.b.a.s.s.UserDetailsServiceAutoConfiguration - 

Using generated security password: 01496982-8756-461d-a992-615f836cf65b

This generated password is for development use only. Your security configuration must be updated before running your application in production.

2025-09-01 23:34:31.398 [main] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@d916e87, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@2dc572fd, org.springframework.security.web.context.SecurityContextHolderFilter@7fea956b, org.springframework.security.web.header.HeaderWriterFilter@1cf22470, org.springframework.web.filter.CorsFilter@3ea833e5, org.springframework.security.web.authentication.logout.LogoutFilter@7d3304f0, com.blog.filter.JwtAuthenticationFilter@5b3755f4, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@2d55df70, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@19fdd8e, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@118cad8d, org.springframework.security.web.session.SessionManagementFilter@2275d9b4, org.springframework.security.web.access.ExceptionTranslationFilter@7e1d3c6e, org.springframework.security.web.access.intercept.AuthorizationFilter@442aea9a]
2025-09-01 23:34:31.817 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-09-01 23:34:31.836 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/api'
2025-09-01 23:34:31.841 [main] INFO  com.blog.BlogApplication - Started BlogApplication in 7.745 seconds (process running for 8.129)
2025-09-01 23:34:54.569 [http-nio-8080-exec-1] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-09-01 23:34:54.569 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-09-01 23:34:54.570 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-09-01 23:34:54.587 [http-nio-8080-exec-1] WARN  o.s.web.servlet.handler.HandlerMappingIntrospector - Cache miss for REQUEST dispatch to '/api/articles/published' (previous null). Performing MatchableHandlerMapping lookup. This is logged once only at WARN level, and every time at TRACE.
2025-09-01 23:34:54.712 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-01 23:34:54.754 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-01 23:34:54.761 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:34:54.764 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:34:54.770 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:34:54.774 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:34:54.776 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:34:54.777 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:34:54.780 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:34:54.782 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:34:54.784 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:34:54.786 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:34:54.787 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:34:54.789 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:34:54.791 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:34:54.793 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:34:54.795 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:34:54.797 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:34:54.799 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:35:06.145 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-01 23:35:06.164 [http-nio-8080-exec-3] ERROR com.blog.exception.GlobalExceptionHandler - 运行时异常: Could not write JSON: Java 8 date/time type `java.time.LocalDateTime` not supported by default: add Module "com.fasterxml.jackson.datatype:jackson-datatype-jsr310" to enable handling (through reference chain: java.util.ArrayList[0]->com.blog.dto.cache.CategoryCacheDTO["createdAt"])
org.springframework.data.redis.serializer.SerializationException: Could not write JSON: Java 8 date/time type `java.time.LocalDateTime` not supported by default: add Module "com.fasterxml.jackson.datatype:jackson-datatype-jsr310" to enable handling (through reference chain: java.util.ArrayList[0]->com.blog.dto.cache.CategoryCacheDTO["createdAt"])
	at org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer.serialize(GenericJackson2JsonRedisSerializer.java:255)
	at org.springframework.data.redis.core.AbstractOperations.rawValue(AbstractOperations.java:128)
	at org.springframework.data.redis.core.DefaultValueOperations.set(DefaultValueOperations.java:251)
	at com.blog.service.impl.CategoryServiceImpl.getAllCategories(CategoryServiceImpl.java:57)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:352)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)
	at com.blog.aspect.PerformanceMonitorAspect.monitorServicePerformance(PerformanceMonitorAspect.java:94)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:637)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:627)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:71)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.blog.service.impl.CategoryServiceImpl$$SpringCGLIB$$0.getAllCategories(<generated>)
	at com.blog.controller.CategoryController.getAllCategories(CategoryController.java:23)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:352)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)
	at com.blog.aspect.PerformanceMonitorAspect.monitorControllerPerformance(PerformanceMonitorAspect.java:55)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:637)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:627)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:71)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.blog.controller.CategoryController$$SpringCGLIB$$0.getAllCategories(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:254)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:182)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:917)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:829)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Java 8 date/time type `java.time.LocalDateTime` not supported by default: add Module "com.fasterxml.jackson.datatype:jackson-datatype-jsr310" to enable handling (through reference chain: java.util.ArrayList[0]->com.blog.dto.cache.CategoryCacheDTO["createdAt"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1308)
	at com.fasterxml.jackson.databind.ser.impl.UnsupportedTypeSerializer.serialize(UnsupportedTypeSerializer.java:35)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:772)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeWithType(BeanSerializerBase.java:655)
	at com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serializeTypedContents(IndexedListSerializer.java:181)
	at com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serializeContents(IndexedListSerializer.java:92)
	at com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serializeContents(IndexedListSerializer.java:18)
	at com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase.serializeWithType(AsArraySerializerBase.java:266)
	at com.fasterxml.jackson.databind.ser.impl.TypeWrappedSerializer.serialize(TypeWrappedSerializer.java:32)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:479)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:318)
	at com.fasterxml.jackson.databind.ObjectMapper._writeValueAndClose(ObjectMapper.java:4719)
	at com.fasterxml.jackson.databind.ObjectMapper.writeValueAsBytes(ObjectMapper.java:3987)
	at org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer.serialize(GenericJackson2JsonRedisSerializer.java:252)
	... 154 common frames omitted
2025-09-01 23:35:08.660 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-09-01 23:35:08.664 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-09-01 23:35:08.747 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-09-01 23:35:08.822 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    update
        users 
    set
        article_count=?,
        avatar=?,
        bio=?,
        deleted=?,
        email=?,
        email_verified=?,
        follower_count=?,
        following_count=?,
        github=?,
        last_login_ip=?,
        last_login_time=?,
        nickname=?,
        password=?,
        role=?,
        status=?,
        updated_at=?,
        username=?,
        website=? 
    where
        id=?
2025-09-01 23:35:08.838 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-09-01 23:35:08.890 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        login_logs
        (created_at, device_info, ip_address, is_current_session, location, login_status, login_time, logout_time, session_id, updated_at, user_agent, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-01 23:35:08.902 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:35:08.905 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    update
        users 
    set
        article_count=?,
        avatar=?,
        bio=?,
        deleted=?,
        email=?,
        email_verified=?,
        follower_count=?,
        following_count=?,
        github=?,
        last_login_ip=?,
        last_login_time=?,
        nickname=?,
        password=?,
        role=?,
        status=?,
        updated_at=?,
        username=?,
        website=? 
    where
        id=?
2025-09-01 23:35:08.914 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-01 23:35:08.996 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-01 23:35:09.001 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:35:09.005 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-01 23:35:09.834 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-01 23:35:09.844 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-01 23:35:09.853 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-01 23:35:09.854 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:35:09.855 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:35:09.857 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:35:09.862 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:35:09.863 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:35:09.867 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:35:09.871 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:35:09.871 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:35:09.875 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:35:09.875 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:35:09.879 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:35:09.880 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:35:09.889 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:35:09.890 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:35:09.905 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:35:09.908 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:35:09.913 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:35:09.916 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:35:09.920 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:35:09.924 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:35:09.927 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:35:09.930 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:35:09.932 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:35:09.935 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:35:10.071 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-01 23:35:10.078 [http-nio-8080-exec-8] ERROR com.blog.exception.GlobalExceptionHandler - 运行时异常: Could not write JSON: Java 8 date/time type `java.time.LocalDateTime` not supported by default: add Module "com.fasterxml.jackson.datatype:jackson-datatype-jsr310" to enable handling (through reference chain: java.util.ArrayList[0]->com.blog.dto.cache.CategoryCacheDTO["createdAt"])
org.springframework.data.redis.serializer.SerializationException: Could not write JSON: Java 8 date/time type `java.time.LocalDateTime` not supported by default: add Module "com.fasterxml.jackson.datatype:jackson-datatype-jsr310" to enable handling (through reference chain: java.util.ArrayList[0]->com.blog.dto.cache.CategoryCacheDTO["createdAt"])
	at org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer.serialize(GenericJackson2JsonRedisSerializer.java:255)
	at org.springframework.data.redis.core.AbstractOperations.rawValue(AbstractOperations.java:128)
	at org.springframework.data.redis.core.DefaultValueOperations.set(DefaultValueOperations.java:251)
	at com.blog.service.impl.CategoryServiceImpl.getAllCategories(CategoryServiceImpl.java:57)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:352)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)
	at com.blog.aspect.PerformanceMonitorAspect.monitorServicePerformance(PerformanceMonitorAspect.java:94)
	at jdk.internal.reflect.GeneratedMethodAccessor37.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:637)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:627)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:71)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.blog.service.impl.CategoryServiceImpl$$SpringCGLIB$$0.getAllCategories(<generated>)
	at com.blog.controller.CategoryController.getAllCategories(CategoryController.java:23)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:352)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)
	at com.blog.aspect.PerformanceMonitorAspect.monitorControllerPerformance(PerformanceMonitorAspect.java:55)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:637)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:627)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:71)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at com.blog.controller.CategoryController$$SpringCGLIB$$0.getAllCategories(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:254)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:182)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:917)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:829)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Java 8 date/time type `java.time.LocalDateTime` not supported by default: add Module "com.fasterxml.jackson.datatype:jackson-datatype-jsr310" to enable handling (through reference chain: java.util.ArrayList[0]->com.blog.dto.cache.CategoryCacheDTO["createdAt"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1308)
	at com.fasterxml.jackson.databind.ser.impl.UnsupportedTypeSerializer.serialize(UnsupportedTypeSerializer.java:35)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:732)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:772)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeWithType(BeanSerializerBase.java:655)
	at com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serializeTypedContents(IndexedListSerializer.java:181)
	at com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serializeContents(IndexedListSerializer.java:92)
	at com.fasterxml.jackson.databind.ser.impl.IndexedListSerializer.serializeContents(IndexedListSerializer.java:18)
	at com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase.serializeWithType(AsArraySerializerBase.java:266)
	at com.fasterxml.jackson.databind.ser.impl.TypeWrappedSerializer.serialize(TypeWrappedSerializer.java:32)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:479)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:318)
	at com.fasterxml.jackson.databind.ObjectMapper._writeValueAndClose(ObjectMapper.java:4719)
	at com.fasterxml.jackson.databind.ObjectMapper.writeValueAsBytes(ObjectMapper.java:3987)
	at org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer.serialize(GenericJackson2JsonRedisSerializer.java:252)
	... 153 common frames omitted
2025-09-01 23:35:10.453 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-01 23:35:10.467 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.content,
        a1_0.created_at,
        a1_0.deleted,
        a1_0.enabled,
        a1_0.end_time,
        a1_0.pinned,
        a1_0.priority,
        a1_0.publisher_id,
        a1_0.start_time,
        a1_0.title,
        a1_0.type,
        a1_0.updated_at 
    from
        personal_blog_announcement a1_0 
    where
        a1_0.deleted=0 
        and a1_0.enabled=1 
        and (
            a1_0.start_time is null 
            or a1_0.start_time<=?
        ) 
        and (
            a1_0.end_time is null 
            or a1_0.end_time>=?
        ) 
        and a1_0.id not in (select
            uar1_0.announcement_id 
        from
            personal_blog_user_announcement_read uar1_0 
        where
            uar1_0.user_id=?) 
    order by
        a1_0.pinned desc,
        a1_0.priority desc,
        a1_0.created_at desc
2025-09-01 23:36:33.502 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-09-01 23:36:33.554 [main] INFO  com.blog.BlogApplication - Starting BlogApplication using Java 17.0.2 with PID 51320 (D:\java\boke\backend\target\classes started by Redmi in D:\java\boke\backend)
2025-09-01 23:36:33.555 [main] DEBUG com.blog.BlogApplication - Running with Spring Boot v3.2.0, Spring v6.1.1
2025-09-01 23:36:33.556 [main] INFO  com.blog.BlogApplication - No active profile set, falling back to 1 default profile: "default"
2025-09-01 23:36:34.385 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-01 23:36:34.387 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-09-01 23:36:34.571 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 177 ms. Found 15 JPA repository interfaces.
2025-09-01 23:36:34.584 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-01 23:36:34.585 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-09-01 23:36:34.600 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.AnnouncementRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:36:34.601 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleLikeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:36:34.602 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:36:34.603 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:36:34.603 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CategoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:36:34.603 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CommentLikeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:36:34.603 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CommentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:36:34.603 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.FileInfoRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:36:34.603 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.LoginLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:36:34.604 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.NotificationRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:36:34.604 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.OperationLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:36:34.604 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.SecuritySettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:36:34.604 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.TagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:36:34.604 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.UserAnnouncementReadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:36:34.606 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:36:34.606 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 13 ms. Found 0 Redis repository interfaces.
2025-09-01 23:36:35.396 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-09-01 23:36:35.404 [main] INFO  org.apache.catalina.core.AprLifecycleListener - An older version [1.2.38] of the Apache Tomcat Native library is installed, while Tomcat recommends a minimum version of [2.0.5]
2025-09-01 23:36:35.404 [main] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [1.2.38] using APR version [1.7.4].
2025-09-01 23:36:35.412 [main] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 1.1.1v  1 Aug 2023]
2025-09-01 23:36:35.420 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-09-01 23:36:35.423 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-09-01 23:36:35.423 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.16]
2025-09-01 23:36:35.501 [main] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] - Initializing Spring embedded WebApplicationContext
2025-09-01 23:36:35.502 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1904 ms
2025-09-01 23:36:35.810 [main] DEBUG com.blog.filter.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-09-01 23:36:35.913 [main] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-09-01 23:36:35.958 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.3.1.Final
2025-09-01 23:36:35.989 [main] INFO  o.hibernate.cache.internal.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-09-01 23:36:36.172 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-09-01 23:36:36.194 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-09-01 23:36:36.334 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@1942a36e
2025-09-01 23:36:36.336 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-09-01 23:36:36.375 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-09-01 23:36:36.376 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-09-01 23:36:37.341 [main] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-09-01 23:36:37.453 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-09-01 23:36:37.732 [main] INFO  o.s.data.jpa.repository.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-09-01 23:36:39.765 [main] WARN  o.s.b.a.s.s.UserDetailsServiceAutoConfiguration - 

Using generated security password: 98d32028-2d14-4c6e-95a5-ad4c55892aa1

This generated password is for development use only. Your security configuration must be updated before running your application in production.

2025-09-01 23:36:40.128 [main] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@7d3304f0, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@4f48e01f, org.springframework.security.web.context.SecurityContextHolderFilter@53e43e3a, org.springframework.security.web.header.HeaderWriterFilter@50b0cd7, org.springframework.web.filter.CorsFilter@4693a0fc, org.springframework.security.web.authentication.logout.LogoutFilter@8a1a6e8, com.blog.filter.JwtAuthenticationFilter@3cf8a235, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@4070b1d3, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@68f1dc98, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@113ea6f0, org.springframework.security.web.session.SessionManagementFilter@5d6877cb, org.springframework.security.web.access.ExceptionTranslationFilter@58e97141, org.springframework.security.web.access.intercept.AuthorizationFilter@794e1391]
2025-09-01 23:36:40.490 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-09-01 23:36:40.507 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/api'
2025-09-01 23:36:40.514 [main] INFO  com.blog.BlogApplication - Started BlogApplication in 7.502 seconds (process running for 7.847)
2025-09-01 23:36:54.666 [http-nio-8080-exec-1] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-09-01 23:36:54.667 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-09-01 23:36:54.668 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-09-01 23:36:54.681 [http-nio-8080-exec-1] WARN  o.s.web.servlet.handler.HandlerMappingIntrospector - Cache miss for REQUEST dispatch to '/api/categories' (previous null). Performing MatchableHandlerMapping lookup. This is logged once only at WARN level, and every time at TRACE.
2025-09-01 23:36:55.075 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-01 23:37:05.914 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-01 23:37:16.400 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-01 23:37:16.418 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-01 23:37:16.424 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:37:16.427 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:37:16.433 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:37:16.436 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:37:16.438 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:37:16.440 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:37:16.442 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:37:16.443 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:37:16.445 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:37:16.447 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:37:16.449 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:37:16.450 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:37:16.452 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:37:16.453 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:37:16.455 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:37:16.457 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:37:16.458 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:37:28.536 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-01 23:37:28.543 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:37:28.577 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-01 23:37:29.019 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-01 23:37:29.021 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-01 23:37:29.055 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:37:29.062 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:37:29.063 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-01 23:37:29.065 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:37:29.065 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:37:29.072 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:37:29.072 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:37:29.075 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:37:29.077 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:37:29.078 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:37:29.081 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:37:29.081 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:37:29.084 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:37:29.086 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:37:29.088 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:37:29.090 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:37:29.092 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:37:29.099 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:37:29.102 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:37:29.104 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:37:29.107 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:37:29.110 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:37:29.112 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:37:29.114 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:37:29.118 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:37:29.177 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-01 23:37:29.509 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-01 23:37:29.846 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-01 23:37:29.860 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.content,
        a1_0.created_at,
        a1_0.deleted,
        a1_0.enabled,
        a1_0.end_time,
        a1_0.pinned,
        a1_0.priority,
        a1_0.publisher_id,
        a1_0.start_time,
        a1_0.title,
        a1_0.type,
        a1_0.updated_at 
    from
        personal_blog_announcement a1_0 
    where
        a1_0.deleted=0 
        and a1_0.enabled=1 
        and (
            a1_0.start_time is null 
            or a1_0.start_time<=?
        ) 
        and (
            a1_0.end_time is null 
            or a1_0.end_time>=?
        ) 
        and a1_0.id not in (select
            uar1_0.announcement_id 
        from
            personal_blog_user_announcement_read uar1_0 
        where
            uar1_0.user_id=?) 
    order by
        a1_0.pinned desc,
        a1_0.priority desc,
        a1_0.created_at desc
2025-09-01 23:37:33.564 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-01 23:37:33.570 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:37:33.578 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-01 23:37:34.186 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-01 23:37:34.189 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-01 23:37:34.194 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:37:34.195 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-01 23:37:34.198 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:37:34.198 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:37:34.201 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:37:34.202 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:37:34.205 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:37:34.206 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:37:34.209 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:37:34.210 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:37:34.213 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:37:34.213 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:37:34.216 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:37:34.217 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:37:34.220 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:37:34.223 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:37:34.226 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:37:34.229 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:37:34.232 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:37:34.237 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:37:34.239 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:37:34.242 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:37:34.245 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:37:34.248 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:37:34.250 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:37:34.405 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-01 23:37:34.795 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-01 23:37:35.055 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-01 23:37:35.064 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.content,
        a1_0.created_at,
        a1_0.deleted,
        a1_0.enabled,
        a1_0.end_time,
        a1_0.pinned,
        a1_0.priority,
        a1_0.publisher_id,
        a1_0.start_time,
        a1_0.title,
        a1_0.type,
        a1_0.updated_at 
    from
        personal_blog_announcement a1_0 
    where
        a1_0.deleted=0 
        and a1_0.enabled=1 
        and (
            a1_0.start_time is null 
            or a1_0.start_time<=?
        ) 
        and (
            a1_0.end_time is null 
            or a1_0.end_time>=?
        ) 
        and a1_0.id not in (select
            uar1_0.announcement_id 
        from
            personal_blog_user_announcement_read uar1_0 
        where
            uar1_0.user_id=?) 
    order by
        a1_0.pinned desc,
        a1_0.priority desc,
        a1_0.created_at desc
2025-09-01 23:39:44.763 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-01 23:39:44.767 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:39:44.771 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-01 23:39:49.107 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-01 23:39:49.111 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:39:49.116 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-01 23:39:49.660 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-01 23:39:49.661 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-01 23:39:49.665 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:39:49.671 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-01 23:39:49.673 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:39:49.677 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:39:49.679 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:39:49.679 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:39:49.686 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:39:49.686 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:39:49.688 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:39:49.688 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:39:49.691 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:39:49.691 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:39:49.694 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:39:49.695 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:39:49.697 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:39:49.700 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:39:49.702 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:39:49.708 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:39:49.720 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:39:49.723 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:39:49.725 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:39:49.728 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:39:49.730 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:39:49.733 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:39:49.735 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:39:49.873 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-01 23:39:50.208 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-01 23:39:50.524 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-01 23:39:50.529 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.content,
        a1_0.created_at,
        a1_0.deleted,
        a1_0.enabled,
        a1_0.end_time,
        a1_0.pinned,
        a1_0.priority,
        a1_0.publisher_id,
        a1_0.start_time,
        a1_0.title,
        a1_0.type,
        a1_0.updated_at 
    from
        personal_blog_announcement a1_0 
    where
        a1_0.deleted=0 
        and a1_0.enabled=1 
        and (
            a1_0.start_time is null 
            or a1_0.start_time<=?
        ) 
        and (
            a1_0.end_time is null 
            or a1_0.end_time>=?
        ) 
        and a1_0.id not in (select
            uar1_0.announcement_id 
        from
            personal_blog_user_announcement_read uar1_0 
        where
            uar1_0.user_id=?) 
    order by
        a1_0.pinned desc,
        a1_0.priority desc,
        a1_0.created_at desc
2025-09-01 23:39:59.131 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-01 23:39:59.139 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:39:59.144 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-01 23:39:59.919 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-01 23:39:59.944 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-01 23:40:00.008 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:40:00.132 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:40:00.133 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-01 23:40:00.171 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:40:00.242 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:40:00.260 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:40:00.277 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:40:00.284 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:40:00.365 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:40:00.378 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:40:00.382 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:40:00.392 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:40:00.406 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:40:00.423 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:40:00.426 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:40:00.445 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:40:00.461 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:40:00.464 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:40:00.479 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:40:00.504 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:40:00.515 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:40:00.529 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:40:00.585 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:40:00.614 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:40:00.624 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:40:00.704 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-01 23:40:00.716 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.content,
        a1_0.created_at,
        a1_0.deleted,
        a1_0.enabled,
        a1_0.end_time,
        a1_0.pinned,
        a1_0.priority,
        a1_0.publisher_id,
        a1_0.start_time,
        a1_0.title,
        a1_0.type,
        a1_0.updated_at 
    from
        personal_blog_announcement a1_0 
    where
        a1_0.deleted=0 
        and a1_0.enabled=1 
        and (
            a1_0.start_time is null 
            or a1_0.start_time<=?
        ) 
        and (
            a1_0.end_time is null 
            or a1_0.end_time>=?
        ) 
        and a1_0.id not in (select
            uar1_0.announcement_id 
        from
            personal_blog_user_announcement_read uar1_0 
        where
            uar1_0.user_id=?) 
    order by
        a1_0.pinned desc,
        a1_0.priority desc,
        a1_0.created_at desc
2025-09-01 23:40:00.820 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-01 23:40:01.202 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-01 23:40:32.653 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-01 23:40:32.675 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:40:32.695 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-01 23:40:32.738 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-01 23:40:32.749 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:40:32.759 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-01 23:40:34.015 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-01 23:40:34.020 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-01 23:40:34.104 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-01 23:40:34.120 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:40:34.125 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:40:34.138 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:40:34.147 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:40:34.157 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:40:34.159 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:40:34.166 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:40:34.169 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:40:34.172 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:40:34.177 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:40:34.187 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:40:34.190 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:40:34.199 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:40:34.203 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:40:34.204 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-01 23:40:34.205 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:40:34.212 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:40:34.208 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:40:34.208 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-01 23:40:34.222 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:40:34.225 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:40:34.228 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:40:34.229 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-01 23:40:34.236 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:40:34.236 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:40:34.238 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:40:34.240 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:40:34.245 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:40:34.248 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:40:34.253 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:40:34.254 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:40:34.254 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:40:34.259 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:40:34.259 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:40:34.260 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:40:34.265 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:40:34.265 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:40:34.265 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:40:34.269 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:40:34.277 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:40:34.282 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:40:34.285 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:40:34.287 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:40:34.291 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:40:34.293 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:40:34.295 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:40:34.297 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:40:34.299 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:40:34.305 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:40:34.313 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:40:34.316 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:40:34.358 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-01 23:40:34.530 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-01 23:40:34.567 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-01 23:40:34.846 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-01 23:40:34.869 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.content,
        a1_0.created_at,
        a1_0.deleted,
        a1_0.enabled,
        a1_0.end_time,
        a1_0.pinned,
        a1_0.priority,
        a1_0.publisher_id,
        a1_0.start_time,
        a1_0.title,
        a1_0.type,
        a1_0.updated_at 
    from
        personal_blog_announcement a1_0 
    where
        a1_0.deleted=0 
        and a1_0.enabled=1 
        and (
            a1_0.start_time is null 
            or a1_0.start_time<=?
        ) 
        and (
            a1_0.end_time is null 
            or a1_0.end_time>=?
        ) 
        and a1_0.id not in (select
            uar1_0.announcement_id 
        from
            personal_blog_user_announcement_read uar1_0 
        where
            uar1_0.user_id=?) 
    order by
        a1_0.pinned desc,
        a1_0.priority desc,
        a1_0.created_at desc
2025-09-01 23:40:34.964 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-01 23:40:35.118 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-01 23:40:35.128 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.content,
        a1_0.created_at,
        a1_0.deleted,
        a1_0.enabled,
        a1_0.end_time,
        a1_0.pinned,
        a1_0.priority,
        a1_0.publisher_id,
        a1_0.start_time,
        a1_0.title,
        a1_0.type,
        a1_0.updated_at 
    from
        personal_blog_announcement a1_0 
    where
        a1_0.deleted=0 
        and a1_0.enabled=1 
        and (
            a1_0.start_time is null 
            or a1_0.start_time<=?
        ) 
        and (
            a1_0.end_time is null 
            or a1_0.end_time>=?
        ) 
        and a1_0.id not in (select
            uar1_0.announcement_id 
        from
            personal_blog_user_announcement_read uar1_0 
        where
            uar1_0.user_id=?) 
    order by
        a1_0.pinned desc,
        a1_0.priority desc,
        a1_0.created_at desc
2025-09-01 23:40:37.710 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-01 23:40:37.718 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        count(u1_0.id) 
    from
        users u1_0
2025-09-01 23:40:37.741 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        count(c1_0.id) 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED'
2025-09-01 23:40:37.810 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        coalesce(sum(a1_0.view_count), 0) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-01 23:40:37.811 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        date(c1_0.created_at),
        count(c1_0.id) 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
        and c1_0.created_at>=? 
    group by
        date(c1_0.created_at) 
    order by
        date(c1_0.created_at)
2025-09-01 23:40:37.871 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    SELECT
        DATE(published_at) as date,
        COUNT(*) as count 
    FROM
        article 
    WHERE
        status = 'PUBLISHED' 
        AND published_at >= ? 
    GROUP BY
        DATE(published_at) 
    ORDER BY
        DATE(published_at)
2025-09-01 23:40:37.871 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    SELECT
        c.name as categoryName,
        COUNT(*) as count 
    FROM
        article a 
    JOIN
        category c 
            ON a.category_id = c.id 
    WHERE
        a.status = 'PUBLISHED' 
    GROUP BY
        c.id,
        c.name 
    ORDER BY
        COUNT(*) DESC
2025-09-01 23:40:37.871 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    SELECT
        HOUR(published_at) as hour,
        COUNT(*) as visits,
        COUNT(DISTINCT author_id) as uniqueVisits 
    FROM
        article 
    WHERE
        status = 'PUBLISHED' 
        AND published_at >= ? 
    GROUP BY
        HOUR(published_at) 
    ORDER BY
        HOUR(published_at)
2025-09-01 23:40:37.873 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    SELECT
        DATE(published_at) as date,
        COALESCE(SUM(view_count), 0) as totalViews 
    FROM
        article 
    WHERE
        status = 'PUBLISHED' 
        AND published_at >= ? 
    GROUP BY
        DATE(published_at) 
    ORDER BY
        DATE(published_at)
2025-09-01 23:40:38.222 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-01 23:40:38.223 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-01 23:40:38.252 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        count(n1_0.id) 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
        and not(n1_0.is_read)
2025-09-01 23:40:38.269 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.is_read,
        n1_0.related_id,
        n1_0.related_type,
        n1_0.title,
        n1_0.type,
        n1_0.updated_at,
        n1_0.user_id 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
    order by
        n1_0.created_at desc 
    limit
        ?, ?
2025-09-01 23:40:38.286 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.like_count desc 
    limit
        ?, ?
2025-09-01 23:40:38.308 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-01 23:40:38.312 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:40:38.326 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:40:38.392 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:40:38.403 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:40:38.414 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:40:38.424 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:40:38.443 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:40:38.454 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:40:38.472 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:40:38.482 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:40:38.488 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:40:38.499 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:40:38.886 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-01 23:40:38.900 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:40:38.908 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:40:38.916 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:40:38.919 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:40:38.930 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:40:38.935 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:40:38.943 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:40:39.166 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-01 23:40:39.181 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:40:39.188 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:40:39.194 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:41:15.487 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-01 23:41:15.499 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:41:15.504 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-01 23:41:16.368 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-01 23:41:16.395 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-01 23:41:16.415 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-01 23:41:16.417 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:41:16.440 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:41:16.447 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:41:16.456 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:41:16.458 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:41:16.462 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:41:16.463 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:41:16.466 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:41:16.466 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:41:16.500 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:41:16.504 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:41:16.523 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:41:16.523 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:41:16.526 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:41:16.527 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:41:16.534 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:41:16.539 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:41:16.541 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:41:16.543 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:41:16.545 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:41:16.547 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:41:16.549 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:41:16.558 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:41:16.560 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:41:16.702 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-01 23:41:17.057 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-01 23:41:18.935 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-01 23:41:18.938 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:41:18.942 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-01 23:41:20.178 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-01 23:41:20.179 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-01 23:41:20.185 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-01 23:41:20.185 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:41:20.187 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:41:20.188 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:41:20.190 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:41:20.190 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:41:20.191 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:41:20.191 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:41:20.193 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:41:20.193 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:41:20.195 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:41:20.195 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:41:20.197 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:41:20.197 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:41:20.198 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:41:20.200 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:41:20.201 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:41:20.203 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:41:20.204 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:41:20.205 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:41:20.207 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:41:20.208 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:41:20.209 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:41:20.211 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:41:20.212 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:41:20.580 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-01 23:41:20.829 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-01 23:41:21.481 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-01 23:41:21.485 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.content,
        a1_0.created_at,
        a1_0.deleted,
        a1_0.enabled,
        a1_0.end_time,
        a1_0.pinned,
        a1_0.priority,
        a1_0.publisher_id,
        a1_0.start_time,
        a1_0.title,
        a1_0.type,
        a1_0.updated_at 
    from
        personal_blog_announcement a1_0 
    where
        a1_0.deleted=0 
        and a1_0.enabled=1 
        and (
            a1_0.start_time is null 
            or a1_0.start_time<=?
        ) 
        and (
            a1_0.end_time is null 
            or a1_0.end_time>=?
        ) 
        and a1_0.id not in (select
            uar1_0.announcement_id 
        from
            personal_blog_user_announcement_read uar1_0 
        where
            uar1_0.user_id=?) 
    order by
        a1_0.pinned desc,
        a1_0.priority desc,
        a1_0.created_at desc
2025-09-01 23:41:48.855 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-01 23:41:48.869 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:41:48.888 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-01 23:41:59.265 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-01 23:41:59.269 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        count(u1_0.id) 
    from
        users u1_0
2025-09-01 23:41:59.273 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        count(c1_0.id) 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED'
2025-09-01 23:41:59.277 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        coalesce(sum(a1_0.view_count), 0) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-01 23:41:59.280 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    SELECT
        DATE(published_at) as date,
        COALESCE(SUM(view_count), 0) as totalViews 
    FROM
        article 
    WHERE
        status = 'PUBLISHED' 
        AND published_at >= ? 
    GROUP BY
        DATE(published_at) 
    ORDER BY
        DATE(published_at)
2025-09-01 23:41:59.280 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    SELECT
        DATE(published_at) as date,
        COUNT(*) as count 
    FROM
        article 
    WHERE
        status = 'PUBLISHED' 
        AND published_at >= ? 
    GROUP BY
        DATE(published_at) 
    ORDER BY
        DATE(published_at)
2025-09-01 23:41:59.280 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    SELECT
        c.name as categoryName,
        COUNT(*) as count 
    FROM
        article a 
    JOIN
        category c 
            ON a.category_id = c.id 
    WHERE
        a.status = 'PUBLISHED' 
    GROUP BY
        c.id,
        c.name 
    ORDER BY
        COUNT(*) DESC
2025-09-01 23:41:59.285 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        date(c1_0.created_at),
        count(c1_0.id) 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
        and c1_0.created_at>=? 
    group by
        date(c1_0.created_at) 
    order by
        date(c1_0.created_at)
2025-09-01 23:41:59.579 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    SELECT
        HOUR(published_at) as hour,
        COUNT(*) as visits,
        COUNT(DISTINCT author_id) as uniqueVisits 
    FROM
        article 
    WHERE
        status = 'PUBLISHED' 
        AND published_at >= ? 
    GROUP BY
        HOUR(published_at) 
    ORDER BY
        HOUR(published_at)
2025-09-01 23:41:59.609 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-01 23:41:59.609 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-01 23:41:59.614 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.is_read,
        n1_0.related_id,
        n1_0.related_type,
        n1_0.title,
        n1_0.type,
        n1_0.updated_at,
        n1_0.user_id 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
    order by
        n1_0.created_at desc 
    limit
        ?, ?
2025-09-01 23:41:59.615 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        count(n1_0.id) 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
        and not(n1_0.is_read)
2025-09-01 23:41:59.767 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.like_count desc 
    limit
        ?, ?
2025-09-01 23:41:59.770 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-01 23:41:59.772 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:41:59.774 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:41:59.789 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:41:59.791 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:41:59.792 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:41:59.795 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:41:59.796 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:41:59.798 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:41:59.800 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:41:59.802 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:41:59.803 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:41:59.805 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:42:00.111 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-01 23:42:00.113 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:42:00.116 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:42:00.117 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:42:00.119 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:42:00.121 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:42:00.124 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:42:00.126 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:42:00.166 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-01 23:42:00.167 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:42:00.169 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:42:00.171 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:42:35.944 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-01 23:42:35.955 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:42:35.966 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-01 23:42:36.400 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-01 23:42:36.400 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-01 23:42:36.429 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:42:36.430 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-01 23:42:36.434 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:42:36.434 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:42:36.437 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:42:36.437 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:42:36.440 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:42:36.440 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:42:36.442 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:42:36.444 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:42:36.446 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:42:36.446 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:42:36.451 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:42:36.451 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:42:36.454 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:42:36.458 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:42:36.461 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:42:36.463 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:42:36.466 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:42:36.468 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:42:36.470 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:42:36.472 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:42:36.474 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:42:36.477 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:42:36.479 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:42:36.641 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-01 23:42:37.019 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-01 23:42:37.269 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-01 23:42:37.274 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.content,
        a1_0.created_at,
        a1_0.deleted,
        a1_0.enabled,
        a1_0.end_time,
        a1_0.pinned,
        a1_0.priority,
        a1_0.publisher_id,
        a1_0.start_time,
        a1_0.title,
        a1_0.type,
        a1_0.updated_at 
    from
        personal_blog_announcement a1_0 
    where
        a1_0.deleted=0 
        and a1_0.enabled=1 
        and (
            a1_0.start_time is null 
            or a1_0.start_time<=?
        ) 
        and (
            a1_0.end_time is null 
            or a1_0.end_time>=?
        ) 
        and a1_0.id not in (select
            uar1_0.announcement_id 
        from
            personal_blog_user_announcement_read uar1_0 
        where
            uar1_0.user_id=?) 
    order by
        a1_0.pinned desc,
        a1_0.priority desc,
        a1_0.created_at desc
2025-09-01 23:42:43.410 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.content,
        a1_0.created_at,
        a1_0.deleted,
        a1_0.enabled,
        a1_0.end_time,
        a1_0.pinned,
        a1_0.priority,
        a1_0.publisher_id,
        a1_0.start_time,
        a1_0.title,
        a1_0.type,
        a1_0.updated_at 
    from
        personal_blog_announcement a1_0 
    where
        not(a1_0.deleted) 
    order by
        a1_0.created_at desc 
    limit
        ?, ?
2025-09-01 23:42:43.414 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:42:43.423 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        count(uar1_0.id) 
    from
        personal_blog_user_announcement_read uar1_0 
    where
        uar1_0.announcement_id=?
2025-09-01 23:42:43.429 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        count(uar1_0.id) 
    from
        personal_blog_user_announcement_read uar1_0 
    where
        uar1_0.announcement_id=?
2025-09-01 23:42:47.717 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-01 23:42:47.773 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    order by
        a1_0.created_at desc,
        a1_0.created_at desc 
    limit
        ?, ?
2025-09-01 23:42:47.779 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0
2025-09-01 23:42:47.786 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:42:47.794 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:42:47.815 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:42:47.828 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:42:47.839 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:42:47.850 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:42:47.854 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:42:47.864 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:42:47.870 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:42:47.874 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:42:47.876 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:42:47.882 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:42:47.886 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:42:47.892 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:42:47.897 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:42:47.900 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:42:47.909 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:42:47.914 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:42:47.918 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:42:47.921 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:42:47.927 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:42:47.933 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:42:47.935 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:42:47.940 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:43:28.991 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-01 23:43:28.995 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:43:28.998 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-01 23:43:29.611 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-01 23:43:29.616 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-01 23:43:29.619 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:43:29.622 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-01 23:43:29.623 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:43:29.623 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:43:29.626 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:43:29.626 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:43:29.628 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:43:29.628 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:43:29.630 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:43:29.630 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:43:29.632 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:43:29.632 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:43:29.633 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:43:29.633 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:43:29.635 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:43:29.637 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:43:29.639 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:43:29.641 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:43:29.643 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:43:29.644 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:43:29.646 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:43:29.648 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:43:29.649 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:43:29.651 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:43:29.652 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:43:29.750 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-01 23:43:30.092 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-01 23:43:30.275 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-01 23:43:30.279 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:43:30.282 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-01 23:43:30.729 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-01 23:43:30.734 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.content,
        a1_0.created_at,
        a1_0.deleted,
        a1_0.enabled,
        a1_0.end_time,
        a1_0.pinned,
        a1_0.priority,
        a1_0.publisher_id,
        a1_0.start_time,
        a1_0.title,
        a1_0.type,
        a1_0.updated_at 
    from
        personal_blog_announcement a1_0 
    where
        a1_0.deleted=0 
        and a1_0.enabled=1 
        and (
            a1_0.start_time is null 
            or a1_0.start_time<=?
        ) 
        and (
            a1_0.end_time is null 
            or a1_0.end_time>=?
        ) 
        and a1_0.id not in (select
            uar1_0.announcement_id 
        from
            personal_blog_user_announcement_read uar1_0 
        where
            uar1_0.user_id=?) 
    order by
        a1_0.pinned desc,
        a1_0.priority desc,
        a1_0.created_at desc
2025-09-01 23:43:31.528 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    order by
        a1_0.created_at desc,
        a1_0.created_at desc 
    limit
        ?, ?
2025-09-01 23:43:31.529 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-01 23:43:31.531 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0
2025-09-01 23:43:31.532 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:43:31.534 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:43:31.534 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-01 23:43:31.536 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:43:31.536 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-01 23:43:31.538 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:43:31.540 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.is_read,
        n1_0.related_id,
        n1_0.related_type,
        n1_0.title,
        n1_0.type,
        n1_0.updated_at,
        n1_0.user_id 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
    order by
        n1_0.created_at desc 
    limit
        ?, ?
2025-09-01 23:43:31.540 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:43:31.541 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        count(n1_0.id) 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
        and not(n1_0.is_read)
2025-09-01 23:43:31.542 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:43:31.544 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:43:31.546 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:43:31.548 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:43:31.549 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:43:31.551 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:43:31.553 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:43:31.555 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:43:31.556 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:43:31.558 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:43:31.559 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:43:31.560 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:43:31.562 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:43:31.563 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:43:31.565 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:43:31.566 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:43:31.568 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:43:31.569 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:43:31.571 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:44:19.829 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.created_at desc 
    limit
        ?, ?
2025-09-01 23:44:21.984 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        (
            ? is null 
            or ?='' 
            or c1_0.content like replace(?, '\\', '\\\\')
        ) 
        and (
            ? is null 
            or ?='' 
            or exists(select
                1 
            from
                users u2_0 
            where
                u2_0.id=c1_0.user_id 
                and u2_0.nickname like replace(?, '\\', '\\\\'))
        ) 
        and (
            ? is null 
            or ?='' 
            or exists(select
                1 
            from
                article a2_0 
            where
                a2_0.id=c1_0.article_id 
                and a2_0.title like replace(?, '\\', '\\\\'))
        ) 
        and (
            ? is null 
            or c1_0.status=?
        ) 
    order by
        c1_0.created_at desc,
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-01 23:44:22.006 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        count(c1_0.id) 
    from
        comment c1_0 
    where
        (
            ? is null 
            or ?='' 
            or c1_0.content like replace(?, '\\', '\\\\')
        ) 
        and (
            ? is null 
            or ?='' 
            or exists(select
                1 
            from
                users u1_0 
            where
                u1_0.id=c1_0.user_id 
                and u1_0.nickname like replace(?, '\\', '\\\\'))
        ) 
        and (
            ? is null 
            or ?='' 
            or exists(select
                1 
            from
                article a1_0 
            where
                a1_0.id=c1_0.article_id 
                and a1_0.title like replace(?, '\\', '\\\\'))
        ) 
        and (
            ? is null 
            or c1_0.status=?
        )
2025-09-01 23:44:22.034 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:44:22.046 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:44:22.050 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:44:22.052 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:44:22.058 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:44:22.067 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:44:22.069 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:44:22.073 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:44:22.082 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:44:22.085 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:44:22.091 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:44:22.095 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:44:22.108 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:44:22.112 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:44:22.118 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:44:23.359 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-01 23:44:23.369 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    order by
        u1_0.created_at desc 
    limit
        ?, ?
2025-09-01 23:44:23.384 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-01 23:44:24.739 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    SELECT
        DATE(published_at) as date,
        COUNT(*) as count 
    FROM
        article 
    WHERE
        status = 'PUBLISHED' 
        AND published_at >= ? 
    GROUP BY
        DATE(published_at) 
    ORDER BY
        DATE(published_at)
2025-09-01 23:44:24.776 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    SELECT
        c.content 
    FROM
        comment c 
    WHERE
        c.status = 'APPROVED' 
        AND LENGTH(c.content) > 2 
    ORDER BY
        c.created_at DESC 
    LIMIT
        1000
2025-09-01 23:44:24.776 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-01 23:44:24.780 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    SELECT
        c.name as categoryName,
        COUNT(*) as count 
    FROM
        article a 
    JOIN
        category c 
            ON a.category_id = c.id 
    WHERE
        a.status = 'PUBLISHED' 
    GROUP BY
        c.id,
        c.name 
    ORDER BY
        COUNT(*) DESC
2025-09-01 23:44:24.781 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        date(c1_0.created_at),
        count(c1_0.id) 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
        and c1_0.created_at>=? 
    group by
        date(c1_0.created_at) 
    order by
        date(c1_0.created_at)
2025-09-01 23:44:24.792 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        count(u1_0.id) 
    from
        users u1_0
2025-09-01 23:44:24.817 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        count(c1_0.id) 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED'
2025-09-01 23:44:24.828 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        coalesce(sum(a1_0.view_count), 0) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-01 23:44:25.016 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    SELECT
        title,
        view_count,
        published_at 
    FROM
        article 
    WHERE
        status = 'PUBLISHED' 
    ORDER BY
        view_count DESC 
    limit
        ?
2025-09-01 23:44:40.369 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-01 23:44:40.377 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:44:40.384 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-01 23:44:41.762 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-01 23:44:41.769 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:44:41.780 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-01 23:44:41.786 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:44:41.792 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:44:41.794 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-01 23:44:41.804 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:44:41.817 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:44:41.817 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:44:41.825 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:44:41.828 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:44:41.837 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:44:41.840 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:44:41.849 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:44:41.854 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:44:41.857 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:44:41.858 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:44:41.860 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:44:41.863 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:44:41.864 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:44:41.866 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:44:41.868 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:44:41.870 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:44:41.872 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:44:41.876 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:44:41.877 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:44:41.880 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:44:42.053 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-01 23:44:42.386 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-01 23:44:42.641 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-01 23:44:42.645 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.content,
        a1_0.created_at,
        a1_0.deleted,
        a1_0.enabled,
        a1_0.end_time,
        a1_0.pinned,
        a1_0.priority,
        a1_0.publisher_id,
        a1_0.start_time,
        a1_0.title,
        a1_0.type,
        a1_0.updated_at 
    from
        personal_blog_announcement a1_0 
    where
        a1_0.deleted=0 
        and a1_0.enabled=1 
        and (
            a1_0.start_time is null 
            or a1_0.start_time<=?
        ) 
        and (
            a1_0.end_time is null 
            or a1_0.end_time>=?
        ) 
        and a1_0.id not in (select
            uar1_0.announcement_id 
        from
            personal_blog_user_announcement_read uar1_0 
        where
            uar1_0.user_id=?) 
    order by
        a1_0.pinned desc,
        a1_0.priority desc,
        a1_0.created_at desc
2025-09-01 23:44:42.931 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-01 23:44:42.934 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:44:42.937 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-01 23:44:44.251 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-01 23:44:44.256 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.is_read,
        n1_0.related_id,
        n1_0.related_type,
        n1_0.title,
        n1_0.type,
        n1_0.updated_at,
        n1_0.user_id 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
    order by
        n1_0.created_at desc 
    limit
        ?, ?
2025-09-01 23:44:44.553 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-01 23:44:44.558 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        count(n1_0.id) 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
        and not(n1_0.is_read)
2025-09-01 23:51:46.113 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-01 23:51:46.117 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:51:46.121 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-01 23:51:47.291 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-01 23:51:47.291 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-01 23:51:47.294 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        count(n1_0.id) 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
        and not(n1_0.is_read)
2025-09-01 23:51:47.294 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.is_read,
        n1_0.related_id,
        n1_0.related_type,
        n1_0.title,
        n1_0.type,
        n1_0.updated_at,
        n1_0.user_id 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
    order by
        n1_0.created_at desc 
    limit
        ?, ?
2025-09-01 23:53:08.730 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-01 23:53:08.730 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-01 23:53:08.733 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:53:08.734 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-01 23:53:08.735 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:53:08.736 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:53:08.738 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:53:08.739 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:53:08.741 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:53:08.741 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:53:08.744 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:53:08.744 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:53:08.745 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:53:08.746 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:53:08.748 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:53:08.748 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:53:08.750 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:53:08.752 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:53:08.753 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:53:08.755 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:53:08.756 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:53:08.758 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:53:08.759 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:53:08.760 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:53:08.762 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:53:08.763 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:53:08.765 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:53:08.901 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-01 23:53:08.939 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-01 23:56:46.877 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-01 23:56:46.881 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:56:46.885 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-01 23:56:47.270 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-01 23:56:47.273 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-01 23:56:47.280 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:56:47.283 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-01 23:56:47.289 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:56:47.294 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:56:47.296 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:56:47.306 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:56:47.318 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:56:47.318 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:56:47.326 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:56:47.331 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:56:47.335 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:56:47.336 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:56:47.353 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:56:47.363 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:56:47.371 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:56:47.377 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:56:47.388 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:56:47.397 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:56:47.406 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:56:47.410 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:56:47.416 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:56:47.422 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:56:47.427 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:56:47.434 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:56:47.439 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:56:47.497 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-01 23:56:47.906 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-01 23:56:48.214 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-01 23:56:48.246 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.content,
        a1_0.created_at,
        a1_0.deleted,
        a1_0.enabled,
        a1_0.end_time,
        a1_0.pinned,
        a1_0.priority,
        a1_0.publisher_id,
        a1_0.start_time,
        a1_0.title,
        a1_0.type,
        a1_0.updated_at 
    from
        personal_blog_announcement a1_0 
    where
        a1_0.deleted=0 
        and a1_0.enabled=1 
        and (
            a1_0.start_time is null 
            or a1_0.start_time<=?
        ) 
        and (
            a1_0.end_time is null 
            or a1_0.end_time>=?
        ) 
        and a1_0.id not in (select
            uar1_0.announcement_id 
        from
            personal_blog_user_announcement_read uar1_0 
        where
            uar1_0.user_id=?) 
    order by
        a1_0.pinned desc,
        a1_0.priority desc,
        a1_0.created_at desc
2025-09-01 23:56:55.971 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-01 23:56:55.973 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    SELECT
        DATE(published_at) as date,
        COUNT(*) as count 
    FROM
        article 
    WHERE
        status = 'PUBLISHED' 
        AND published_at >= ? 
    GROUP BY
        DATE(published_at) 
    ORDER BY
        DATE(published_at)
2025-09-01 23:56:55.973 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    SELECT
        DATE(published_at) as date,
        COALESCE(SUM(view_count), 0) as totalViews 
    FROM
        article 
    WHERE
        status = 'PUBLISHED' 
        AND published_at >= ? 
    GROUP BY
        DATE(published_at) 
    ORDER BY
        DATE(published_at)
2025-09-01 23:56:55.975 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        count(u1_0.id) 
    from
        users u1_0
2025-09-01 23:56:55.977 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    SELECT
        c.name as categoryName,
        COUNT(*) as count 
    FROM
        article a 
    JOIN
        category c 
            ON a.category_id = c.id 
    WHERE
        a.status = 'PUBLISHED' 
    GROUP BY
        c.id,
        c.name 
    ORDER BY
        COUNT(*) DESC
2025-09-01 23:56:55.978 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        date(c1_0.created_at),
        count(c1_0.id) 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
        and c1_0.created_at>=? 
    group by
        date(c1_0.created_at) 
    order by
        date(c1_0.created_at)
2025-09-01 23:56:55.978 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        count(c1_0.id) 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED'
2025-09-01 23:56:55.982 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        coalesce(sum(a1_0.view_count), 0) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-01 23:56:56.274 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    SELECT
        HOUR(published_at) as hour,
        COUNT(*) as visits,
        COUNT(DISTINCT author_id) as uniqueVisits 
    FROM
        article 
    WHERE
        status = 'PUBLISHED' 
        AND published_at >= ? 
    GROUP BY
        HOUR(published_at) 
    ORDER BY
        HOUR(published_at)
2025-09-01 23:56:56.304 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-01 23:56:56.305 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-01 23:56:56.309 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        count(n1_0.id) 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
        and not(n1_0.is_read)
2025-09-01 23:56:56.311 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.is_read,
        n1_0.related_id,
        n1_0.related_type,
        n1_0.title,
        n1_0.type,
        n1_0.updated_at,
        n1_0.user_id 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
    order by
        n1_0.created_at desc 
    limit
        ?, ?
2025-09-01 23:56:56.409 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.like_count desc 
    limit
        ?, ?
2025-09-01 23:56:56.412 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-01 23:56:56.414 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:56:56.416 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:56:56.418 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:56:56.420 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:56:56.422 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:56:56.424 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:56:56.425 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:56:56.427 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:56:56.428 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:56:56.430 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:56:56.432 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:56:56.433 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:56:56.756 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-01 23:56:56.758 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:56:56.760 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:56:56.762 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:56:56.763 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:56:56.765 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:56:56.766 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:56:56.768 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:56:57.009 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-01 23:56:57.011 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:56:57.013 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:56:57.015 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:57:33.300 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-01 23:57:33.301 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-01 23:57:33.312 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:57:33.318 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-01 23:57:33.318 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:57:33.320 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:57:33.320 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:57:33.322 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:57:33.322 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:57:33.323 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:57:33.323 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:57:33.324 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:57:33.324 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:57:33.326 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:57:33.326 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-01 23:57:33.328 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:57:33.329 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:57:33.330 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:57:33.332 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:57:33.333 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-01 23:57:33.335 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:57:33.336 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:57:33.337 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:57:33.339 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:57:33.340 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-01 23:57:33.341 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-01 23:57:33.343 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-01 23:57:33.367 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-01 23:57:33.489 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-01 23:58:01.497 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-09-01 23:58:01.553 [main] INFO  com.blog.BlogApplication - Starting BlogApplication using Java 17.0.2 with PID 44856 (D:\java\boke\backend\target\classes started by Redmi in D:\java\boke\backend)
2025-09-01 23:58:01.554 [main] DEBUG com.blog.BlogApplication - Running with Spring Boot v3.2.0, Spring v6.1.1
2025-09-01 23:58:01.555 [main] INFO  com.blog.BlogApplication - No active profile set, falling back to 1 default profile: "default"
2025-09-01 23:58:02.407 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-01 23:58:02.409 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-09-01 23:58:02.619 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 201 ms. Found 15 JPA repository interfaces.
2025-09-01 23:58:02.634 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-01 23:58:02.636 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-09-01 23:58:02.652 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.AnnouncementRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:58:02.653 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleLikeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:58:02.654 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:58:02.654 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:58:02.655 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CategoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:58:02.655 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CommentLikeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:58:02.656 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CommentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:58:02.657 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.FileInfoRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:58:02.657 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.LoginLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:58:02.657 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.NotificationRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:58:02.658 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.OperationLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:58:02.658 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.SecuritySettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:58:02.658 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.TagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:58:02.659 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.UserAnnouncementReadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:58:02.659 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-01 23:58:02.659 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 15 ms. Found 0 Redis repository interfaces.
2025-09-01 23:58:03.697 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-09-01 23:58:03.705 [main] INFO  org.apache.catalina.core.AprLifecycleListener - An older version [1.2.38] of the Apache Tomcat Native library is installed, while Tomcat recommends a minimum version of [2.0.5]
2025-09-01 23:58:03.705 [main] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [1.2.38] using APR version [1.7.4].
2025-09-01 23:58:03.708 [main] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 1.1.1v  1 Aug 2023]
2025-09-01 23:58:03.716 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-09-01 23:58:03.719 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-09-01 23:58:03.719 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.16]
2025-09-01 23:58:03.826 [main] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] - Initializing Spring embedded WebApplicationContext
2025-09-01 23:58:03.826 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2222 ms
2025-09-01 23:58:04.235 [main] DEBUG com.blog.filter.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-09-01 23:58:04.354 [main] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-09-01 23:58:04.398 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.3.1.Final
2025-09-01 23:58:04.428 [main] INFO  o.hibernate.cache.internal.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-09-01 23:58:04.649 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-09-01 23:58:04.672 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-09-01 23:58:04.804 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@56d742ad
2025-09-01 23:58:04.806 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-09-01 23:58:04.843 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-09-01 23:58:04.845 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-09-01 23:58:06.126 [main] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-09-01 23:58:06.241 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-09-01 23:58:06.581 [main] INFO  o.s.data.jpa.repository.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-09-01 23:58:08.447 [main] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'authController' defined in file [D:\java\boke\backend\target\classes\com\blog\controller\AuthController.class]: Failed to instantiate [com.blog.controller.AuthController]: Constructor threw exception
2025-09-01 23:58:08.448 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-09-01 23:58:08.449 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-09-01 23:58:08.457 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-09-01 23:58:08.471 [main] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-09-01 23:58:08.482 [main] INFO  o.s.b.a.logging.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-09-01 23:58:08.499 [main] ERROR org.springframework.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'authController' defined in file [D:\java\boke\backend\target\classes\com\blog\controller\AuthController.class]: Failed to instantiate [com.blog.controller.AuthController]: Constructor threw exception
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateBean(AbstractAutowireCapableBeanFactory.java:1318)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1203)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:973)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:946)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:616)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.blog.BlogApplication.main(BlogApplication.java:11)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [com.blog.controller.AuthController]: Constructor threw exception
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:223)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:88)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateBean(AbstractAutowireCapableBeanFactory.java:1312)
	... 17 common frames omitted
Caused by: java.lang.Error: Unresolved compilation problems: 
	The import com.blog.service.CaptchaService cannot be resolved
	CaptchaService cannot be resolved to a type
	CaptchaService cannot be resolved to a type
	CaptchaService cannot be resolved to a type

	at com.blog.controller.AuthController.<init>(AuthController.java:8)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:197)
	... 19 common frames omitted
