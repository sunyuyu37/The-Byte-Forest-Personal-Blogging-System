2025-09-02 00:00:53.121 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-09-02 00:00:53.167 [main] INFO  com.blog.BlogApplication - Starting BlogApplication using Java 17.0.2 with PID 24288 (D:\java\boke\backend\target\classes started by Redmi in D:\java\boke\backend)
2025-09-02 00:00:53.168 [main] DEBUG com.blog.BlogApplication - Running with Spring Boot v3.2.0, Spring v6.1.1
2025-09-02 00:00:53.168 [main] INFO  com.blog.BlogApplication - No active profile set, falling back to 1 default profile: "default"
2025-09-02 00:00:53.934 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-02 00:00:53.936 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-09-02 00:00:54.163 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 219 ms. Found 15 JPA repository interfaces.
2025-09-02 00:00:54.177 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-02 00:00:54.179 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-09-02 00:00:54.191 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.AnnouncementRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 00:00:54.192 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleLikeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 00:00:54.193 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 00:00:54.193 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 00:00:54.193 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CategoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 00:00:54.194 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CommentLikeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 00:00:54.194 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CommentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 00:00:54.194 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.FileInfoRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 00:00:54.194 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.LoginLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 00:00:54.195 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.NotificationRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 00:00:54.195 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.OperationLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 00:00:54.195 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.SecuritySettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 00:00:54.195 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.TagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 00:00:54.196 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.UserAnnouncementReadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 00:00:54.196 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 00:00:54.196 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 11 ms. Found 0 Redis repository interfaces.
2025-09-02 00:00:54.930 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-09-02 00:00:54.940 [main] INFO  org.apache.catalina.core.AprLifecycleListener - An older version [1.2.38] of the Apache Tomcat Native library is installed, while Tomcat recommends a minimum version of [2.0.5]
2025-09-02 00:00:54.941 [main] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [1.2.38] using APR version [1.7.4].
2025-09-02 00:00:54.944 [main] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 1.1.1v  1 Aug 2023]
2025-09-02 00:00:54.955 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-09-02 00:00:54.958 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-09-02 00:00:54.958 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.16]
2025-09-02 00:00:55.035 [main] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] - Initializing Spring embedded WebApplicationContext
2025-09-02 00:00:55.036 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1802 ms
2025-09-02 00:00:55.360 [main] DEBUG com.blog.filter.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-09-02 00:00:55.464 [main] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-09-02 00:00:55.520 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.3.1.Final
2025-09-02 00:00:55.552 [main] INFO  o.hibernate.cache.internal.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-09-02 00:00:55.740 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-09-02 00:00:55.764 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-09-02 00:00:55.896 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@2c846d55
2025-09-02 00:00:55.897 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-09-02 00:00:55.938 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-09-02 00:00:55.939 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-09-02 00:00:56.917 [main] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-09-02 00:00:57.024 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-09-02 00:00:57.309 [main] INFO  o.s.data.jpa.repository.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-09-02 00:00:59.351 [main] WARN  o.s.b.a.s.s.UserDetailsServiceAutoConfiguration - 

Using generated security password: 966fa30c-f876-46b0-83ca-53e789609469

This generated password is for development use only. Your security configuration must be updated before running your application in production.

2025-09-02 00:00:59.714 [main] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@4b047aba, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@6f4201f2, org.springframework.security.web.context.SecurityContextHolderFilter@3bcff419, org.springframework.security.web.header.HeaderWriterFilter@39db0f18, org.springframework.web.filter.CorsFilter@3b4d0434, org.springframework.security.web.authentication.logout.LogoutFilter@6b7961a1, com.blog.filter.JwtAuthenticationFilter@3caf5c96, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@54aedf42, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@442de1af, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@3fb09dfe, org.springframework.security.web.session.SessionManagementFilter@5751ecf4, org.springframework.security.web.access.ExceptionTranslationFilter@7447e4aa, org.springframework.security.web.access.intercept.AuthorizationFilter@75043bfd]
2025-09-02 00:01:00.124 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-09-02 00:01:00.143 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/api'
2025-09-02 00:01:00.149 [main] INFO  com.blog.BlogApplication - Started BlogApplication in 7.521 seconds (process running for 7.888)
2025-09-02 00:01:18.637 [http-nio-8080-exec-2] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-09-02 00:01:18.638 [http-nio-8080-exec-2] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-09-02 00:01:18.640 [http-nio-8080-exec-2] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-09-02 00:01:18.660 [http-nio-8080-exec-2] WARN  o.s.web.servlet.handler.HandlerMappingIntrospector - Cache miss for REQUEST dispatch to '/api/' (previous null). Performing MatchableHandlerMapping lookup. This is logged once only at WARN level, and every time at TRACE.
2025-09-02 00:01:22.113 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 00:01:22.113 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 00:01:22.159 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 00:01:22.164 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 00:01:22.167 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 00:01:22.171 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 00:01:22.175 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 00:01:22.177 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 00:01:22.178 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 00:01:22.181 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 00:01:22.182 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 00:01:22.185 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 00:01:22.194 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 00:01:22.200 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 00:01:22.203 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 00:01:22.206 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 00:01:22.209 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 00:01:22.211 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 00:01:22.214 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 00:01:22.217 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 00:01:22.220 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 00:01:22.222 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 00:01:22.225 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 00:01:22.226 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 00:01:22.231 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 00:01:22.233 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 00:01:22.236 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 00:01:22.882 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 00:01:22.925 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-02 00:02:14.136 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 00:02:14.136 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 00:02:14.143 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 00:02:14.143 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 00:02:14.146 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 00:02:14.147 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 00:02:14.149 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 00:02:14.153 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 00:02:14.160 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 00:02:14.167 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 00:02:14.168 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 00:02:14.171 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 00:02:14.171 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 00:02:14.173 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 00:02:14.174 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 00:02:14.176 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 00:02:14.179 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 00:02:14.179 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 00:02:14.181 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 00:02:14.185 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 00:02:14.187 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 00:02:14.190 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 00:02:14.192 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 00:02:14.195 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 00:02:14.198 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 00:02:14.200 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 00:02:14.202 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 00:02:14.298 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 00:02:14.328 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-02 00:03:25.632 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 00:03:25.632 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 00:03:25.643 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 00:03:25.647 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 00:03:25.647 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 00:03:25.651 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 00:03:25.655 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 00:03:25.658 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 00:03:25.664 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 00:03:25.665 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 00:03:25.667 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 00:03:25.667 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 00:03:25.669 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 00:03:25.669 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 00:03:25.671 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 00:03:25.672 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 00:03:25.674 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 00:03:25.674 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 00:03:25.676 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 00:03:25.679 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 00:03:25.682 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 00:03:25.686 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 00:03:25.688 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 00:03:25.690 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 00:03:25.692 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 00:03:25.695 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 00:03:25.697 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 00:03:25.733 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 00:03:25.754 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-02 00:04:52.044 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-09-02 00:04:52.094 [main] INFO  com.blog.BlogApplication - Starting BlogApplication using Java 17.0.2 with PID 58040 (D:\java\boke\backend\target\classes started by Redmi in D:\java\boke\backend)
2025-09-02 00:04:52.095 [main] DEBUG com.blog.BlogApplication - Running with Spring Boot v3.2.0, Spring v6.1.1
2025-09-02 00:04:52.096 [main] INFO  com.blog.BlogApplication - No active profile set, falling back to 1 default profile: "default"
2025-09-02 00:04:52.883 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-02 00:04:52.885 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-09-02 00:04:53.093 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 202 ms. Found 15 JPA repository interfaces.
2025-09-02 00:04:53.109 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-02 00:04:53.110 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-09-02 00:04:53.124 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.AnnouncementRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 00:04:53.124 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleLikeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 00:04:53.125 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 00:04:53.126 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 00:04:53.126 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CategoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 00:04:53.126 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CommentLikeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 00:04:53.126 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CommentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 00:04:53.126 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.FileInfoRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 00:04:53.127 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.LoginLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 00:04:53.127 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.NotificationRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 00:04:53.127 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.OperationLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 00:04:53.127 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.SecuritySettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 00:04:53.128 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.TagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 00:04:53.129 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.UserAnnouncementReadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 00:04:53.129 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 00:04:53.129 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 11 ms. Found 0 Redis repository interfaces.
2025-09-02 00:04:53.928 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-09-02 00:04:53.936 [main] INFO  org.apache.catalina.core.AprLifecycleListener - An older version [1.2.38] of the Apache Tomcat Native library is installed, while Tomcat recommends a minimum version of [2.0.5]
2025-09-02 00:04:53.937 [main] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [1.2.38] using APR version [1.7.4].
2025-09-02 00:04:53.941 [main] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 1.1.1v  1 Aug 2023]
2025-09-02 00:04:53.954 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-09-02 00:04:53.956 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-09-02 00:04:53.957 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.16]
2025-09-02 00:04:54.100 [main] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] - Initializing Spring embedded WebApplicationContext
2025-09-02 00:04:54.101 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1962 ms
2025-09-02 00:04:54.458 [main] DEBUG com.blog.filter.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-09-02 00:04:54.576 [main] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-09-02 00:04:54.635 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.3.1.Final
2025-09-02 00:04:54.669 [main] INFO  o.hibernate.cache.internal.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-09-02 00:04:54.872 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-09-02 00:04:54.901 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-09-02 00:04:55.099 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@6e6f5842
2025-09-02 00:04:55.100 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-09-02 00:04:55.135 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-09-02 00:04:55.136 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-09-02 00:04:56.305 [main] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-09-02 00:04:56.418 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-09-02 00:04:56.747 [main] INFO  o.s.data.jpa.repository.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-09-02 00:04:58.744 [main] WARN  o.s.b.a.s.s.UserDetailsServiceAutoConfiguration - 

Using generated security password: fa6ba2f4-a9fc-492f-9144-7a62acbce0ec

This generated password is for development use only. Your security configuration must be updated before running your application in production.

2025-09-02 00:04:59.121 [main] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@118cad8d, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@17ef0c6d, org.springframework.security.web.context.SecurityContextHolderFilter@19fdd8e, org.springframework.security.web.header.HeaderWriterFilter@4d2cdda2, org.springframework.web.filter.CorsFilter@11bbc6f7, org.springframework.security.web.authentication.logout.LogoutFilter@113ea6f0, com.blog.filter.JwtAuthenticationFilter@136fece2, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@2bf0d39d, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@28dd27cc, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@6ef3e83e, org.springframework.security.web.session.SessionManagementFilter@7fea956b, org.springframework.security.web.access.ExceptionTranslationFilter@448d8489, org.springframework.security.web.access.intercept.AuthorizationFilter@2dc572fd]
2025-09-02 00:04:59.520 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-09-02 00:04:59.538 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/api'
2025-09-02 00:04:59.544 [main] INFO  com.blog.BlogApplication - Started BlogApplication in 7.968 seconds (process running for 8.509)
2025-09-02 00:05:05.030 [http-nio-8080-exec-1] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-09-02 00:05:05.031 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-09-02 00:05:05.032 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-09-02 00:05:05.051 [http-nio-8080-exec-1] WARN  o.s.web.servlet.handler.HandlerMappingIntrospector - Cache miss for REQUEST dispatch to '/api/' (previous null). Performing MatchableHandlerMapping lookup. This is logged once only at WARN level, and every time at TRACE.
2025-09-02 00:05:17.590 [http-nio-8080-exec-3] ERROR com.blog.exception.GlobalExceptionHandler - 未捕获的异常: No static resource captcha.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource captcha.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-09-02 00:05:21.166 [http-nio-8080-exec-2] ERROR com.blog.exception.GlobalExceptionHandler - 未捕获的异常: No static resource captcha.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource captcha.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-09-02 00:06:44.112 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 00:06:44.112 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 00:06:44.146 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 00:06:44.151 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 00:06:44.154 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 00:06:44.157 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 00:06:44.161 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 00:06:44.164 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 00:06:44.164 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 00:06:44.167 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 00:06:44.169 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 00:06:44.172 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 00:06:44.180 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 00:06:44.187 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 00:06:44.189 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 00:06:44.192 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 00:06:44.194 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 00:06:44.196 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 00:06:44.199 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 00:06:44.201 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 00:06:44.203 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 00:06:44.205 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 00:06:44.207 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 00:06:44.209 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 00:06:44.212 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 00:06:44.213 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 00:06:44.215 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 00:06:44.678 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 00:06:44.707 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-02 00:12:48.468 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 00:12:48.468 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 00:12:48.476 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 00:12:48.477 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 00:12:48.492 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 00:12:48.496 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 00:12:48.499 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 00:12:48.513 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 00:12:48.516 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 00:12:48.517 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 00:12:48.520 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 00:12:48.521 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 00:12:48.524 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 00:12:48.526 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 00:12:48.529 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 00:12:48.530 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 00:12:48.533 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 00:12:48.536 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 00:12:48.540 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 00:12:48.543 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 00:12:48.546 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 00:12:48.548 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 00:12:48.550 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 00:12:48.551 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 00:12:48.554 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 00:12:48.556 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 00:12:48.558 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 00:12:48.610 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 00:12:48.679 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-02 00:13:44.113 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    limit
        ?
2025-09-02 00:14:44.304 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 00:14:44.308 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 00:14:44.323 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 00:14:44.328 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 00:14:44.329 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 00:14:44.330 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 00:14:44.331 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 00:14:44.334 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 00:14:44.334 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 00:14:44.337 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 00:14:44.337 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 00:14:44.341 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 00:14:44.341 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 00:14:44.344 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 00:14:44.344 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 00:14:44.346 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 00:14:44.349 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 00:14:44.351 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 00:14:44.354 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 00:14:44.356 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 00:14:44.359 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 00:14:44.363 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 00:14:44.365 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 00:14:44.367 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 00:14:44.369 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 00:14:44.372 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 00:14:44.374 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 00:14:44.437 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 00:14:44.499 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-02 00:19:04.829 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 00:19:04.831 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 00:19:04.882 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 00:19:04.900 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 00:19:04.914 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 00:19:04.919 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 00:19:04.921 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 00:19:04.922 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 00:19:04.925 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 00:19:04.927 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 00:19:04.930 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 00:19:04.934 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 00:19:04.936 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 00:19:04.938 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 00:19:04.939 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 00:19:04.941 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 00:19:04.944 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 00:19:04.946 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 00:19:04.949 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 00:19:04.955 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 00:19:04.960 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 00:19:04.963 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 00:19:04.968 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 00:19:04.970 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 00:19:04.972 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 00:19:04.974 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 00:19:04.977 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 00:19:05.011 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 00:19:05.030 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-02 00:20:12.873 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 00:20:12.874 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 00:20:12.880 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 00:20:12.888 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 00:20:12.904 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 00:20:12.923 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 00:20:12.949 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 00:20:12.950 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 00:20:12.952 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 00:20:12.952 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 00:20:12.955 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 00:20:12.955 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 00:20:12.958 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 00:20:12.958 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 00:20:12.961 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 00:20:12.961 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 00:20:12.964 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 00:20:12.966 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 00:20:12.969 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 00:20:12.972 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 00:20:12.975 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 00:20:12.978 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 00:20:12.982 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 00:20:12.984 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 00:20:12.986 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 00:20:12.991 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 00:20:12.993 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 00:20:13.209 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 00:20:13.241 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-02 00:21:28.016 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 00:21:28.017 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 00:21:28.021 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 00:21:28.021 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 00:21:28.036 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 00:21:28.040 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 00:21:28.053 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 00:21:28.054 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 00:21:28.060 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 00:21:28.060 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 00:21:28.063 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 00:21:28.064 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 00:21:28.066 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 00:21:28.066 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 00:21:28.068 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 00:21:28.069 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 00:21:28.073 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 00:21:28.076 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 00:21:28.081 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 00:21:28.083 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 00:21:28.088 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 00:21:28.090 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 00:21:28.091 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 00:21:28.093 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 00:21:28.095 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 00:21:28.097 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 00:21:28.099 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 00:21:28.135 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 00:21:28.159 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-02 00:22:00.555 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    limit
        ?
2025-09-02 00:22:26.247 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.email=? 
    limit
        ?
2025-09-02 00:25:13.096 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 00:25:13.096 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 00:25:13.101 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 00:25:13.107 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 00:25:13.113 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 00:25:13.117 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 00:25:13.123 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 00:25:13.141 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 00:25:13.148 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 00:25:13.148 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 00:25:13.151 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 00:25:13.151 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 00:25:13.153 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 00:25:13.153 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 00:25:13.155 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 00:25:13.155 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 00:25:13.157 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 00:25:13.159 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 00:25:13.160 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 00:25:13.163 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 00:25:13.165 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 00:25:13.167 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 00:25:13.168 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 00:25:13.170 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 00:25:13.173 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 00:25:13.175 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 00:25:13.177 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 00:25:13.216 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 00:25:13.239 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-02 00:25:31.263 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.email=? 
    limit
        ?
2025-09-02 00:25:36.514 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    limit
        ?
2025-09-02 00:31:46.916 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 00:31:46.916 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 00:31:46.919 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 00:31:46.919 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 00:31:46.921 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 00:31:46.922 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 00:31:46.925 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 00:31:46.925 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 00:31:46.956 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 00:31:46.963 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 00:31:46.983 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 00:31:46.987 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 00:31:46.987 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 00:31:46.991 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 00:31:46.991 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 00:31:46.994 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 00:31:46.995 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 00:31:46.997 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 00:31:47.001 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 00:31:47.002 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 00:31:47.005 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 00:31:47.006 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 00:31:47.008 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 00:31:47.009 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 00:31:47.011 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 00:31:47.013 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 00:31:47.015 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 00:31:47.093 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 00:31:47.140 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-02 08:19:18.934 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-09-02 08:19:18.994 [main] INFO  com.blog.BlogApplication - Starting BlogApplication using Java 17.0.2 with PID 18420 (D:\java\boke\backend\target\classes started by Redmi in D:\java\boke\backend)
2025-09-02 08:19:18.996 [main] DEBUG com.blog.BlogApplication - Running with Spring Boot v3.2.0, Spring v6.1.1
2025-09-02 08:19:18.996 [main] INFO  com.blog.BlogApplication - No active profile set, falling back to 1 default profile: "default"
2025-09-02 08:19:19.906 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-02 08:19:19.908 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-09-02 08:19:20.140 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 223 ms. Found 15 JPA repository interfaces.
2025-09-02 08:19:20.158 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-02 08:19:20.161 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-09-02 08:19:20.179 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.AnnouncementRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 08:19:20.180 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleLikeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 08:19:20.181 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 08:19:20.182 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 08:19:20.182 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CategoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 08:19:20.183 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CommentLikeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 08:19:20.183 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CommentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 08:19:20.183 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.FileInfoRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 08:19:20.184 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.LoginLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 08:19:20.184 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.NotificationRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 08:19:20.185 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.OperationLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 08:19:20.185 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.SecuritySettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 08:19:20.185 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.TagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 08:19:20.186 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.UserAnnouncementReadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 08:19:20.186 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 08:19:20.187 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 16 ms. Found 0 Redis repository interfaces.
2025-09-02 08:19:21.076 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-09-02 08:19:21.092 [main] INFO  org.apache.catalina.core.AprLifecycleListener - An older version [1.2.38] of the Apache Tomcat Native library is installed, while Tomcat recommends a minimum version of [2.0.5]
2025-09-02 08:19:21.092 [main] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [1.2.38] using APR version [1.7.4].
2025-09-02 08:19:21.109 [main] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 1.1.1v  1 Aug 2023]
2025-09-02 08:19:21.118 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-09-02 08:19:21.121 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-09-02 08:19:21.121 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.16]
2025-09-02 08:19:21.219 [main] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] - Initializing Spring embedded WebApplicationContext
2025-09-02 08:19:21.220 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2180 ms
2025-09-02 08:19:21.665 [main] DEBUG com.blog.filter.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-09-02 08:19:21.798 [main] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-09-02 08:19:21.870 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.3.1.Final
2025-09-02 08:19:21.913 [main] INFO  o.hibernate.cache.internal.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-09-02 08:19:22.161 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-09-02 08:19:22.190 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-09-02 08:19:22.365 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@51fa09c7
2025-09-02 08:19:22.366 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-09-02 08:19:22.432 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-09-02 08:19:22.433 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-09-02 08:19:23.577 [main] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-09-02 08:19:23.739 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-09-02 08:19:24.064 [main] INFO  o.s.data.jpa.repository.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-09-02 08:19:26.147 [main] WARN  o.s.b.a.s.s.UserDetailsServiceAutoConfiguration - 

Using generated security password: 598f696d-7393-4326-a976-7ff9a1c6a6a9

This generated password is for development use only. Your security configuration must be updated before running your application in production.

2025-09-02 08:19:26.561 [main] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@491301a2, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@6b7961a1, org.springframework.security.web.context.SecurityContextHolderFilter@69dc1291, org.springframework.security.web.header.HeaderWriterFilter@78872b95, org.springframework.web.filter.CorsFilter@442aea9a, org.springframework.security.web.authentication.logout.LogoutFilter@1aed62f, com.blog.filter.JwtAuthenticationFilter@315cf170, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@17e9379f, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@76ab49b5, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@5cde6aaf, org.springframework.security.web.session.SessionManagementFilter@7447e4aa, org.springframework.security.web.access.ExceptionTranslationFilter@481d5c41, org.springframework.security.web.access.intercept.AuthorizationFilter@432d9a3e]
2025-09-02 08:19:26.984 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-09-02 08:19:27.015 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/api'
2025-09-02 08:19:27.020 [main] INFO  com.blog.BlogApplication - Started BlogApplication in 8.678 seconds (process running for 9.121)
2025-09-02 08:20:09.803 [http-nio-8080-exec-10] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-09-02 08:20:09.814 [http-nio-8080-exec-10] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-09-02 08:20:09.867 [http-nio-8080-exec-10] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 3 ms
2025-09-02 08:20:09.896 [http-nio-8080-exec-6] WARN  o.s.web.servlet.handler.HandlerMappingIntrospector - Cache miss for REQUEST dispatch to '/api/articles/published' (previous null). Performing MatchableHandlerMapping lookup. This is logged once only at WARN level, and every time at TRACE.
2025-09-02 08:20:10.116 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 08:20:10.116 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 08:20:10.116 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 08:20:10.116 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 08:20:10.196 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 08:20:10.196 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 08:20:10.211 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:20:10.211 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:20:10.232 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 08:20:10.233 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 08:20:10.234 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:20:10.239 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:20:10.251 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:20:10.262 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 08:20:10.265 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:20:10.274 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 08:20:10.279 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:20:10.285 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:20:10.292 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 08:20:10.298 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:20:10.298 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:20:10.307 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:20:10.308 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 08:20:10.319 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 08:20:10.330 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:20:10.331 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 08:20:10.338 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:20:10.323 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:20:10.344 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:20:10.354 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:20:10.361 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:20:10.371 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:20:10.382 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:20:10.382 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:20:10.385 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:20:10.385 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:20:10.390 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:20:10.393 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:20:10.393 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:20:10.396 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:20:10.396 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:20:10.399 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:20:10.399 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:20:10.403 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:20:10.404 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:20:10.407 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:20:10.409 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:20:10.409 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:20:10.413 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:20:10.413 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:20:10.419 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:20:10.423 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:20:10.426 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:20:10.430 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:20:11.901 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 08:20:11.901 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 08:20:11.972 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-02 08:20:11.973 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-02 08:20:27.905 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-09-02 08:20:27.915 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-09-02 08:20:28.021 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-09-02 08:20:28.191 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    update
        users 
    set
        article_count=?,
        avatar=?,
        bio=?,
        deleted=?,
        email=?,
        email_verified=?,
        follower_count=?,
        following_count=?,
        github=?,
        last_login_ip=?,
        last_login_time=?,
        nickname=?,
        password=?,
        role=?,
        status=?,
        updated_at=?,
        username=?,
        website=? 
    where
        id=?
2025-09-02 08:20:28.241 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-09-02 08:20:28.339 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    insert 
    into
        login_logs
        (created_at, device_info, ip_address, is_current_session, location, login_status, login_time, logout_time, session_id, updated_at, user_agent, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 08:20:28.368 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:20:28.373 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    update
        users 
    set
        article_count=?,
        avatar=?,
        bio=?,
        deleted=?,
        email=?,
        email_verified=?,
        follower_count=?,
        following_count=?,
        github=?,
        last_login_ip=?,
        last_login_time=?,
        nickname=?,
        password=?,
        role=?,
        status=?,
        updated_at=?,
        username=?,
        website=? 
    where
        id=?
2025-09-02 08:20:28.389 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 08:20:28.670 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 08:20:28.677 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:20:28.685 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 08:20:30.151 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 08:20:30.176 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.content,
        a1_0.created_at,
        a1_0.deleted,
        a1_0.enabled,
        a1_0.end_time,
        a1_0.pinned,
        a1_0.priority,
        a1_0.publisher_id,
        a1_0.start_time,
        a1_0.title,
        a1_0.type,
        a1_0.updated_at 
    from
        personal_blog_announcement a1_0 
    where
        a1_0.deleted=0 
        and a1_0.enabled=1 
        and (
            a1_0.start_time is null 
            or a1_0.start_time<=?
        ) 
        and (
            a1_0.end_time is null 
            or a1_0.end_time>=?
        ) 
        and a1_0.id not in (select
            uar1_0.announcement_id 
        from
            personal_blog_user_announcement_read uar1_0 
        where
            uar1_0.user_id=?) 
    order by
        a1_0.pinned desc,
        a1_0.priority desc,
        a1_0.created_at desc
2025-09-02 08:20:45.540 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 08:20:45.547 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:20:45.552 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 08:20:46.412 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 08:20:46.413 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 08:20:46.418 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 08:20:46.419 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 08:20:46.421 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:20:46.424 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:20:46.424 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:20:46.426 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:20:46.427 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:20:46.430 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:20:46.430 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 08:20:46.433 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:20:46.433 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:20:46.435 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:20:46.438 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:20:46.438 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 08:20:46.442 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:20:46.445 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 08:20:46.447 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:20:46.451 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:20:46.454 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:20:46.463 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:20:46.467 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:20:46.471 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:20:46.475 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:20:46.479 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:20:46.482 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:20:46.586 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 08:20:46.962 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-02 08:20:47.135 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 08:20:47.136 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 08:20:47.140 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 08:20:47.140 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 08:20:47.142 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:20:47.143 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:20:47.144 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:20:47.145 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:20:47.146 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:20:47.148 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 08:20:47.148 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:20:47.151 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:20:47.151 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:20:47.155 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:20:47.155 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 08:20:47.157 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:20:47.160 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:20:47.161 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 08:20:47.165 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:20:47.169 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:20:47.174 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:20:47.176 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:20:47.179 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:20:47.181 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:20:47.184 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:20:47.187 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:20:47.190 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:20:47.328 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 08:20:47.381 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 08:20:47.388 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.content,
        a1_0.created_at,
        a1_0.deleted,
        a1_0.enabled,
        a1_0.end_time,
        a1_0.pinned,
        a1_0.priority,
        a1_0.publisher_id,
        a1_0.start_time,
        a1_0.title,
        a1_0.type,
        a1_0.updated_at 
    from
        personal_blog_announcement a1_0 
    where
        a1_0.deleted=0 
        and a1_0.enabled=1 
        and (
            a1_0.start_time is null 
            or a1_0.start_time<=?
        ) 
        and (
            a1_0.end_time is null 
            or a1_0.end_time>=?
        ) 
        and a1_0.id not in (select
            uar1_0.announcement_id 
        from
            personal_blog_user_announcement_read uar1_0 
        where
            uar1_0.user_id=?) 
    order by
        a1_0.pinned desc,
        a1_0.priority desc,
        a1_0.created_at desc
2025-09-02 08:20:47.413 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-02 08:20:48.536 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-02 08:20:48.546 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 08:20:48.553 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 08:20:48.560 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:20:48.564 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:20:48.566 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:20:48.569 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:20:48.571 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:20:48.574 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:20:48.576 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:20:48.579 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:20:48.582 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:20:48.584 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:20:48.586 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:20:48.589 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:20:48.591 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:20:48.593 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:20:48.595 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:20:48.598 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:20:48.600 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:20:48.602 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:20:48.605 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:20:48.608 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:20:48.610 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:20:48.613 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:20:48.615 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:20:48.617 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:20:48.619 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:20:48.620 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:20:48.622 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:20:48.624 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:20:48.626 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:20:48.627 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:20:48.629 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:20:48.630 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:20:48.632 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:20:48.633 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:20:48.634 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:21:07.133 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 08:21:07.138 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 08:21:07.139 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:21:07.141 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:21:07.144 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:21:07.146 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:21:07.148 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:21:07.150 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:21:07.152 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:21:07.154 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:21:07.156 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:21:07.158 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:21:07.161 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:21:07.164 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:21:07.166 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:21:07.168 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:21:07.170 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:21:07.172 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:21:07.174 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:21:07.176 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:21:07.179 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:21:07.182 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:21:07.185 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:21:07.188 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:21:07.191 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:21:07.193 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:21:07.195 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:21:07.198 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:21:07.200 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:21:10.551 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 08:21:10.557 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 08:21:10.559 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:21:10.561 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:21:10.565 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:21:10.568 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:21:10.570 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:21:10.572 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:21:10.574 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:21:10.577 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:21:10.579 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:21:10.581 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:21:10.582 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:21:10.584 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:21:10.586 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:21:10.589 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:21:10.591 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:21:10.593 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:21:10.595 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:21:11.658 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 08:21:11.662 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:21:11.667 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:21:11.672 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:21:11.678 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:21:11.682 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:21:11.687 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:21:15.569 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.slug=?
2025-09-02 08:21:15.581 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:21:15.597 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.category_id=? 
        and a1_0.status='PUBLISHED' 
    limit
        ?, ?
2025-09-02 08:21:15.604 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:21:15.607 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:21:15.609 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:21:15.612 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:21:15.614 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:21:15.616 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:21:15.618 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:21:15.620 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:21:15.622 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:21:15.624 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:21:15.626 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:21:15.628 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:21:15.629 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:21:15.631 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:21:15.633 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:21:15.634 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:21:19.228 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.slug=?
2025-09-02 08:21:19.232 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:21:19.235 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.category_id=? 
        and a1_0.status='PUBLISHED' 
    limit
        ?, ?
2025-09-02 08:21:19.237 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:21:19.240 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:21:19.242 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:21:19.244 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:21:19.246 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:21:19.248 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:21:19.251 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:21:19.253 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:25:46.235 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 08:25:46.240 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 08:25:46.243 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:25:46.246 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:25:46.248 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:25:46.250 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:25:46.252 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:25:46.254 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:25:46.256 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:25:46.257 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:25:46.259 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:25:46.261 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:25:46.263 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:25:46.265 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:25:46.267 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:25:46.268 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:25:46.270 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:25:46.272 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:25:46.274 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:25:46.276 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:25:46.278 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:25:46.280 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:25:46.282 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:25:46.283 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:25:46.285 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:25:46.286 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:25:46.288 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:25:46.289 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:25:46.292 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:29:09.332 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-09-02 08:29:09.401 [main] INFO  com.blog.BlogApplication - Starting BlogApplication using Java 17.0.2 with PID 24540 (D:\java\boke\backend\target\classes started by Redmi in D:\java\boke\backend)
2025-09-02 08:29:09.402 [main] DEBUG com.blog.BlogApplication - Running with Spring Boot v3.2.0, Spring v6.1.1
2025-09-02 08:29:09.403 [main] INFO  com.blog.BlogApplication - No active profile set, falling back to 1 default profile: "default"
2025-09-02 08:29:10.361 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-02 08:29:10.362 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-09-02 08:29:10.619 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 248 ms. Found 15 JPA repository interfaces.
2025-09-02 08:29:10.639 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-02 08:29:10.640 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-09-02 08:29:10.659 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.AnnouncementRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 08:29:10.660 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleLikeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 08:29:10.661 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 08:29:10.662 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 08:29:10.663 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CategoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 08:29:10.663 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CommentLikeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 08:29:10.663 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CommentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 08:29:10.664 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.FileInfoRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 08:29:10.664 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.LoginLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 08:29:10.664 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.NotificationRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 08:29:10.665 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.OperationLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 08:29:10.665 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.SecuritySettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 08:29:10.666 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.TagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 08:29:10.667 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.UserAnnouncementReadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 08:29:10.668 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 08:29:10.668 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 16 ms. Found 0 Redis repository interfaces.
2025-09-02 08:29:11.691 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-09-02 08:29:11.700 [main] INFO  org.apache.catalina.core.AprLifecycleListener - An older version [1.2.38] of the Apache Tomcat Native library is installed, while Tomcat recommends a minimum version of [2.0.5]
2025-09-02 08:29:11.701 [main] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [1.2.38] using APR version [1.7.4].
2025-09-02 08:29:11.714 [main] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 1.1.1v  1 Aug 2023]
2025-09-02 08:29:11.744 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-09-02 08:29:11.751 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-09-02 08:29:11.752 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.16]
2025-09-02 08:29:11.880 [main] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] - Initializing Spring embedded WebApplicationContext
2025-09-02 08:29:11.881 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2431 ms
2025-09-02 08:29:12.364 [main] DEBUG com.blog.filter.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-09-02 08:29:12.503 [main] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-09-02 08:29:12.581 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.3.1.Final
2025-09-02 08:29:12.627 [main] INFO  o.hibernate.cache.internal.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-09-02 08:29:12.892 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-09-02 08:29:12.922 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-09-02 08:29:13.084 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@64a8d575
2025-09-02 08:29:13.086 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-09-02 08:29:13.140 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-09-02 08:29:13.141 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-09-02 08:29:14.449 [main] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-09-02 08:29:14.596 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-09-02 08:29:14.964 [main] INFO  o.s.data.jpa.repository.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-09-02 08:29:17.371 [main] WARN  o.s.b.a.s.s.UserDetailsServiceAutoConfiguration - 

Using generated security password: 124cf3ab-1ed5-4f3f-a893-fb08d4e224b8

This generated password is for development use only. Your security configuration must be updated before running your application in production.

2025-09-02 08:29:17.791 [main] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@186b58aa, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@696ac3dd, org.springframework.security.web.context.SecurityContextHolderFilter@794e1391, org.springframework.security.web.header.HeaderWriterFilter@6f869c9e, org.springframework.web.filter.CorsFilter@4c466dfe, org.springframework.security.web.authentication.logout.LogoutFilter@4060c7fe, com.blog.filter.JwtAuthenticationFilter@7e1a9173, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@7d3304f0, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@4f48e01f, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@4704680c, org.springframework.security.web.session.SessionManagementFilter@5694be4c, org.springframework.security.web.access.ExceptionTranslationFilter@442de1af, org.springframework.security.web.access.intercept.AuthorizationFilter@65d80a24]
2025-09-02 08:29:18.211 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-09-02 08:29:18.231 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/api'
2025-09-02 08:29:18.238 [main] INFO  com.blog.BlogApplication - Started BlogApplication in 9.491 seconds (process running for 10.092)
2025-09-02 08:29:43.072 [http-nio-8080-exec-2] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-09-02 08:29:43.073 [http-nio-8080-exec-2] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-09-02 08:29:43.074 [http-nio-8080-exec-2] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-09-02 08:29:43.092 [http-nio-8080-exec-2] WARN  o.s.web.servlet.handler.HandlerMappingIntrospector - Cache miss for REQUEST dispatch to '/api/articles/published' (previous null). Performing MatchableHandlerMapping lookup. This is logged once only at WARN level, and every time at TRACE.
2025-09-02 08:29:43.236 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 08:29:43.236 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 08:29:43.285 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 08:29:43.290 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:29:43.293 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:29:43.296 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 08:29:43.300 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:29:43.303 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 08:29:43.306 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 08:29:43.308 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 08:29:43.310 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:29:43.314 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:29:43.323 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:29:43.329 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:29:43.332 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:29:43.335 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:29:43.338 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:29:43.341 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:29:43.343 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:29:43.346 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:29:43.349 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:29:43.352 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:29:43.355 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:29:43.358 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:29:43.363 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:29:43.367 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:29:43.370 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:29:43.933 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 08:29:43.977 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-02 08:29:49.854 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 08:29:49.854 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 08:29:49.859 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 08:29:49.861 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 08:29:49.869 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:29:49.869 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:29:49.873 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:29:49.876 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:29:49.877 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:29:49.882 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:29:49.883 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 08:29:49.885 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:29:49.887 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:29:49.890 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:29:49.890 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:29:49.893 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:29:49.893 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 08:29:49.897 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:29:49.897 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 08:29:49.903 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:29:49.906 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:29:49.908 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:29:49.910 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:29:49.912 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:29:49.914 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:29:49.916 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:29:49.919 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:29:49.995 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 08:29:50.017 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-02 08:29:52.533 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 08:29:52.541 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 08:29:52.543 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:29:52.546 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:29:52.549 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:29:52.552 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:29:52.555 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:29:52.559 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:29:52.562 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:29:52.564 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:29:52.568 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:29:52.571 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:29:52.574 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:29:52.577 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:29:52.579 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:29:52.581 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:29:52.583 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:29:52.584 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:29:52.586 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:29:52.587 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:29:52.588 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:29:52.590 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:29:52.592 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:29:52.593 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:29:52.595 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:29:52.598 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:29:52.599 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:29:52.601 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:29:52.603 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:32:23.053 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 08:32:23.063 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:32:23.119 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 08:32:23.591 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 08:32:23.603 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 08:32:23.611 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 08:32:23.614 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:32:23.617 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:32:23.620 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:32:23.623 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:32:23.625 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:32:23.628 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:32:23.631 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:32:23.634 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:32:23.635 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:32:23.638 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:32:23.640 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:32:23.642 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:32:23.645 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:32:23.647 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:32:23.649 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:32:23.651 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:32:23.653 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:32:23.657 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:32:23.660 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:32:23.662 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:32:23.664 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:32:23.666 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:32:23.670 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:32:23.672 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:32:23.676 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:32:23.678 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:32:23.682 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:32:24.440 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 08:32:24.461 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.content,
        a1_0.created_at,
        a1_0.deleted,
        a1_0.enabled,
        a1_0.end_time,
        a1_0.pinned,
        a1_0.priority,
        a1_0.publisher_id,
        a1_0.start_time,
        a1_0.title,
        a1_0.type,
        a1_0.updated_at 
    from
        personal_blog_announcement a1_0 
    where
        a1_0.deleted=0 
        and a1_0.enabled=1 
        and (
            a1_0.start_time is null 
            or a1_0.start_time<=?
        ) 
        and (
            a1_0.end_time is null 
            or a1_0.end_time>=?
        ) 
        and a1_0.id not in (select
            uar1_0.announcement_id 
        from
            personal_blog_user_announcement_read uar1_0 
        where
            uar1_0.user_id=?) 
    order by
        a1_0.pinned desc,
        a1_0.priority desc,
        a1_0.created_at desc
2025-09-02 08:32:49.096 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 08:32:49.096 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 08:32:49.102 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 08:32:49.107 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:32:49.110 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:32:49.113 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:32:49.117 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:32:49.122 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:32:49.124 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:32:49.126 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:32:49.128 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:32:49.130 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:32:49.133 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:32:49.135 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:32:49.137 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:32:49.138 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:32:49.140 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:32:49.141 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:32:49.142 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:32:49.144 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:32:49.146 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:32:49.148 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:32:49.150 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:32:49.151 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:32:49.153 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:32:49.155 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:32:49.157 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:32:49.158 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:32:49.159 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:32:49.161 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:33:20.281 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 08:33:20.284 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 08:33:20.287 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 08:33:20.290 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 08:33:20.294 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:33:20.297 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:33:20.300 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:33:20.301 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:33:20.304 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 08:33:20.305 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:33:20.310 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:33:20.310 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:33:20.316 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:33:20.328 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:33:20.330 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 08:33:20.345 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:33:20.357 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:33:20.361 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 08:33:20.364 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:33:20.371 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:33:20.383 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:33:20.386 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:33:20.394 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:33:20.397 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:33:20.400 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:33:20.405 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:33:20.411 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:33:20.486 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-02 08:33:34.397 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 08:33:34.431 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:33:34.455 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 08:33:35.911 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 08:33:35.919 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 08:33:35.940 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 08:33:35.943 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:33:35.950 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:33:35.960 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:33:35.964 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:33:35.968 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:33:35.971 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:33:35.976 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:33:35.988 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:33:35.999 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:33:36.007 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:33:36.011 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:33:36.014 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:33:36.019 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:33:36.023 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:33:36.027 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:33:36.031 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:33:36.035 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:33:36.043 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:33:36.047 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:33:36.050 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:33:36.065 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:33:36.074 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:33:36.077 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:33:36.081 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:33:36.085 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:33:36.087 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:33:36.090 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:33:36.191 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 08:33:36.195 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 08:33:36.276 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 08:33:36.286 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:33:36.289 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:33:36.294 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:33:36.298 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:33:36.300 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:33:36.303 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:33:36.307 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:33:36.313 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:33:36.322 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:33:36.328 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:33:36.331 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:33:36.334 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:33:36.336 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:33:36.341 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:33:36.343 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:33:36.346 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:33:36.348 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:33:36.351 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:33:36.354 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:33:36.356 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:33:36.359 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:33:36.361 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:33:36.364 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:33:36.366 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:33:36.368 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:33:36.371 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:33:36.374 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:33:36.721 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 08:33:36.738 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.content,
        a1_0.created_at,
        a1_0.deleted,
        a1_0.enabled,
        a1_0.end_time,
        a1_0.pinned,
        a1_0.priority,
        a1_0.publisher_id,
        a1_0.start_time,
        a1_0.title,
        a1_0.type,
        a1_0.updated_at 
    from
        personal_blog_announcement a1_0 
    where
        a1_0.deleted=0 
        and a1_0.enabled=1 
        and (
            a1_0.start_time is null 
            or a1_0.start_time<=?
        ) 
        and (
            a1_0.end_time is null 
            or a1_0.end_time>=?
        ) 
        and a1_0.id not in (select
            uar1_0.announcement_id 
        from
            personal_blog_user_announcement_read uar1_0 
        where
            uar1_0.user_id=?) 
    order by
        a1_0.pinned desc,
        a1_0.priority desc,
        a1_0.created_at desc
2025-09-02 08:35:25.330 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 08:35:25.331 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 08:35:25.341 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 08:35:25.390 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:35:25.400 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:35:25.403 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:35:25.407 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:35:25.413 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:35:25.420 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:35:25.427 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:35:25.435 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:35:25.439 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:35:25.440 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:35:25.444 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:35:25.449 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:35:25.453 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:35:25.457 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:35:25.463 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:35:25.466 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:35:25.471 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:35:25.482 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:35:25.491 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:35:25.505 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:35:25.518 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:35:25.537 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:35:25.550 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:35:25.553 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:35:25.556 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:35:25.560 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:35:25.570 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:39:39.782 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 08:39:39.794 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:39:39.809 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 08:39:41.770 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 08:39:41.778 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.content,
        a1_0.created_at,
        a1_0.deleted,
        a1_0.enabled,
        a1_0.end_time,
        a1_0.pinned,
        a1_0.priority,
        a1_0.publisher_id,
        a1_0.start_time,
        a1_0.title,
        a1_0.type,
        a1_0.updated_at 
    from
        personal_blog_announcement a1_0 
    where
        a1_0.deleted=0 
        and a1_0.enabled=1 
        and (
            a1_0.start_time is null 
            or a1_0.start_time<=?
        ) 
        and (
            a1_0.end_time is null 
            or a1_0.end_time>=?
        ) 
        and a1_0.id not in (select
            uar1_0.announcement_id 
        from
            personal_blog_user_announcement_read uar1_0 
        where
            uar1_0.user_id=?) 
    order by
        a1_0.pinned desc,
        a1_0.priority desc,
        a1_0.created_at desc
2025-09-02 08:39:43.007 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 08:39:43.014 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 08:39:43.025 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 08:39:43.033 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:39:43.042 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:39:43.048 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:39:43.056 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:39:43.063 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:39:43.066 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:39:43.073 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:39:43.076 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:39:43.080 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:39:43.082 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:39:43.088 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:39:43.092 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:39:43.096 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:39:43.099 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:39:43.104 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:39:43.106 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:39:43.110 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:39:43.114 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:39:43.123 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:39:43.126 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:39:43.132 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:39:43.135 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:39:43.139 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:39:43.141 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:39:43.143 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:39:43.146 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:39:43.149 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:39:46.862 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-02 08:39:46.870 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 08:39:46.883 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 08:39:46.891 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:39:46.894 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:39:46.897 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:39:46.901 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:39:46.904 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:39:46.906 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:39:46.909 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:39:46.911 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:39:46.913 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:39:46.917 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:39:46.919 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:39:46.924 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:39:46.925 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:39:46.942 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:39:46.959 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:39:46.971 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:39:47.072 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:39:47.088 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:39:47.113 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:39:47.182 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:39:47.202 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:39:47.209 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:39:47.215 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:39:47.221 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:39:47.231 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:39:47.259 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:39:47.270 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:39:47.281 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:39:47.296 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:39:47.307 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:39:47.319 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:39:47.327 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:39:47.335 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:39:47.340 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:39:47.343 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:39:52.758 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 08:39:52.769 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 08:39:52.782 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 08:39:52.784 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:39:52.799 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 08:39:52.813 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:39:52.826 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:39:52.847 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:39:52.876 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 08:39:52.911 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:39:52.913 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:39:52.928 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:39:52.929 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 08:39:52.934 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:39:52.942 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 08:39:52.952 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:39:52.960 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:39:52.971 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:39:52.982 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:39:52.988 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:39:52.997 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:39:53.003 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:39:53.009 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:39:53.015 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:39:53.021 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:39:53.042 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:39:53.067 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:39:53.510 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-02 08:41:11.949 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-09-02 08:41:11.959 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-09-02 08:41:12.089 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-09-02 08:41:12.211 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    update
        users 
    set
        article_count=?,
        avatar=?,
        bio=?,
        deleted=?,
        email=?,
        email_verified=?,
        follower_count=?,
        following_count=?,
        github=?,
        last_login_ip=?,
        last_login_time=?,
        nickname=?,
        password=?,
        role=?,
        status=?,
        updated_at=?,
        username=?,
        website=? 
    where
        id=?
2025-09-02 08:41:12.228 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-09-02 08:41:12.325 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    insert 
    into
        login_logs
        (created_at, device_info, ip_address, is_current_session, location, login_status, login_time, logout_time, session_id, updated_at, user_agent, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 08:41:12.337 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:41:12.342 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    update
        users 
    set
        article_count=?,
        avatar=?,
        bio=?,
        deleted=?,
        email=?,
        email_verified=?,
        follower_count=?,
        following_count=?,
        github=?,
        last_login_ip=?,
        last_login_time=?,
        nickname=?,
        password=?,
        role=?,
        status=?,
        updated_at=?,
        username=?,
        website=? 
    where
        id=?
2025-09-02 08:41:12.350 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 08:41:27.538 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-09-02 08:41:27.543 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-09-02 08:41:27.674 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-09-02 08:41:27.686 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    update
        users 
    set
        article_count=?,
        avatar=?,
        bio=?,
        deleted=?,
        email=?,
        email_verified=?,
        follower_count=?,
        following_count=?,
        github=?,
        last_login_ip=?,
        last_login_time=?,
        nickname=?,
        password=?,
        role=?,
        status=?,
        updated_at=?,
        username=?,
        website=? 
    where
        id=?
2025-09-02 08:41:27.695 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-09-02 08:41:27.703 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    insert 
    into
        login_logs
        (created_at, device_info, ip_address, is_current_session, location, login_status, login_time, logout_time, session_id, updated_at, user_agent, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 08:41:27.709 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:41:27.717 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    update
        users 
    set
        article_count=?,
        avatar=?,
        bio=?,
        deleted=?,
        email=?,
        email_verified=?,
        follower_count=?,
        following_count=?,
        github=?,
        last_login_ip=?,
        last_login_time=?,
        nickname=?,
        password=?,
        role=?,
        status=?,
        updated_at=?,
        username=?,
        website=? 
    where
        id=?
2025-09-02 08:41:27.724 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 08:41:54.102 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 08:41:54.107 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:41:54.111 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 08:41:55.805 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 08:41:55.807 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 08:41:55.809 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 08:41:55.809 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 08:41:55.811 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:41:55.811 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:41:55.814 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:41:55.814 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:41:55.816 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:41:55.816 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 08:41:55.817 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:41:55.818 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:41:55.819 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:41:55.820 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 08:41:55.820 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:41:55.822 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:41:55.822 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 08:41:55.823 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:41:55.825 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:41:55.826 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:41:55.827 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:41:55.829 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:41:55.831 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:41:55.832 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:41:55.833 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:41:55.835 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:41:55.837 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:41:55.927 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 08:41:56.267 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-02 08:41:57.051 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 08:41:57.057 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.content,
        a1_0.created_at,
        a1_0.deleted,
        a1_0.enabled,
        a1_0.end_time,
        a1_0.pinned,
        a1_0.priority,
        a1_0.publisher_id,
        a1_0.start_time,
        a1_0.title,
        a1_0.type,
        a1_0.updated_at 
    from
        personal_blog_announcement a1_0 
    where
        a1_0.deleted=0 
        and a1_0.enabled=1 
        and (
            a1_0.start_time is null 
            or a1_0.start_time<=?
        ) 
        and (
            a1_0.end_time is null 
            or a1_0.end_time>=?
        ) 
        and a1_0.id not in (select
            uar1_0.announcement_id 
        from
            personal_blog_user_announcement_read uar1_0 
        where
            uar1_0.user_id=?) 
    order by
        a1_0.pinned desc,
        a1_0.priority desc,
        a1_0.created_at desc
2025-09-02 08:43:16.655 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 08:43:16.660 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:43:16.678 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    insert 
    into
        comment
        (article_id, content, created_at, deleted, ip_address, like_count, parent_id, reply_count, reply_to_id, status, updated_at, user_id, user_agent) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 08:43:16.690 [http-nio-8080-exec-9] WARN  org.hibernate.engine.jdbc.spi.SqlExceptionHelper - SQL Error: 1048, SQLState: 23000
2025-09-02 08:43:16.690 [http-nio-8080-exec-9] ERROR org.hibernate.engine.jdbc.spi.SqlExceptionHelper - Column 'article_id' cannot be null
2025-09-02 08:43:16.714 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 08:52:26.971 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-02 08:52:26.972 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 08:52:26.977 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 08:52:26.981 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 08:52:26.984 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:52:26.986 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:52:26.988 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:52:26.994 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:52:26.996 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:52:26.998 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:52:27.000 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:52:27.002 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:52:27.004 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:52:27.006 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:52:27.008 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:52:27.010 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:52:27.012 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:52:27.014 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:52:27.022 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:52:27.031 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:52:27.036 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:52:27.040 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:52:27.043 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:52:27.046 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:52:27.048 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:52:27.051 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:52:27.053 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:52:27.056 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 08:52:27.058 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 08:52:27.060 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:52:27.063 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:52:27.067 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:52:27.069 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:52:27.073 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:52:27.077 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:52:27.079 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:52:27.081 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:52:27.083 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:52:27.085 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 08:52:51.575 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 08:52:51.579 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:52:51.581 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    insert 
    into
        comment
        (article_id, content, created_at, deleted, ip_address, like_count, parent_id, reply_count, reply_to_id, status, updated_at, user_id, user_agent) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 08:52:51.589 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 08:52:51.836 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 08:52:51.838 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:52:51.841 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 08:52:51.842 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:52:51.844 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 08:52:51.846 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 08:52:51.848 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:00:16.556 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-09-02 09:00:16.564 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-09-02 09:00:16.708 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-09-02 09:00:16.715 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    update
        users 
    set
        article_count=?,
        avatar=?,
        bio=?,
        deleted=?,
        email=?,
        email_verified=?,
        follower_count=?,
        following_count=?,
        github=?,
        last_login_ip=?,
        last_login_time=?,
        nickname=?,
        password=?,
        role=?,
        status=?,
        updated_at=?,
        username=?,
        website=? 
    where
        id=?
2025-09-02 09:00:16.729 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-09-02 09:00:16.739 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    insert 
    into
        login_logs
        (created_at, device_info, ip_address, is_current_session, location, login_status, login_time, logout_time, session_id, updated_at, user_agent, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 09:00:16.746 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:00:16.754 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    update
        users 
    set
        article_count=?,
        avatar=?,
        bio=?,
        deleted=?,
        email=?,
        email_verified=?,
        follower_count=?,
        following_count=?,
        github=?,
        last_login_ip=?,
        last_login_time=?,
        nickname=?,
        password=?,
        role=?,
        status=?,
        updated_at=?,
        username=?,
        website=? 
    where
        id=?
2025-09-02 09:00:16.764 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 09:00:16.849 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:00:16.854 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:00:16.860 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 09:00:17.766 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 09:00:17.771 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:00:17.774 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 09:00:17.778 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:00:17.785 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:00:17.791 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:00:17.792 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 09:00:17.801 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:00:17.803 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:00:17.808 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:00:17.810 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:00:17.815 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:00:17.822 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:00:17.827 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:00:17.831 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:00:17.833 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:00:17.838 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:00:17.841 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:00:17.845 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:00:17.851 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:00:17.856 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:00:17.858 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:00:17.864 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:00:17.869 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:00:17.875 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:00:17.880 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:00:17.969 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 09:00:18.271 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-02 09:00:18.336 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:00:18.345 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.content,
        a1_0.created_at,
        a1_0.deleted,
        a1_0.enabled,
        a1_0.end_time,
        a1_0.pinned,
        a1_0.priority,
        a1_0.publisher_id,
        a1_0.start_time,
        a1_0.title,
        a1_0.type,
        a1_0.updated_at 
    from
        personal_blog_announcement a1_0 
    where
        a1_0.deleted=0 
        and a1_0.enabled=1 
        and (
            a1_0.start_time is null 
            or a1_0.start_time<=?
        ) 
        and (
            a1_0.end_time is null 
            or a1_0.end_time>=?
        ) 
        and a1_0.id not in (select
            uar1_0.announcement_id 
        from
            personal_blog_user_announcement_read uar1_0 
        where
            uar1_0.user_id=?) 
    order by
        a1_0.pinned desc,
        a1_0.priority desc,
        a1_0.created_at desc
2025-09-02 09:00:27.423 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 09:00:27.424 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        date(c1_0.created_at),
        count(c1_0.id) 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
        and c1_0.created_at>=? 
    group by
        date(c1_0.created_at) 
    order by
        date(c1_0.created_at)
2025-09-02 09:00:27.434 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        count(u1_0.id) 
    from
        users u1_0
2025-09-02 09:00:27.446 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        count(c1_0.id) 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED'
2025-09-02 09:00:27.471 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        coalesce(sum(a1_0.view_count), 0) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 09:00:27.529 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    SELECT
        DATE(published_at) as date,
        COALESCE(SUM(view_count), 0) as totalViews 
    FROM
        article 
    WHERE
        status = 'PUBLISHED' 
        AND published_at >= ? 
    GROUP BY
        DATE(published_at) 
    ORDER BY
        DATE(published_at)
2025-09-02 09:00:27.530 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    SELECT
        DATE(published_at) as date,
        COUNT(*) as count 
    FROM
        article 
    WHERE
        status = 'PUBLISHED' 
        AND published_at >= ? 
    GROUP BY
        DATE(published_at) 
    ORDER BY
        DATE(published_at)
2025-09-02 09:00:27.531 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    SELECT
        c.name as categoryName,
        COUNT(*) as count 
    FROM
        article a 
    JOIN
        category c 
            ON a.category_id = c.id 
    WHERE
        a.status = 'PUBLISHED' 
    GROUP BY
        c.id,
        c.name 
    ORDER BY
        COUNT(*) DESC
2025-09-02 09:00:27.609 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    SELECT
        HOUR(published_at) as hour,
        COUNT(*) as visits,
        COUNT(DISTINCT author_id) as uniqueVisits 
    FROM
        article 
    WHERE
        status = 'PUBLISHED' 
        AND published_at >= ? 
    GROUP BY
        HOUR(published_at) 
    ORDER BY
        HOUR(published_at)
2025-09-02 09:00:27.824 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:00:27.829 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:00:27.845 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        count(n1_0.id) 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
        and not(n1_0.is_read)
2025-09-02 09:00:27.854 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.is_read,
        n1_0.related_id,
        n1_0.related_type,
        n1_0.title,
        n1_0.type,
        n1_0.updated_at,
        n1_0.user_id 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
    order by
        n1_0.created_at desc 
    limit
        ?, ?
2025-09-02 09:00:27.914 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.like_count desc 
    limit
        ?, ?
2025-09-02 09:00:27.920 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 09:00:27.925 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:00:27.929 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:00:27.931 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:00:27.933 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:00:27.938 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:00:27.940 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:00:27.945 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:00:27.947 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:00:27.950 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:00:27.955 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:00:27.959 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:00:27.963 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:00:28.329 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 09:00:28.332 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:00:28.335 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:00:28.342 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:00:28.344 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:00:28.347 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:00:28.350 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:00:28.355 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:00:28.594 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 09:00:28.600 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:00:28.613 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:00:28.621 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:00:57.115 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:00:57.185 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:00:57.199 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 09:00:59.891 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 09:00:59.902 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-02 09:00:59.931 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 09:01:00.036 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 09:01:00.056 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:01:00.062 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:01:00.075 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:01:00.092 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:01:00.111 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:01:00.117 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 09:01:00.120 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    SELECT
        DATE(published_at) as date,
        COALESCE(SUM(view_count), 0) as totalViews 
    FROM
        article 
    WHERE
        status = 'PUBLISHED' 
        AND published_at >= ? 
    GROUP BY
        DATE(published_at) 
    ORDER BY
        DATE(published_at)
2025-09-02 09:01:00.124 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    SELECT
        DATE(published_at) as date,
        COUNT(*) as count 
    FROM
        article 
    WHERE
        status = 'PUBLISHED' 
        AND published_at >= ? 
    GROUP BY
        DATE(published_at) 
    ORDER BY
        DATE(published_at)
2025-09-02 09:01:00.125 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:01:00.128 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    SELECT
        c.name as categoryName,
        COUNT(*) as count 
    FROM
        article a 
    JOIN
        category c 
            ON a.category_id = c.id 
    WHERE
        a.status = 'PUBLISHED' 
    GROUP BY
        c.id,
        c.name 
    ORDER BY
        COUNT(*) DESC
2025-09-02 09:01:00.133 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(u1_0.id) 
    from
        users u1_0
2025-09-02 09:01:00.136 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        date(c1_0.created_at),
        count(c1_0.id) 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
        and c1_0.created_at>=? 
    group by
        date(c1_0.created_at) 
    order by
        date(c1_0.created_at)
2025-09-02 09:01:00.136 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:01:00.150 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(c1_0.id) 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED'
2025-09-02 09:01:00.153 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:01:00.160 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:01:00.160 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        coalesce(sum(a1_0.view_count), 0) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 09:01:00.165 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:01:00.167 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:01:00.170 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:01:00.174 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:01:00.176 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:01:00.179 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:01:00.182 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:01:00.184 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:01:00.187 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:01:00.190 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:01:00.191 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:01:00.194 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:01:00.197 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:01:00.200 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:01:00.204 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:01:00.206 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:01:00.209 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:01:00.211 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:01:00.214 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:01:00.217 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:01:00.220 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:01:00.222 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:01:00.225 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:01:00.227 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:01:00.230 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:01:00.234 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:01:00.427 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    SELECT
        HOUR(published_at) as hour,
        COUNT(*) as visits,
        COUNT(DISTINCT author_id) as uniqueVisits 
    FROM
        article 
    WHERE
        status = 'PUBLISHED' 
        AND published_at >= ? 
    GROUP BY
        HOUR(published_at) 
    ORDER BY
        HOUR(published_at)
2025-09-02 09:01:00.474 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:01:00.475 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:01:00.481 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        count(n1_0.id) 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
        and not(n1_0.is_read)
2025-09-02 09:01:00.486 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.is_read,
        n1_0.related_id,
        n1_0.related_type,
        n1_0.title,
        n1_0.type,
        n1_0.updated_at,
        n1_0.user_id 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
    order by
        n1_0.created_at desc 
    limit
        ?, ?
2025-09-02 09:01:00.574 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.like_count desc 
    limit
        ?, ?
2025-09-02 09:01:00.578 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 09:01:00.583 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:01:00.585 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:01:00.588 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:01:00.590 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:01:00.593 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:01:00.595 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:01:00.599 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:01:00.600 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:01:00.604 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:01:00.607 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:01:00.608 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:01:00.612 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:01:01.063 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 09:01:01.083 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:01:01.153 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:01:01.186 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:01:01.208 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:01:01.220 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:01:01.291 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:01:01.310 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:01:01.446 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 09:01:01.454 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:01:01.461 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:01:01.475 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:01:08.067 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:01:08.085 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:01:08.099 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 09:01:11.930 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 09:01:11.954 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(u1_0.id) 
    from
        users u1_0
2025-09-02 09:01:11.960 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    SELECT
        DATE(published_at) as date,
        COUNT(*) as count 
    FROM
        article 
    WHERE
        status = 'PUBLISHED' 
        AND published_at >= ? 
    GROUP BY
        DATE(published_at) 
    ORDER BY
        DATE(published_at)
2025-09-02 09:01:11.961 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        date(c1_0.created_at),
        count(c1_0.id) 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
        and c1_0.created_at>=? 
    group by
        date(c1_0.created_at) 
    order by
        date(c1_0.created_at)
2025-09-02 09:01:11.965 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    SELECT
        c.name as categoryName,
        COUNT(*) as count 
    FROM
        article a 
    JOIN
        category c 
            ON a.category_id = c.id 
    WHERE
        a.status = 'PUBLISHED' 
    GROUP BY
        c.id,
        c.name 
    ORDER BY
        COUNT(*) DESC
2025-09-02 09:01:11.966 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(c1_0.id) 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED'
2025-09-02 09:01:11.980 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    SELECT
        DATE(published_at) as date,
        COALESCE(SUM(view_count), 0) as totalViews 
    FROM
        article 
    WHERE
        status = 'PUBLISHED' 
        AND published_at >= ? 
    GROUP BY
        DATE(published_at) 
    ORDER BY
        DATE(published_at)
2025-09-02 09:01:11.994 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        coalesce(sum(a1_0.view_count), 0) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 09:01:12.246 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    SELECT
        HOUR(published_at) as hour,
        COUNT(*) as visits,
        COUNT(DISTINCT author_id) as uniqueVisits 
    FROM
        article 
    WHERE
        status = 'PUBLISHED' 
        AND published_at >= ? 
    GROUP BY
        HOUR(published_at) 
    ORDER BY
        HOUR(published_at)
2025-09-02 09:01:12.295 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 09:01:12.326 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-02 09:01:12.426 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 09:01:12.438 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.like_count desc 
    limit
        ?, ?
2025-09-02 09:01:12.474 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 09:01:12.474 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 09:01:12.495 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:01:12.492 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:01:12.499 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:01:12.500 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:01:12.521 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.is_read,
        n1_0.related_id,
        n1_0.related_type,
        n1_0.title,
        n1_0.type,
        n1_0.updated_at,
        n1_0.user_id 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
    order by
        n1_0.created_at desc 
    limit
        ?, ?
2025-09-02 09:01:12.529 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        count(n1_0.id) 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
        and not(n1_0.is_read)
2025-09-02 09:01:12.537 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:01:12.552 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:01:12.572 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:01:12.575 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:01:12.577 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:01:12.602 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:01:12.614 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:01:12.617 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:01:12.617 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:01:12.654 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:01:12.666 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:01:12.687 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:01:12.697 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:01:12.705 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:01:12.718 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:01:12.739 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:01:12.740 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:01:12.751 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:01:12.751 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:01:12.761 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:01:12.762 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:01:12.767 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:01:12.767 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:01:12.769 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:01:12.775 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:01:12.784 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:01:12.797 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:01:12.806 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:01:12.817 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:01:12.841 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:01:12.847 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:01:12.855 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:01:12.860 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:01:12.863 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:01:12.866 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:01:12.870 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:01:12.874 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:01:12.878 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:01:12.883 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:01:12.886 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:01:12.889 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:01:12.892 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:01:12.895 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:01:12.899 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:01:12.902 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:01:13.123 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 09:01:13.126 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:01:13.129 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:01:13.132 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:01:13.134 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:01:13.136 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:01:13.138 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:01:13.140 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:01:13.378 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 09:01:13.381 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:01:13.383 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:01:13.387 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:01:15.488 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:01:15.507 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    order by
        u1_0.created_at desc 
    limit
        ?, ?
2025-09-02 09:01:15.529 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 09:02:18.670 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:02:18.683 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.role=? 
    order by
        u1_0.created_at desc 
    limit
        ?, ?
2025-09-02 09:02:18.690 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 09:02:34.211 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:02:34.218 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.role=? 
    order by
        u1_0.created_at desc 
    limit
        ?, ?
2025-09-02 09:02:34.222 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 09:02:37.236 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:02:37.251 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        (
            u1_0.username like replace(?, '\\', '\\\\') 
            or u1_0.nickname like replace(?, '\\', '\\\\') 
            or u1_0.email like replace(?, '\\', '\\\\')
        ) 
    order by
        u1_0.created_at desc 
    limit
        ?, ?
2025-09-02 09:02:37.263 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 09:02:53.453 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:02:53.460 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        (
            u1_0.username like replace(?, '\\', '\\\\') 
            or u1_0.nickname like replace(?, '\\', '\\\\') 
            or u1_0.email like replace(?, '\\', '\\\\')
        ) 
    order by
        u1_0.created_at desc 
    limit
        ?, ?
2025-09-02 09:02:53.468 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 09:03:04.439 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:03:04.444 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        (
            u1_0.username like replace(?, '\\', '\\\\') 
            or u1_0.nickname like replace(?, '\\', '\\\\') 
            or u1_0.email like replace(?, '\\', '\\\\')
        ) 
    order by
        u1_0.created_at desc 
    limit
        ?, ?
2025-09-02 09:03:04.453 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 09:03:25.918 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    order by
        a1_0.created_at desc,
        a1_0.created_at desc 
    limit
        ?, ?
2025-09-02 09:03:25.927 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0
2025-09-02 09:03:25.930 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:03:25.932 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:03:25.938 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:03:25.940 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:03:25.942 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:03:25.945 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:03:25.947 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:03:25.949 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:03:25.951 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:03:25.952 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:03:25.959 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:03:25.961 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:03:25.963 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:03:25.967 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:03:25.970 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:03:25.976 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:03:25.979 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:03:25.983 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:03:25.985 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:03:25.990 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:03:25.994 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:03:26.000 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:03:26.003 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:03:26.008 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:03:26.198 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 09:03:45.426 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.content,
        a1_0.created_at,
        a1_0.deleted,
        a1_0.enabled,
        a1_0.end_time,
        a1_0.pinned,
        a1_0.priority,
        a1_0.publisher_id,
        a1_0.start_time,
        a1_0.title,
        a1_0.type,
        a1_0.updated_at 
    from
        personal_blog_announcement a1_0 
    where
        not(a1_0.deleted) 
    order by
        a1_0.created_at desc 
    limit
        ?, ?
2025-09-02 09:03:45.435 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:03:45.448 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        count(uar1_0.id) 
    from
        personal_blog_user_announcement_read uar1_0 
    where
        uar1_0.announcement_id=?
2025-09-02 09:03:45.458 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        count(uar1_0.id) 
    from
        personal_blog_user_announcement_read uar1_0 
    where
        uar1_0.announcement_id=?
2025-09-02 09:04:14.835 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 09:04:14.836 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 09:04:14.838 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:04:14.838 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 09:04:14.839 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:04:14.840 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:04:14.841 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:04:14.842 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:04:14.843 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:04:14.844 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:04:14.844 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:04:14.846 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:04:14.846 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:04:14.848 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:04:14.848 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:04:14.849 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:04:14.850 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:04:14.853 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:04:14.855 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:04:14.857 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:04:14.859 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:04:14.860 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:04:14.862 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:04:14.864 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:04:14.866 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:04:14.868 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:04:14.930 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-02 09:10:38.492 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 09:10:38.492 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 09:10:38.512 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:10:38.517 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 09:10:38.531 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:10:38.534 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:10:38.546 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:10:38.548 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:10:38.554 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:10:38.557 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:10:38.560 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:10:38.561 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:10:38.563 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:10:38.564 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:10:38.567 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:10:38.570 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:10:38.575 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:10:38.577 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:10:38.580 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:10:38.582 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:10:38.584 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:10:38.586 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:10:38.588 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:10:38.590 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:10:38.592 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:10:38.593 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:10:38.724 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 09:10:38.749 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-02 09:10:40.512 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:10:40.515 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:10:40.519 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 09:10:41.897 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.content,
        a1_0.created_at,
        a1_0.deleted,
        a1_0.enabled,
        a1_0.end_time,
        a1_0.pinned,
        a1_0.priority,
        a1_0.publisher_id,
        a1_0.start_time,
        a1_0.title,
        a1_0.type,
        a1_0.updated_at 
    from
        personal_blog_announcement a1_0 
    where
        not(a1_0.deleted) 
    order by
        a1_0.created_at desc 
    limit
        ?, ?
2025-09-02 09:10:41.900 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:10:41.902 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        count(uar1_0.id) 
    from
        personal_blog_user_announcement_read uar1_0 
    where
        uar1_0.announcement_id=?
2025-09-02 09:10:41.905 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        count(uar1_0.id) 
    from
        personal_blog_user_announcement_read uar1_0 
    where
        uar1_0.announcement_id=?
2025-09-02 09:10:42.213 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:10:42.217 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:10:42.219 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        count(n1_0.id) 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
        and not(n1_0.is_read)
2025-09-02 09:10:42.222 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.is_read,
        n1_0.related_id,
        n1_0.related_type,
        n1_0.title,
        n1_0.type,
        n1_0.updated_at,
        n1_0.user_id 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
    order by
        n1_0.created_at desc 
    limit
        ?, ?
2025-09-02 09:13:17.943 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 09:13:17.944 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 09:13:17.946 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:13:17.946 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 09:13:17.949 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:13:17.949 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:13:17.959 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:13:17.961 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:13:17.964 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:13:17.970 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:13:17.971 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:13:17.976 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:13:17.977 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:13:17.985 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:13:17.988 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:13:17.990 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:13:17.993 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:13:17.996 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:13:18.004 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:13:18.007 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:13:18.009 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:13:18.011 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:13:18.013 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:13:18.015 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:13:18.017 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:13:18.018 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:13:18.082 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 09:13:18.127 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-02 09:13:51.411 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:13:51.419 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:13:51.424 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 09:13:51.873 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.content,
        a1_0.created_at,
        a1_0.deleted,
        a1_0.enabled,
        a1_0.end_time,
        a1_0.pinned,
        a1_0.priority,
        a1_0.publisher_id,
        a1_0.start_time,
        a1_0.title,
        a1_0.type,
        a1_0.updated_at 
    from
        personal_blog_announcement a1_0 
    where
        not(a1_0.deleted) 
    order by
        a1_0.created_at desc 
    limit
        ?, ?
2025-09-02 09:13:51.874 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:13:51.874 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:13:51.876 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:13:51.880 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        count(n1_0.id) 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
        and not(n1_0.is_read)
2025-09-02 09:13:51.880 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.is_read,
        n1_0.related_id,
        n1_0.related_type,
        n1_0.title,
        n1_0.type,
        n1_0.updated_at,
        n1_0.user_id 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
    order by
        n1_0.created_at desc 
    limit
        ?, ?
2025-09-02 09:13:51.880 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        count(uar1_0.id) 
    from
        personal_blog_user_announcement_read uar1_0 
    where
        uar1_0.announcement_id=?
2025-09-02 09:13:51.884 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        count(uar1_0.id) 
    from
        personal_blog_user_announcement_read uar1_0 
    where
        uar1_0.announcement_id=?
2025-09-02 09:13:55.815 [http-nio-8080-exec-2] ERROR com.blog.exception.GlobalExceptionHandler - 未捕获的异常: No static resource api/comments/admin.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/comments/admin.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-09-02 09:15:15.261 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-09-02 09:15:15.314 [main] INFO  com.blog.BlogApplication - Starting BlogApplication using Java 17.0.2 with PID 32956 (D:\java\boke\backend\target\classes started by Redmi in D:\java\boke\backend)
2025-09-02 09:15:15.315 [main] DEBUG com.blog.BlogApplication - Running with Spring Boot v3.2.0, Spring v6.1.1
2025-09-02 09:15:15.315 [main] INFO  com.blog.BlogApplication - No active profile set, falling back to 1 default profile: "default"
2025-09-02 09:15:16.047 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-02 09:15:16.049 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-09-02 09:15:16.227 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 171 ms. Found 15 JPA repository interfaces.
2025-09-02 09:15:16.243 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-02 09:15:16.244 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-09-02 09:15:16.260 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.AnnouncementRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:15:16.261 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleLikeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:15:16.262 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:15:16.262 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:15:16.263 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CategoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:15:16.263 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CommentLikeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:15:16.263 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CommentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:15:16.264 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.FileInfoRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:15:16.264 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.LoginLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:15:16.264 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.NotificationRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:15:16.264 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.OperationLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:15:16.265 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.SecuritySettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:15:16.265 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.TagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:15:16.266 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.UserAnnouncementReadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:15:16.267 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:15:16.267 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 15 ms. Found 0 Redis repository interfaces.
2025-09-02 09:15:17.049 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-09-02 09:15:17.059 [main] INFO  org.apache.catalina.core.AprLifecycleListener - An older version [1.2.38] of the Apache Tomcat Native library is installed, while Tomcat recommends a minimum version of [2.0.5]
2025-09-02 09:15:17.060 [main] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [1.2.38] using APR version [1.7.4].
2025-09-02 09:15:17.070 [main] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 1.1.1v  1 Aug 2023]
2025-09-02 09:15:17.081 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-09-02 09:15:17.085 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-09-02 09:15:17.085 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.16]
2025-09-02 09:15:17.196 [main] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] - Initializing Spring embedded WebApplicationContext
2025-09-02 09:15:17.196 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1839 ms
2025-09-02 09:15:17.557 [main] DEBUG com.blog.filter.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-09-02 09:15:17.691 [main] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-09-02 09:15:17.763 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.3.1.Final
2025-09-02 09:15:17.803 [main] INFO  o.hibernate.cache.internal.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-09-02 09:15:18.040 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-09-02 09:15:18.069 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-09-02 09:15:18.218 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@2c846d55
2025-09-02 09:15:18.220 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-09-02 09:15:18.267 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-09-02 09:15:18.269 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-09-02 09:15:19.369 [main] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-09-02 09:15:19.513 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-09-02 09:15:19.824 [main] INFO  o.s.data.jpa.repository.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-09-02 09:15:22.014 [main] WARN  o.s.b.a.s.s.UserDetailsServiceAutoConfiguration - 

Using generated security password: 31b9ccea-ddd4-4cc9-9bd4-ad8ba4e2d887

This generated password is for development use only. Your security configuration must be updated before running your application in production.

2025-09-02 09:15:22.388 [main] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@263250d, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@75941ec3, org.springframework.security.web.context.SecurityContextHolderFilter@6c5bd8cc, org.springframework.security.web.header.HeaderWriterFilter@40bd544, org.springframework.web.filter.CorsFilter@28caba4b, org.springframework.security.web.authentication.logout.LogoutFilter@24191de8, com.blog.filter.JwtAuthenticationFilter@56478522, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@41b6c627, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@7226ecfb, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@2f5d7ed6, org.springframework.security.web.session.SessionManagementFilter@4cd40430, org.springframework.security.web.access.ExceptionTranslationFilter@38330440, org.springframework.security.web.access.intercept.AuthorizationFilter@48b2103]
2025-09-02 09:15:22.748 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-09-02 09:15:22.766 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/api'
2025-09-02 09:15:22.774 [main] INFO  com.blog.BlogApplication - Started BlogApplication in 8.05 seconds (process running for 8.431)
2025-09-02 09:15:57.677 [http-nio-8080-exec-1] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-09-02 09:15:57.678 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-09-02 09:15:57.679 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-09-02 09:15:58.141 [http-nio-8080-exec-1] WARN  o.s.web.servlet.handler.HandlerMappingIntrospector - Cache miss for REQUEST dispatch to '/api/users/me' (previous null). Performing MatchableHandlerMapping lookup. This is logged once only at WARN level, and every time at TRACE.
2025-09-02 09:15:58.290 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:15:58.325 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:15:58.373 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 09:15:58.735 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:15:58.752 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.is_read,
        n1_0.related_id,
        n1_0.related_type,
        n1_0.title,
        n1_0.type,
        n1_0.updated_at,
        n1_0.user_id 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
    order by
        n1_0.created_at desc 
    limit
        ?, ?
2025-09-02 09:15:58.756 [http-nio-8080-exec-2] ERROR com.blog.exception.GlobalExceptionHandler - 未捕获的异常: No static resource api/comments/admin.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/comments/admin.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-09-02 09:15:58.886 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:15:58.902 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        count(n1_0.id) 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
        and not(n1_0.is_read)
2025-09-02 09:16:08.761 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 09:16:08.758 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 09:16:08.826 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:16:08.846 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:16:08.849 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 09:16:08.863 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:16:08.875 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:16:08.879 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:16:08.883 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:16:08.896 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:16:08.899 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:16:08.960 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:16:08.994 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:16:09.017 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:16:09.032 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:16:09.051 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:16:09.073 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:16:09.099 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:16:09.109 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:16:09.156 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:16:09.256 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:16:09.276 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:16:09.324 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:16:09.384 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:16:09.391 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:16:09.426 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:16:09.680 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 09:16:09.944 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-02 09:16:26.717 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-09-02 09:16:26.721 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-09-02 09:16:26.811 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-09-02 09:16:26.876 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    update
        users 
    set
        article_count=?,
        avatar=?,
        bio=?,
        deleted=?,
        email=?,
        email_verified=?,
        follower_count=?,
        following_count=?,
        github=?,
        last_login_ip=?,
        last_login_time=?,
        nickname=?,
        password=?,
        role=?,
        status=?,
        updated_at=?,
        username=?,
        website=? 
    where
        id=?
2025-09-02 09:16:26.889 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-09-02 09:16:26.950 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        login_logs
        (created_at, device_info, ip_address, is_current_session, location, login_status, login_time, logout_time, session_id, updated_at, user_agent, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 09:16:26.953 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:16:26.955 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    update
        users 
    set
        article_count=?,
        avatar=?,
        bio=?,
        deleted=?,
        email=?,
        email_verified=?,
        follower_count=?,
        following_count=?,
        github=?,
        last_login_ip=?,
        last_login_time=?,
        nickname=?,
        password=?,
        role=?,
        status=?,
        updated_at=?,
        username=?,
        website=? 
    where
        id=?
2025-09-02 09:16:26.961 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 09:16:27.000 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:16:27.004 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:16:27.007 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 09:16:28.462 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:16:28.476 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.content,
        a1_0.created_at,
        a1_0.deleted,
        a1_0.enabled,
        a1_0.end_time,
        a1_0.pinned,
        a1_0.priority,
        a1_0.publisher_id,
        a1_0.start_time,
        a1_0.title,
        a1_0.type,
        a1_0.updated_at 
    from
        personal_blog_announcement a1_0 
    where
        a1_0.deleted=0 
        and a1_0.enabled=1 
        and (
            a1_0.start_time is null 
            or a1_0.start_time<=?
        ) 
        and (
            a1_0.end_time is null 
            or a1_0.end_time>=?
        ) 
        and a1_0.id not in (select
            uar1_0.announcement_id 
        from
            personal_blog_user_announcement_read uar1_0 
        where
            uar1_0.user_id=?) 
    order by
        a1_0.pinned desc,
        a1_0.priority desc,
        a1_0.created_at desc
2025-09-02 09:16:33.072 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 09:16:33.077 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        date(c1_0.created_at),
        count(c1_0.id) 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
        and c1_0.created_at>=? 
    group by
        date(c1_0.created_at) 
    order by
        date(c1_0.created_at)
2025-09-02 09:16:33.078 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        count(u1_0.id) 
    from
        users u1_0
2025-09-02 09:16:33.084 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        count(c1_0.id) 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED'
2025-09-02 09:16:33.091 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        coalesce(sum(a1_0.view_count), 0) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 09:16:33.109 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    SELECT
        c.name as categoryName,
        COUNT(*) as count 
    FROM
        article a 
    JOIN
        category c 
            ON a.category_id = c.id 
    WHERE
        a.status = 'PUBLISHED' 
    GROUP BY
        c.id,
        c.name 
    ORDER BY
        COUNT(*) DESC
2025-09-02 09:16:33.109 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    SELECT
        DATE(published_at) as date,
        COALESCE(SUM(view_count), 0) as totalViews 
    FROM
        article 
    WHERE
        status = 'PUBLISHED' 
        AND published_at >= ? 
    GROUP BY
        DATE(published_at) 
    ORDER BY
        DATE(published_at)
2025-09-02 09:16:33.109 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    SELECT
        DATE(published_at) as date,
        COUNT(*) as count 
    FROM
        article 
    WHERE
        status = 'PUBLISHED' 
        AND published_at >= ? 
    GROUP BY
        DATE(published_at) 
    ORDER BY
        DATE(published_at)
2025-09-02 09:16:33.360 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    SELECT
        HOUR(published_at) as hour,
        COUNT(*) as visits,
        COUNT(DISTINCT author_id) as uniqueVisits 
    FROM
        article 
    WHERE
        status = 'PUBLISHED' 
        AND published_at >= ? 
    GROUP BY
        HOUR(published_at) 
    ORDER BY
        HOUR(published_at)
2025-09-02 09:16:33.418 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:16:33.421 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:16:33.424 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        count(n1_0.id) 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
        and not(n1_0.is_read)
2025-09-02 09:16:33.427 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.is_read,
        n1_0.related_id,
        n1_0.related_type,
        n1_0.title,
        n1_0.type,
        n1_0.updated_at,
        n1_0.user_id 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
    order by
        n1_0.created_at desc 
    limit
        ?, ?
2025-09-02 09:16:33.449 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.like_count desc 
    limit
        ?, ?
2025-09-02 09:16:33.454 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 09:16:33.456 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:16:33.459 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:16:33.462 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:16:33.464 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:16:33.466 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:16:33.468 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:16:33.470 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:16:33.472 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:16:33.475 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:16:33.477 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:16:33.479 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:16:33.482 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:16:33.834 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 09:16:33.840 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:16:33.844 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:16:33.849 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:16:33.854 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:16:33.858 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:16:33.864 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:16:33.868 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:16:34.080 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 09:16:34.083 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:16:34.086 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:16:34.089 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:16:37.357 [http-nio-8080-exec-8] ERROR com.blog.exception.GlobalExceptionHandler - 未捕获的异常: No static resource api/comments/admin.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/comments/admin.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-09-02 09:19:10.971 [http-nio-8080-exec-2] WARN  com.blog.exception.GlobalExceptionHandler - 参数验证失败: [验证码不能为空, 验证码ID不能为空]
2025-09-02 09:19:18.196 [http-nio-8080-exec-4] WARN  com.blog.exception.GlobalExceptionHandler - 参数验证失败: [验证码不能为空, 验证码ID不能为空]
2025-09-02 09:20:28.693 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-09-02 09:20:28.697 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-09-02 09:20:28.776 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-09-02 09:20:28.781 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    update
        users 
    set
        article_count=?,
        avatar=?,
        bio=?,
        deleted=?,
        email=?,
        email_verified=?,
        follower_count=?,
        following_count=?,
        github=?,
        last_login_ip=?,
        last_login_time=?,
        nickname=?,
        password=?,
        role=?,
        status=?,
        updated_at=?,
        username=?,
        website=? 
    where
        id=?
2025-09-02 09:20:28.790 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-09-02 09:20:28.795 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    insert 
    into
        login_logs
        (created_at, device_info, ip_address, is_current_session, location, login_status, login_time, logout_time, session_id, updated_at, user_agent, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 09:20:28.797 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:20:28.800 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    update
        users 
    set
        article_count=?,
        avatar=?,
        bio=?,
        deleted=?,
        email=?,
        email_verified=?,
        follower_count=?,
        following_count=?,
        github=?,
        last_login_ip=?,
        last_login_time=?,
        nickname=?,
        password=?,
        role=?,
        status=?,
        updated_at=?,
        username=?,
        website=? 
    where
        id=?
2025-09-02 09:20:28.805 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 09:20:35.738 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-09-02 09:20:35.742 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-09-02 09:20:35.823 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-09-02 09:20:35.827 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    update
        users 
    set
        article_count=?,
        avatar=?,
        bio=?,
        deleted=?,
        email=?,
        email_verified=?,
        follower_count=?,
        following_count=?,
        github=?,
        last_login_ip=?,
        last_login_time=?,
        nickname=?,
        password=?,
        role=?,
        status=?,
        updated_at=?,
        username=?,
        website=? 
    where
        id=?
2025-09-02 09:20:35.833 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-09-02 09:20:35.838 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    insert 
    into
        login_logs
        (created_at, device_info, ip_address, is_current_session, location, login_status, login_time, logout_time, session_id, updated_at, user_agent, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 09:20:35.839 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:20:35.842 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    update
        users 
    set
        article_count=?,
        avatar=?,
        bio=?,
        deleted=?,
        email=?,
        email_verified=?,
        follower_count=?,
        following_count=?,
        github=?,
        last_login_ip=?,
        last_login_time=?,
        nickname=?,
        password=?,
        role=?,
        status=?,
        updated_at=?,
        username=?,
        website=? 
    where
        id=?
2025-09-02 09:20:35.846 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 09:20:43.590 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        (
            ? is null 
            or ?='' 
            or c1_0.content like replace(?, '\\', '\\\\')
        ) 
        and (
            ? is null 
            or ?='' 
            or exists(select
                1 
            from
                users u2_0 
            where
                u2_0.id=c1_0.user_id 
                and u2_0.nickname like replace(?, '\\', '\\\\'))
        ) 
        and (
            ? is null 
            or ?='' 
            or exists(select
                1 
            from
                article a2_0 
            where
                a2_0.id=c1_0.article_id 
                and a2_0.title like replace(?, '\\', '\\\\'))
        ) 
        and (
            ? is null 
            or c1_0.status=?
        ) 
        and (
            ? is null 
            or ?=0 
            or (
                ?=1 
                and c1_0.article_id is null
            )
        ) 
    order by
        c1_0.created_at desc,
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 09:20:43.599 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        count(c1_0.id) 
    from
        comment c1_0 
    where
        (
            ? is null 
            or ?='' 
            or c1_0.content like replace(?, '\\', '\\\\')
        ) 
        and (
            ? is null 
            or ?='' 
            or exists(select
                1 
            from
                users u1_0 
            where
                u1_0.id=c1_0.user_id 
                and u1_0.nickname like replace(?, '\\', '\\\\'))
        ) 
        and (
            ? is null 
            or ?='' 
            or exists(select
                1 
            from
                article a1_0 
            where
                a1_0.id=c1_0.article_id 
                and a1_0.title like replace(?, '\\', '\\\\'))
        ) 
        and (
            ? is null 
            or c1_0.status=?
        ) 
        and (
            ? is null 
            or ?=0 
            or (
                ?=1 
                and c1_0.article_id is null
            )
        )
2025-09-02 09:20:43.604 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:20:43.606 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:20:43.607 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:20:43.610 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:20:43.612 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:20:43.614 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:20:43.617 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:20:43.619 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:20:43.620 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:20:43.623 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:20:43.625 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:20:43.627 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:20:43.630 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:20:43.632 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:20:53.994 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:20:53.998 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:20:54.002 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 09:20:54.349 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:20:54.350 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:20:54.351 [http-nio-8080-exec-10] ERROR com.blog.exception.GlobalExceptionHandler - 未捕获的异常: No static resource api/comments/admin.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/comments/admin.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-09-02 09:20:54.355 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(n1_0.id) 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
        and not(n1_0.is_read)
2025-09-02 09:20:54.355 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.is_read,
        n1_0.related_id,
        n1_0.related_type,
        n1_0.title,
        n1_0.type,
        n1_0.updated_at,
        n1_0.user_id 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
    order by
        n1_0.created_at desc 
    limit
        ?, ?
2025-09-02 09:24:23.713 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:24:23.713 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:24:23.714 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        (
            ? is null 
            or ?='' 
            or c1_0.content like replace(?, '\\', '\\\\')
        ) 
        and (
            ? is null 
            or ?='' 
            or exists(select
                1 
            from
                users u2_0 
            where
                u2_0.id=c1_0.user_id 
                and u2_0.nickname like replace(?, '\\', '\\\\'))
        ) 
        and (
            ? is null 
            or ?='' 
            or exists(select
                1 
            from
                article a2_0 
            where
                a2_0.id=c1_0.article_id 
                and a2_0.title like replace(?, '\\', '\\\\'))
        ) 
        and (
            ? is null 
            or c1_0.status=?
        ) 
        and (
            ? is null 
            or ?=0 
            or (
                ?=1 
                and c1_0.article_id is null
            )
        ) 
    order by
        c1_0.created_at desc,
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 09:24:23.718 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        count(n1_0.id) 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
        and not(n1_0.is_read)
2025-09-02 09:24:23.719 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.is_read,
        n1_0.related_id,
        n1_0.related_type,
        n1_0.title,
        n1_0.type,
        n1_0.updated_at,
        n1_0.user_id 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
    order by
        n1_0.created_at desc 
    limit
        ?, ?
2025-09-02 09:24:23.724 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        count(c1_0.id) 
    from
        comment c1_0 
    where
        (
            ? is null 
            or ?='' 
            or c1_0.content like replace(?, '\\', '\\\\')
        ) 
        and (
            ? is null 
            or ?='' 
            or exists(select
                1 
            from
                users u1_0 
            where
                u1_0.id=c1_0.user_id 
                and u1_0.nickname like replace(?, '\\', '\\\\'))
        ) 
        and (
            ? is null 
            or ?='' 
            or exists(select
                1 
            from
                article a1_0 
            where
                a1_0.id=c1_0.article_id 
                and a1_0.title like replace(?, '\\', '\\\\'))
        ) 
        and (
            ? is null 
            or c1_0.status=?
        ) 
        and (
            ? is null 
            or ?=0 
            or (
                ?=1 
                and c1_0.article_id is null
            )
        )
2025-09-02 09:24:23.728 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:24:23.732 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:24:23.735 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:24:23.738 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:24:23.741 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:24:23.743 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:24:23.746 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:24:23.750 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:24:23.753 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:24:23.756 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:24:23.759 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:24:23.762 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:24:23.765 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:24:23.768 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:24:47.088 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.id=?
2025-09-02 09:24:47.122 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        r1_0.parent_id,
        r1_0.id,
        r1_0.article_id,
        r1_0.content,
        r1_0.created_at,
        r1_0.deleted,
        r1_0.ip_address,
        r1_0.like_count,
        r1_0.reply_count,
        r1_0.reply_to_id,
        r1_0.status,
        r1_0.updated_at,
        r1_0.user_id,
        r1_0.user_agent 
    from
        comment r1_0 
    where
        r1_0.parent_id=?
2025-09-02 09:24:47.160 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    delete 
    from
        comment 
    where
        id=?
2025-09-02 09:24:47.196 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 09:24:51.406 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:24:51.412 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:24:51.425 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 09:24:52.571 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:24:52.583 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:24:52.592 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 09:24:53.326 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        (
            ? is null 
            or ?='' 
            or c1_0.content like replace(?, '\\', '\\\\')
        ) 
        and (
            ? is null 
            or ?='' 
            or exists(select
                1 
            from
                users u2_0 
            where
                u2_0.id=c1_0.user_id 
                and u2_0.nickname like replace(?, '\\', '\\\\'))
        ) 
        and (
            ? is null 
            or ?='' 
            or exists(select
                1 
            from
                article a2_0 
            where
                a2_0.id=c1_0.article_id 
                and a2_0.title like replace(?, '\\', '\\\\'))
        ) 
        and (
            ? is null 
            or c1_0.status=?
        ) 
        and (
            ? is null 
            or ?=0 
            or (
                ?=1 
                and c1_0.article_id is null
            )
        ) 
    order by
        c1_0.created_at desc,
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 09:24:53.332 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:24:53.343 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:24:53.365 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        count(n1_0.id) 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
        and not(n1_0.is_read)
2025-09-02 09:24:53.368 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.is_read,
        n1_0.related_id,
        n1_0.related_type,
        n1_0.title,
        n1_0.type,
        n1_0.updated_at,
        n1_0.user_id 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
    order by
        n1_0.created_at desc 
    limit
        ?, ?
2025-09-02 09:24:53.429 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        count(c1_0.id) 
    from
        comment c1_0 
    where
        (
            ? is null 
            or ?='' 
            or c1_0.content like replace(?, '\\', '\\\\')
        ) 
        and (
            ? is null 
            or ?='' 
            or exists(select
                1 
            from
                users u1_0 
            where
                u1_0.id=c1_0.user_id 
                and u1_0.nickname like replace(?, '\\', '\\\\'))
        ) 
        and (
            ? is null 
            or ?='' 
            or exists(select
                1 
            from
                article a1_0 
            where
                a1_0.id=c1_0.article_id 
                and a1_0.title like replace(?, '\\', '\\\\'))
        ) 
        and (
            ? is null 
            or c1_0.status=?
        ) 
        and (
            ? is null 
            or ?=0 
            or (
                ?=1 
                and c1_0.article_id is null
            )
        )
2025-09-02 09:24:53.466 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:24:53.470 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:24:53.476 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:24:53.482 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:24:53.486 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:24:53.491 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:24:53.495 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:24:53.500 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:24:53.514 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:24:53.520 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:24:53.525 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:24:53.529 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:24:53.533 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:24:53.537 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:24:53.542 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:24:53.898 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:24:53.915 [http-nio-8080-exec-9] ERROR com.blog.exception.GlobalExceptionHandler - 未捕获的异常: No static resource api/comments/admin.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource api/comments/admin.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-09-02 09:24:53.923 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:24:53.935 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.is_read,
        n1_0.related_id,
        n1_0.related_type,
        n1_0.title,
        n1_0.type,
        n1_0.updated_at,
        n1_0.user_id 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
    order by
        n1_0.created_at desc 
    limit
        ?, ?
2025-09-02 09:24:53.953 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        count(n1_0.id) 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
        and not(n1_0.is_read)
2025-09-02 09:24:57.037 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        (
            ? is null 
            or ?='' 
            or c1_0.content like replace(?, '\\', '\\\\')
        ) 
        and (
            ? is null 
            or ?='' 
            or exists(select
                1 
            from
                users u2_0 
            where
                u2_0.id=c1_0.user_id 
                and u2_0.nickname like replace(?, '\\', '\\\\'))
        ) 
        and (
            ? is null 
            or ?='' 
            or exists(select
                1 
            from
                article a2_0 
            where
                a2_0.id=c1_0.article_id 
                and a2_0.title like replace(?, '\\', '\\\\'))
        ) 
        and (
            ? is null 
            or c1_0.status=?
        ) 
        and (
            ? is null 
            or ?=0 
            or (
                ?=1 
                and c1_0.article_id is null
            )
        ) 
    order by
        c1_0.created_at desc,
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 09:24:57.105 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:24:57.149 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:24:57.170 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:24:57.191 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:24:57.254 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:24:57.280 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:24:57.339 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:24:57.377 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:24:57.394 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:24:57.415 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:24:57.518 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:26:15.314 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        (
            ? is null 
            or ?='' 
            or c1_0.content like replace(?, '\\', '\\\\')
        ) 
        and (
            ? is null 
            or ?='' 
            or exists(select
                1 
            from
                users u2_0 
            where
                u2_0.id=c1_0.user_id 
                and u2_0.nickname like replace(?, '\\', '\\\\'))
        ) 
        and (
            ? is null 
            or ?='' 
            or exists(select
                1 
            from
                article a2_0 
            where
                a2_0.id=c1_0.article_id 
                and a2_0.title like replace(?, '\\', '\\\\'))
        ) 
        and (
            ? is null 
            or c1_0.status=?
        ) 
        and (
            ? is null 
            or ?=0 
            or (
                ?=1 
                and c1_0.article_id is null
            )
        ) 
    order by
        c1_0.created_at desc,
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 09:26:15.453 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        (
            ? is null 
            or ?='' 
            or c1_0.content like replace(?, '\\', '\\\\')
        ) 
        and (
            ? is null 
            or ?='' 
            or exists(select
                1 
            from
                users u2_0 
            where
                u2_0.id=c1_0.user_id 
                and u2_0.nickname like replace(?, '\\', '\\\\'))
        ) 
        and (
            ? is null 
            or ?='' 
            or exists(select
                1 
            from
                article a2_0 
            where
                a2_0.id=c1_0.article_id 
                and a2_0.title like replace(?, '\\', '\\\\'))
        ) 
        and (
            ? is null 
            or c1_0.status=?
        ) 
        and (
            ? is null 
            or ?=0 
            or (
                ?=1 
                and c1_0.article_id is null
            )
        ) 
    order by
        c1_0.created_at desc,
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 09:27:58.827 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:27:58.832 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:27:58.837 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 09:27:59.268 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:27:59.269 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        (
            ? is null 
            or ?='' 
            or c1_0.content like replace(?, '\\', '\\\\')
        ) 
        and (
            ? is null 
            or ?='' 
            or exists(select
                1 
            from
                users u2_0 
            where
                u2_0.id=c1_0.user_id 
                and u2_0.nickname like replace(?, '\\', '\\\\'))
        ) 
        and (
            ? is null 
            or ?='' 
            or exists(select
                1 
            from
                article a2_0 
            where
                a2_0.id=c1_0.article_id 
                and a2_0.title like replace(?, '\\', '\\\\'))
        ) 
        and (
            ? is null 
            or c1_0.status=?
        ) 
        and (
            ? is null 
            or ?=0 
            or (
                ?=1 
                and c1_0.article_id is null
            )
        ) 
    order by
        c1_0.created_at desc,
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 09:27:59.269 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:27:59.273 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.is_read,
        n1_0.related_id,
        n1_0.related_type,
        n1_0.title,
        n1_0.type,
        n1_0.updated_at,
        n1_0.user_id 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
    order by
        n1_0.created_at desc 
    limit
        ?, ?
2025-09-02 09:27:59.274 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        count(c1_0.id) 
    from
        comment c1_0 
    where
        (
            ? is null 
            or ?='' 
            or c1_0.content like replace(?, '\\', '\\\\')
        ) 
        and (
            ? is null 
            or ?='' 
            or exists(select
                1 
            from
                users u1_0 
            where
                u1_0.id=c1_0.user_id 
                and u1_0.nickname like replace(?, '\\', '\\\\'))
        ) 
        and (
            ? is null 
            or ?='' 
            or exists(select
                1 
            from
                article a1_0 
            where
                a1_0.id=c1_0.article_id 
                and a1_0.title like replace(?, '\\', '\\\\'))
        ) 
        and (
            ? is null 
            or c1_0.status=?
        ) 
        and (
            ? is null 
            or ?=0 
            or (
                ?=1 
                and c1_0.article_id is null
            )
        )
2025-09-02 09:27:59.276 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        count(n1_0.id) 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
        and not(n1_0.is_read)
2025-09-02 09:27:59.280 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:27:59.282 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:27:59.285 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:27:59.287 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:27:59.290 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:27:59.292 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:27:59.295 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:27:59.298 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:27:59.300 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:27:59.303 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:27:59.306 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:27:59.308 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:27:59.311 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:27:59.313 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:27:59.317 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:28:00.815 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        (
            ? is null 
            or ?='' 
            or c1_0.content like replace(?, '\\', '\\\\')
        ) 
        and (
            ? is null 
            or ?='' 
            or exists(select
                1 
            from
                users u2_0 
            where
                u2_0.id=c1_0.user_id 
                and u2_0.nickname like replace(?, '\\', '\\\\'))
        ) 
        and (
            ? is null 
            or ?='' 
            or exists(select
                1 
            from
                article a2_0 
            where
                a2_0.id=c1_0.article_id 
                and a2_0.title like replace(?, '\\', '\\\\'))
        ) 
        and (
            ? is null 
            or c1_0.status=?
        ) 
        and (
            ? is null 
            or ?=0 
            or (
                ?=1 
                and c1_0.article_id is null
            )
        ) 
    order by
        c1_0.created_at desc,
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 09:28:03.881 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:28:03.886 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:28:03.890 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 09:28:04.192 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:28:04.194 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        (
            ? is null 
            or ?='' 
            or c1_0.content like replace(?, '\\', '\\\\')
        ) 
        and (
            ? is null 
            or ?='' 
            or exists(select
                1 
            from
                users u2_0 
            where
                u2_0.id=c1_0.user_id 
                and u2_0.nickname like replace(?, '\\', '\\\\'))
        ) 
        and (
            ? is null 
            or ?='' 
            or exists(select
                1 
            from
                article a2_0 
            where
                a2_0.id=c1_0.article_id 
                and a2_0.title like replace(?, '\\', '\\\\'))
        ) 
        and (
            ? is null 
            or c1_0.status=?
        ) 
        and (
            ? is null 
            or ?=0 
            or (
                ?=1 
                and c1_0.article_id is null
            )
        ) 
    order by
        c1_0.created_at desc,
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 09:28:04.202 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        count(n1_0.id) 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
        and not(n1_0.is_read)
2025-09-02 09:28:04.207 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:28:04.215 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.is_read,
        n1_0.related_id,
        n1_0.related_type,
        n1_0.title,
        n1_0.type,
        n1_0.updated_at,
        n1_0.user_id 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
    order by
        n1_0.created_at desc 
    limit
        ?, ?
2025-09-02 09:28:14.860 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:28:14.895 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:28:14.913 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 09:28:15.543 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:28:15.564 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        count(n1_0.id) 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
        and not(n1_0.is_read)
2025-09-02 09:28:15.570 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        (
            ? is null 
            or ?='' 
            or c1_0.content like replace(?, '\\', '\\\\')
        ) 
        and (
            ? is null 
            or ?='' 
            or exists(select
                1 
            from
                users u2_0 
            where
                u2_0.id=c1_0.user_id 
                and u2_0.nickname like replace(?, '\\', '\\\\'))
        ) 
        and (
            ? is null 
            or ?='' 
            or exists(select
                1 
            from
                article a2_0 
            where
                a2_0.id=c1_0.article_id 
                and a2_0.title like replace(?, '\\', '\\\\'))
        ) 
        and (
            ? is null 
            or c1_0.status=?
        ) 
        and (
            ? is null 
            or ?=0 
            or (
                ?=1 
                and c1_0.article_id is null
            )
        ) 
    order by
        c1_0.created_at desc,
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 09:28:15.574 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:28:15.650 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.is_read,
        n1_0.related_id,
        n1_0.related_type,
        n1_0.title,
        n1_0.type,
        n1_0.updated_at,
        n1_0.user_id 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
    order by
        n1_0.created_at desc 
    limit
        ?, ?
2025-09-02 09:28:20.469 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:28:20.478 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:28:20.498 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 09:28:20.984 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:28:20.992 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:28:20.998 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 09:28:21.240 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:28:21.242 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:28:21.243 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        (
            ? is null 
            or ?='' 
            or c1_0.content like replace(?, '\\', '\\\\')
        ) 
        and (
            ? is null 
            or ?='' 
            or exists(select
                1 
            from
                users u2_0 
            where
                u2_0.id=c1_0.user_id 
                and u2_0.nickname like replace(?, '\\', '\\\\'))
        ) 
        and (
            ? is null 
            or ?='' 
            or exists(select
                1 
            from
                article a2_0 
            where
                a2_0.id=c1_0.article_id 
                and a2_0.title like replace(?, '\\', '\\\\'))
        ) 
        and (
            ? is null 
            or c1_0.status=?
        ) 
        and (
            ? is null 
            or ?=0 
            or (
                ?=1 
                and c1_0.article_id is null
            )
        ) 
    order by
        c1_0.created_at desc,
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 09:28:21.246 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        count(n1_0.id) 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
        and not(n1_0.is_read)
2025-09-02 09:28:21.247 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.is_read,
        n1_0.related_id,
        n1_0.related_type,
        n1_0.title,
        n1_0.type,
        n1_0.updated_at,
        n1_0.user_id 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
    order by
        n1_0.created_at desc 
    limit
        ?, ?
2025-09-02 09:28:45.108 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 09:28:45.110 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 09:28:45.114 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:28:45.115 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 09:28:45.127 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:28:45.129 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:28:45.131 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:28:45.134 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:28:45.134 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:28:45.137 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:28:45.137 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:28:45.139 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:28:45.139 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:28:45.142 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:28:45.142 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:28:45.144 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:28:45.145 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:28:45.147 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:28:45.150 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:28:45.152 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:28:45.155 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:28:45.159 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:28:45.161 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:28:45.163 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:28:45.165 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:28:45.167 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:28:45.170 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:28:45.248 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 09:28:45.301 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-02 09:28:50.008 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 09:28:50.013 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 09:28:50.022 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:28:50.040 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 09:28:50.047 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:28:50.048 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:28:50.050 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:28:50.052 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:28:50.057 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:28:50.058 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:28:50.060 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:28:50.063 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:28:50.065 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:28:50.069 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:28:50.071 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:28:50.072 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:28:50.077 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:28:50.078 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:28:50.079 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:28:50.092 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:28:50.095 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:28:50.098 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:28:50.100 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:28:50.108 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:28:50.115 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:28:50.117 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:28:50.131 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:28:50.204 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 09:28:50.251 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-02 09:28:54.669 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-09-02 09:28:54.676 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-09-02 09:28:54.791 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-09-02 09:28:54.798 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    update
        users 
    set
        article_count=?,
        avatar=?,
        bio=?,
        deleted=?,
        email=?,
        email_verified=?,
        follower_count=?,
        following_count=?,
        github=?,
        last_login_ip=?,
        last_login_time=?,
        nickname=?,
        password=?,
        role=?,
        status=?,
        updated_at=?,
        username=?,
        website=? 
    where
        id=?
2025-09-02 09:28:54.810 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-09-02 09:28:54.820 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        login_logs
        (created_at, device_info, ip_address, is_current_session, location, login_status, login_time, logout_time, session_id, updated_at, user_agent, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 09:28:54.825 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:28:54.829 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    update
        users 
    set
        article_count=?,
        avatar=?,
        bio=?,
        deleted=?,
        email=?,
        email_verified=?,
        follower_count=?,
        following_count=?,
        github=?,
        last_login_ip=?,
        last_login_time=?,
        nickname=?,
        password=?,
        role=?,
        status=?,
        updated_at=?,
        username=?,
        website=? 
    where
        id=?
2025-09-02 09:28:54.836 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 09:28:54.891 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:28:54.896 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:28:54.903 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 09:28:56.366 [http-nio-8080-exec-4] ERROR com.blog.exception.GlobalExceptionHandler - 未捕获的异常: No static resource announcements/unread.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource announcements/unread.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-09-02 09:28:56.888 [http-nio-8080-exec-7] ERROR com.blog.exception.GlobalExceptionHandler - 未捕获的异常: No static resource announcements/unread.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource announcements/unread.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-09-02 09:30:32.107 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-09-02 09:30:32.161 [main] INFO  com.blog.BlogApplication - Starting BlogApplication using Java 17.0.2 with PID 62172 (D:\java\boke\backend\target\classes started by Redmi in D:\java\boke\backend)
2025-09-02 09:30:32.162 [main] DEBUG com.blog.BlogApplication - Running with Spring Boot v3.2.0, Spring v6.1.1
2025-09-02 09:30:32.163 [main] INFO  com.blog.BlogApplication - No active profile set, falling back to 1 default profile: "default"
2025-09-02 09:30:32.936 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-02 09:30:32.938 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-09-02 09:30:33.127 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 184 ms. Found 15 JPA repository interfaces.
2025-09-02 09:30:33.143 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-02 09:30:33.144 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-09-02 09:30:33.159 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.AnnouncementRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:30:33.160 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleLikeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:30:33.161 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:30:33.162 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:30:33.162 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CategoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:30:33.162 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CommentLikeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:30:33.162 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CommentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:30:33.163 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.FileInfoRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:30:33.163 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.LoginLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:30:33.163 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.NotificationRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:30:33.164 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.OperationLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:30:33.164 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.SecuritySettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:30:33.164 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.TagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:30:33.165 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.UserAnnouncementReadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:30:33.165 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:30:33.165 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 13 ms. Found 0 Redis repository interfaces.
2025-09-02 09:30:34.087 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-09-02 09:30:34.096 [main] INFO  org.apache.catalina.core.AprLifecycleListener - An older version [1.2.38] of the Apache Tomcat Native library is installed, while Tomcat recommends a minimum version of [2.0.5]
2025-09-02 09:30:34.096 [main] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [1.2.38] using APR version [1.7.4].
2025-09-02 09:30:34.099 [main] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 1.1.1v  1 Aug 2023]
2025-09-02 09:30:34.109 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-09-02 09:30:34.111 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-09-02 09:30:34.112 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.16]
2025-09-02 09:30:34.213 [main] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] - Initializing Spring embedded WebApplicationContext
2025-09-02 09:30:34.214 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2007 ms
2025-09-02 09:30:34.571 [main] DEBUG com.blog.filter.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-09-02 09:30:34.696 [main] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-09-02 09:30:34.752 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.3.1.Final
2025-09-02 09:30:34.784 [main] INFO  o.hibernate.cache.internal.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-09-02 09:30:34.997 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-09-02 09:30:35.024 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-09-02 09:30:35.177 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@22ab1b8a
2025-09-02 09:30:35.179 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-09-02 09:30:35.219 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-09-02 09:30:35.221 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-09-02 09:30:36.380 [main] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-09-02 09:30:36.510 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-09-02 09:30:36.893 [main] INFO  o.s.data.jpa.repository.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-09-02 09:30:39.731 [main] WARN  o.s.b.a.s.s.UserDetailsServiceAutoConfiguration - 

Using generated security password: c0ca5c08-7704-41f7-82e6-4487717acdc0

This generated password is for development use only. Your security configuration must be updated before running your application in production.

2025-09-02 09:30:40.295 [main] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@2f5d7ed6, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@340d7d7d, org.springframework.security.web.context.SecurityContextHolderFilter@7226ecfb, org.springframework.security.web.header.HeaderWriterFilter@4d5533, org.springframework.web.filter.CorsFilter@613a1f39, org.springframework.security.web.authentication.logout.LogoutFilter@4b9e952f, com.blog.filter.JwtAuthenticationFilter@6591f8ea, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@55f90605, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@22896563, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@1c5fe9b7, org.springframework.security.web.session.SessionManagementFilter@6c5bd8cc, org.springframework.security.web.access.ExceptionTranslationFilter@c5d249d, org.springframework.security.web.access.intercept.AuthorizationFilter@75941ec3]
2025-09-02 09:30:40.802 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-09-02 09:30:40.832 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/api'
2025-09-02 09:30:40.840 [main] INFO  com.blog.BlogApplication - Started BlogApplication in 9.268 seconds (process running for 9.673)
2025-09-02 09:30:41.273 [http-nio-8080-exec-1] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-09-02 09:30:41.273 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-09-02 09:30:41.275 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-09-02 09:30:41.707 [http-nio-8080-exec-1] WARN  o.s.web.servlet.handler.HandlerMappingIntrospector - Cache miss for REQUEST dispatch to '/api/users/me' (previous null). Performing MatchableHandlerMapping lookup. This is logged once only at WARN level, and every time at TRACE.
2025-09-02 09:30:41.871 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:30:41.912 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:30:41.964 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 09:30:47.274 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:30:47.279 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:30:47.283 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 09:30:47.778 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:30:47.779 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:30:47.798 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.is_read,
        n1_0.related_id,
        n1_0.related_type,
        n1_0.title,
        n1_0.type,
        n1_0.updated_at,
        n1_0.user_id 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
    order by
        n1_0.created_at desc 
    limit
        ?, ?
2025-09-02 09:30:47.799 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        count(n1_0.id) 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
        and not(n1_0.is_read)
2025-09-02 09:30:47.830 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        (
            ? is null 
            or ?='' 
            or c1_0.content like replace(?, '\\', '\\\\')
        ) 
        and (
            ? is null 
            or ?='' 
            or exists(select
                1 
            from
                users u2_0 
            where
                u2_0.id=c1_0.user_id 
                and u2_0.nickname like replace(?, '\\', '\\\\'))
        ) 
        and (
            ? is null 
            or ?='' 
            or exists(select
                1 
            from
                article a2_0 
            where
                a2_0.id=c1_0.article_id 
                and a2_0.title like replace(?, '\\', '\\\\'))
        ) 
        and (
            ? is null 
            or c1_0.status=?
        ) 
        and (
            ? is null 
            or ?=0 
            or (
                ?=1 
                and c1_0.article_id is null
            )
        ) 
    order by
        c1_0.created_at desc,
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 09:30:51.306 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:30:51.321 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:30:51.327 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 09:30:55.425 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:30:55.431 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:30:55.439 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 09:30:56.114 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 09:30:56.137 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 09:30:56.151 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:30:56.156 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:30:56.159 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:30:56.161 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 09:30:56.162 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:30:56.164 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:30:56.165 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:30:56.167 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:30:56.168 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:30:56.170 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:30:56.179 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:30:56.187 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:30:56.189 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:30:56.192 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:30:56.194 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:30:56.196 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:30:56.199 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:30:56.200 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:30:56.203 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:30:56.206 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:30:56.209 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:30:56.212 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:30:56.218 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:30:56.220 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:30:56.224 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:30:56.350 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 09:30:56.710 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-02 09:30:56.981 [http-nio-8080-exec-4] ERROR com.blog.exception.GlobalExceptionHandler - 未捕获的异常: No static resource announcements/unread.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource announcements/unread.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-09-02 09:30:57.891 [http-nio-8080-exec-7] ERROR com.blog.exception.GlobalExceptionHandler - 未捕获的异常: No static resource announcements/unread.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource announcements/unread.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-09-02 09:31:02.456 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:31:02.470 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:31:02.477 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 09:31:02.952 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 09:31:02.958 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 09:31:02.961 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:31:02.964 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:31:02.965 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 09:31:02.968 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:31:02.969 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:31:02.971 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:31:02.972 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:31:02.975 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:31:02.975 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:31:02.979 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:31:02.981 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:31:02.985 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:31:02.986 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:31:02.988 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:31:02.993 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:31:02.996 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:31:03.004 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:31:03.010 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:31:03.013 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:31:03.016 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:31:03.018 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:31:03.021 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:31:03.023 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:31:03.025 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:31:03.028 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:31:03.137 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 09:31:03.498 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-02 09:31:03.935 [http-nio-8080-exec-4] ERROR com.blog.exception.GlobalExceptionHandler - 未捕获的异常: No static resource announcements/unread.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource announcements/unread.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-09-02 09:31:04.736 [http-nio-8080-exec-7] ERROR com.blog.exception.GlobalExceptionHandler - 未捕获的异常: No static resource announcements/unread.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource announcements/unread.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-09-02 09:35:07.072 [http-nio-8080-exec-2] ERROR com.blog.exception.GlobalExceptionHandler - 未捕获的异常: No static resource announcements/unread.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource announcements/unread.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-09-02 09:35:07.464 [http-nio-8080-exec-3] ERROR com.blog.exception.GlobalExceptionHandler - 未捕获的异常: No static resource announcements/unread.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource announcements/unread.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-09-02 09:35:08.047 [http-nio-8080-exec-6] ERROR com.blog.exception.GlobalExceptionHandler - 未捕获的异常: No static resource announcements/unread.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource announcements/unread.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-09-02 09:35:08.065 [http-nio-8080-exec-5] ERROR com.blog.exception.GlobalExceptionHandler - 未捕获的异常: No static resource announcements/unread.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource announcements/unread.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-09-02 09:35:50.397 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:35:50.405 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:35:50.430 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 09:35:50.651 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 09:35:50.651 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 09:35:50.665 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:35:50.666 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 09:35:50.672 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:35:50.674 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:35:50.677 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:35:50.680 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:35:50.680 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:35:50.683 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:35:50.683 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:35:50.685 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:35:50.685 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:35:50.688 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:35:50.688 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:35:50.690 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:35:50.693 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:35:50.696 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:35:50.699 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:35:50.701 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:35:50.703 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:35:50.707 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:35:50.709 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:35:50.711 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:35:50.713 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:35:50.716 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:35:50.717 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:35:50.796 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 09:35:51.085 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-02 09:35:51.241 [http-nio-8080-exec-6] ERROR com.blog.exception.GlobalExceptionHandler - 未捕获的异常: No static resource announcements/unread.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource announcements/unread.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-09-02 09:35:51.571 [http-nio-8080-exec-5] ERROR com.blog.exception.GlobalExceptionHandler - 未捕获的异常: No static resource announcements/unread.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource announcements/unread.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-09-02 09:36:36.630 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-09-02 09:36:36.685 [main] INFO  com.blog.BlogApplication - Starting BlogApplication using Java 17.0.2 with PID 46896 (D:\java\boke\backend\target\classes started by Redmi in D:\java\boke\backend)
2025-09-02 09:36:36.686 [main] DEBUG com.blog.BlogApplication - Running with Spring Boot v3.2.0, Spring v6.1.1
2025-09-02 09:36:36.687 [main] INFO  com.blog.BlogApplication - No active profile set, falling back to 1 default profile: "default"
2025-09-02 09:36:37.531 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-02 09:36:37.533 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-09-02 09:36:37.736 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 197 ms. Found 15 JPA repository interfaces.
2025-09-02 09:36:37.754 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-02 09:36:37.756 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-09-02 09:36:37.773 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.AnnouncementRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:36:37.774 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleLikeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:36:37.775 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:36:37.776 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:36:37.777 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CategoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:36:37.777 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CommentLikeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:36:37.778 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CommentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:36:37.778 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.FileInfoRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:36:37.778 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.LoginLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:36:37.779 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.NotificationRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:36:37.779 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.OperationLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:36:37.779 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.SecuritySettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:36:37.780 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.TagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:36:37.781 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.UserAnnouncementReadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:36:37.782 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:36:37.783 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 17 ms. Found 0 Redis repository interfaces.
2025-09-02 09:36:38.609 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-09-02 09:36:38.618 [main] INFO  org.apache.catalina.core.AprLifecycleListener - An older version [1.2.38] of the Apache Tomcat Native library is installed, while Tomcat recommends a minimum version of [2.0.5]
2025-09-02 09:36:38.620 [main] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [1.2.38] using APR version [1.7.4].
2025-09-02 09:36:38.625 [main] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 1.1.1v  1 Aug 2023]
2025-09-02 09:36:38.635 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-09-02 09:36:38.638 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-09-02 09:36:38.638 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.16]
2025-09-02 09:36:38.724 [main] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] - Initializing Spring embedded WebApplicationContext
2025-09-02 09:36:38.724 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1986 ms
2025-09-02 09:36:39.088 [main] DEBUG com.blog.filter.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-09-02 09:36:39.214 [main] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-09-02 09:36:39.273 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.3.1.Final
2025-09-02 09:36:39.309 [main] INFO  o.hibernate.cache.internal.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-09-02 09:36:39.522 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-09-02 09:36:39.552 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-09-02 09:36:39.711 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@36cdcae0
2025-09-02 09:36:39.714 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-09-02 09:36:39.798 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-09-02 09:36:39.800 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-09-02 09:36:41.022 [main] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-09-02 09:36:41.162 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-09-02 09:36:41.524 [main] INFO  o.s.data.jpa.repository.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-09-02 09:36:43.806 [main] WARN  o.s.b.a.s.s.UserDetailsServiceAutoConfiguration - 

Using generated security password: dfa3fd5d-c6d5-45e7-903f-1c0c83d913e3

This generated password is for development use only. Your security configuration must be updated before running your application in production.

2025-09-02 09:36:44.263 [main] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@6dfec99e, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@30172b56, org.springframework.security.web.context.SecurityContextHolderFilter@28caba4b, org.springframework.security.web.header.HeaderWriterFilter@24191de8, org.springframework.web.filter.CorsFilter@6f4a6c56, org.springframework.security.web.authentication.logout.LogoutFilter@7bfac81c, com.blog.filter.JwtAuthenticationFilter@1be77a76, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@340d7d7d, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@613a1f39, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@6f5bbb45, org.springframework.security.web.session.SessionManagementFilter@705ef9d5, org.springframework.security.web.access.ExceptionTranslationFilter@53a7e677, org.springframework.security.web.access.intercept.AuthorizationFilter@3d5c5bd1]
2025-09-02 09:36:44.704 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-09-02 09:36:44.727 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/api'
2025-09-02 09:36:44.734 [main] INFO  com.blog.BlogApplication - Started BlogApplication in 8.849 seconds (process running for 9.35)
2025-09-02 09:36:55.813 [http-nio-8080-exec-1] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-09-02 09:36:55.814 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-09-02 09:36:55.817 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-09-02 09:36:56.352 [http-nio-8080-exec-1] WARN  o.s.web.servlet.handler.HandlerMappingIntrospector - Cache miss for REQUEST dispatch to '/api/users/me' (previous null). Performing MatchableHandlerMapping lookup. This is logged once only at WARN level, and every time at TRACE.
2025-09-02 09:36:56.521 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:36:56.556 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:36:56.598 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 09:36:56.970 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 09:36:56.970 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 09:36:56.985 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:36:56.991 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:36:56.994 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:36:56.997 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:36:56.999 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 09:36:57.000 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:36:57.002 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:36:57.002 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:36:57.005 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:36:57.005 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:36:57.015 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:36:57.021 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:36:57.024 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:36:57.026 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:36:57.029 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:36:57.032 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:36:57.034 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:36:57.037 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:36:57.039 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:36:57.042 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:36:57.045 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:36:57.048 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:36:57.054 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:36:57.057 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:36:57.060 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:36:57.154 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 09:36:57.511 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-02 09:36:57.725 [http-nio-8080-exec-9] ERROR com.blog.exception.GlobalExceptionHandler - 未捕获的异常: No static resource announcements/unread.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource announcements/unread.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-09-02 09:36:57.824 [http-nio-8080-exec-10] ERROR com.blog.exception.GlobalExceptionHandler - 未捕获的异常: No static resource announcements/unread.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource announcements/unread.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-09-02 09:37:30.944 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:37:30.949 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:37:30.954 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 09:37:31.165 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 09:37:31.166 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 09:37:31.170 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:37:31.170 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 09:37:31.172 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:37:31.172 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:37:31.174 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:37:31.174 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:37:31.176 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:37:31.176 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:37:31.179 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:37:31.179 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:37:31.181 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:37:31.181 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:37:31.183 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:37:31.183 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:37:31.185 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:37:31.187 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:37:31.190 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:37:31.194 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:37:31.196 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:37:31.197 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:37:31.200 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:37:31.202 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:37:31.203 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:37:31.205 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:37:31.208 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:37:31.328 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 09:37:31.558 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-02 09:37:31.660 [http-nio-8080-exec-9] ERROR com.blog.exception.GlobalExceptionHandler - 未捕获的异常: No static resource announcements/unread.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource announcements/unread.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-09-02 09:37:32.121 [http-nio-8080-exec-10] ERROR com.blog.exception.GlobalExceptionHandler - 未捕获的异常: No static resource announcements/unread.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource announcements/unread.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-09-02 09:37:49.471 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:37:49.480 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:37:49.485 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 09:37:50.065 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 09:37:50.066 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 09:37:50.073 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:37:50.074 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 09:37:50.080 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:37:50.081 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:37:50.084 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:37:50.087 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:37:50.097 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:37:50.101 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:37:50.120 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:37:50.121 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:37:50.122 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:37:50.139 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:37:50.147 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:37:50.147 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:37:50.150 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:37:50.151 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:37:50.153 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:37:50.156 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:37:50.160 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:37:50.164 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:37:50.167 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:37:50.170 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:37:50.173 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:37:50.176 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:37:50.179 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:37:50.291 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 09:37:50.709 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-02 09:37:50.959 [http-nio-8080-exec-9] ERROR com.blog.exception.GlobalExceptionHandler - 未捕获的异常: No static resource announcements/unread.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource announcements/unread.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-09-02 09:37:51.013 [http-nio-8080-exec-10] ERROR com.blog.exception.GlobalExceptionHandler - 未捕获的异常: No static resource announcements/unread.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource announcements/unread.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-09-02 09:38:06.190 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:38:06.199 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:38:06.207 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 09:38:07.424 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 09:38:07.426 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 09:38:07.446 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:38:07.448 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 09:38:07.460 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:38:07.466 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:38:07.473 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:38:07.474 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:38:07.477 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:38:07.483 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:38:07.486 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:38:07.496 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:38:07.502 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:38:07.506 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:38:07.512 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:38:07.517 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:38:07.531 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:38:07.540 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:38:07.544 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:38:07.550 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:38:07.552 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:38:07.558 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:38:07.574 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:38:07.579 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:38:07.592 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:38:07.600 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:38:07.610 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:38:07.705 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 09:38:07.792 [http-nio-8080-exec-8] ERROR com.blog.exception.GlobalExceptionHandler - 未捕获的异常: No static resource announcements/unread.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource announcements/unread.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-09-02 09:38:08.093 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-02 09:38:08.425 [http-nio-8080-exec-10] ERROR com.blog.exception.GlobalExceptionHandler - 未捕获的异常: No static resource announcements/unread.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource announcements/unread.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-09-02 09:38:22.802 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:38:22.808 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:38:22.819 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 09:38:23.214 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 09:38:23.219 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 09:38:23.220 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:38:23.227 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:38:23.238 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:38:23.239 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 09:38:23.249 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:38:23.250 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:38:23.254 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:38:23.254 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:38:23.258 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:38:23.265 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:38:23.269 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:38:23.278 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:38:23.304 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:38:23.310 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:38:23.313 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:38:23.317 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:38:23.323 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:38:23.327 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:38:23.333 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:38:23.339 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:38:23.343 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:38:23.347 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:38:23.351 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:38:23.357 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:38:23.362 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:38:23.619 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 09:38:24.005 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-02 09:38:24.055 [http-nio-8080-exec-9] ERROR com.blog.exception.GlobalExceptionHandler - 未捕获的异常: No static resource announcements/unread.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource announcements/unread.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-09-02 09:38:24.282 [http-nio-8080-exec-10] ERROR com.blog.exception.GlobalExceptionHandler - 未捕获的异常: No static resource announcements/unread.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource announcements/unread.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-09-02 09:38:38.966 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:38:38.970 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:38:38.973 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 09:38:39.386 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 09:38:39.386 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 09:38:39.390 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:38:39.391 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 09:38:39.393 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:38:39.393 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:38:39.396 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:38:39.396 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:38:39.398 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:38:39.399 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:38:39.401 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:38:39.402 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:38:39.403 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:38:39.405 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:38:39.405 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:38:39.408 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:38:39.408 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:38:39.410 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:38:39.412 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:38:39.414 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:38:39.417 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:38:39.419 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:38:39.421 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:38:39.424 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:38:39.426 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:38:39.427 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:38:39.430 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:38:39.582 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 09:38:39.947 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-02 09:38:40.198 [http-nio-8080-exec-9] ERROR com.blog.exception.GlobalExceptionHandler - 未捕获的异常: No static resource announcements/unread.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource announcements/unread.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-09-02 09:38:40.288 [http-nio-8080-exec-10] ERROR com.blog.exception.GlobalExceptionHandler - 未捕获的异常: No static resource announcements/unread.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource announcements/unread.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-09-02 09:46:55.167 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-09-02 09:46:55.221 [main] INFO  com.blog.BlogApplication - Starting BlogApplication using Java 17.0.2 with PID 26220 (D:\java\boke\backend\target\classes started by Redmi in D:\java\boke\backend)
2025-09-02 09:46:55.222 [main] DEBUG com.blog.BlogApplication - Running with Spring Boot v3.2.0, Spring v6.1.1
2025-09-02 09:46:55.223 [main] INFO  com.blog.BlogApplication - No active profile set, falling back to 1 default profile: "default"
2025-09-02 09:46:56.044 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-02 09:46:56.046 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-09-02 09:46:56.237 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 184 ms. Found 15 JPA repository interfaces.
2025-09-02 09:46:56.255 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-02 09:46:56.257 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-09-02 09:46:56.273 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.AnnouncementRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:46:56.274 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleLikeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:46:56.276 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:46:56.276 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:46:56.276 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CategoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:46:56.277 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CommentLikeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:46:56.277 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CommentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:46:56.278 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.FileInfoRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:46:56.278 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.LoginLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:46:56.278 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.NotificationRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:46:56.279 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.OperationLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:46:56.279 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.SecuritySettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:46:56.280 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.TagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:46:56.281 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.UserAnnouncementReadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:46:56.281 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:46:56.281 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 16 ms. Found 0 Redis repository interfaces.
2025-09-02 09:46:57.157 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-09-02 09:46:57.165 [main] INFO  org.apache.catalina.core.AprLifecycleListener - An older version [1.2.38] of the Apache Tomcat Native library is installed, while Tomcat recommends a minimum version of [2.0.5]
2025-09-02 09:46:57.165 [main] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [1.2.38] using APR version [1.7.4].
2025-09-02 09:46:57.173 [main] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 1.1.1v  1 Aug 2023]
2025-09-02 09:46:57.183 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-09-02 09:46:57.185 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-09-02 09:46:57.186 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.16]
2025-09-02 09:46:57.273 [main] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] - Initializing Spring embedded WebApplicationContext
2025-09-02 09:46:57.273 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2007 ms
2025-09-02 09:46:57.695 [main] DEBUG com.blog.filter.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-09-02 09:46:57.811 [main] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-09-02 09:46:57.867 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.3.1.Final
2025-09-02 09:46:57.903 [main] INFO  o.hibernate.cache.internal.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-09-02 09:46:58.118 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-09-02 09:46:58.143 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-09-02 09:46:58.298 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@2c846d55
2025-09-02 09:46:58.299 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-09-02 09:46:58.339 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-09-02 09:46:58.340 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-09-02 09:46:59.430 [main] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-09-02 09:46:59.547 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-09-02 09:46:59.870 [main] INFO  o.s.data.jpa.repository.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-09-02 09:47:02.724 [main] WARN  o.s.b.a.s.s.UserDetailsServiceAutoConfiguration - 

Using generated security password: c08af02a-a115-42c0-84e2-6db06a5eb502

This generated password is for development use only. Your security configuration must be updated before running your application in production.

2025-09-02 09:47:03.195 [main] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@5acd7897, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@2b64a8cc, org.springframework.security.web.context.SecurityContextHolderFilter@3325fdf6, org.springframework.security.web.header.HeaderWriterFilter@5652d8b5, org.springframework.web.filter.CorsFilter@265e3e27, org.springframework.security.web.authentication.logout.LogoutFilter@120e4e73, com.blog.filter.JwtAuthenticationFilter@3caf5c96, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@de5dd8c, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@24659777, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@3bcb7aa9, org.springframework.security.web.session.SessionManagementFilter@1f53503, org.springframework.security.web.access.ExceptionTranslationFilter@6977f492, org.springframework.security.web.access.intercept.AuthorizationFilter@3c562c33]
2025-09-02 09:47:03.617 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-09-02 09:47:03.637 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/api'
2025-09-02 09:47:03.644 [main] INFO  com.blog.BlogApplication - Started BlogApplication in 9.056 seconds (process running for 9.472)
2025-09-02 09:47:15.730 [http-nio-8080-exec-3] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-09-02 09:47:15.731 [http-nio-8080-exec-3] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-09-02 09:47:15.732 [http-nio-8080-exec-3] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-09-02 09:47:16.277 [http-nio-8080-exec-3] WARN  o.s.web.servlet.handler.HandlerMappingIntrospector - Cache miss for REQUEST dispatch to '/api/users/me' (previous null). Performing MatchableHandlerMapping lookup. This is logged once only at WARN level, and every time at TRACE.
2025-09-02 09:47:16.440 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:47:16.475 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:47:16.516 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 09:47:16.838 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 09:47:16.839 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 09:47:16.856 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:47:16.861 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:47:16.864 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:47:16.866 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:47:16.869 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 09:47:16.870 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:47:16.872 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:47:16.872 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:47:16.875 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:47:16.875 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:47:16.886 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:47:16.892 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:47:16.895 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:47:16.897 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:47:16.899 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:47:16.902 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:47:16.904 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:47:16.906 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:47:16.909 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:47:16.910 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:47:16.913 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:47:16.915 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:47:16.918 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:47:16.921 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:47:16.924 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:47:17.008 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 09:47:17.361 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-02 09:47:17.628 [http-nio-8080-exec-9] ERROR com.blog.exception.GlobalExceptionHandler - 未捕获的异常: No static resource announcements/unread.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource announcements/unread.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-09-02 09:47:17.745 [http-nio-8080-exec-10] ERROR com.blog.exception.GlobalExceptionHandler - 未捕获的异常: No static resource announcements/unread.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource announcements/unread.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-09-02 09:48:30.787 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-09-02 09:48:30.852 [main] INFO  com.blog.BlogApplication - Starting BlogApplication using Java 17.0.2 with PID 36104 (D:\java\boke\backend\target\classes started by Redmi in D:\java\boke\backend)
2025-09-02 09:48:30.853 [main] DEBUG com.blog.BlogApplication - Running with Spring Boot v3.2.0, Spring v6.1.1
2025-09-02 09:48:30.855 [main] INFO  com.blog.BlogApplication - No active profile set, falling back to 1 default profile: "default"
2025-09-02 09:48:31.737 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-02 09:48:31.739 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-09-02 09:48:31.954 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 208 ms. Found 15 JPA repository interfaces.
2025-09-02 09:48:31.969 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-02 09:48:31.970 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-09-02 09:48:31.985 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.AnnouncementRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:48:31.986 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleLikeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:48:31.987 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:48:31.988 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:48:31.988 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CategoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:48:31.989 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CommentLikeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:48:31.990 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CommentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:48:31.990 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.FileInfoRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:48:31.990 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.LoginLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:48:31.991 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.NotificationRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:48:31.991 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.OperationLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:48:31.991 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.SecuritySettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:48:31.991 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.TagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:48:31.992 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.UserAnnouncementReadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:48:31.993 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:48:31.993 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 13 ms. Found 0 Redis repository interfaces.
2025-09-02 09:48:32.844 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-09-02 09:48:32.853 [main] INFO  org.apache.catalina.core.AprLifecycleListener - An older version [1.2.38] of the Apache Tomcat Native library is installed, while Tomcat recommends a minimum version of [2.0.5]
2025-09-02 09:48:32.854 [main] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [1.2.38] using APR version [1.7.4].
2025-09-02 09:48:32.861 [main] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 1.1.1v  1 Aug 2023]
2025-09-02 09:48:32.871 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-09-02 09:48:32.874 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-09-02 09:48:32.874 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.16]
2025-09-02 09:48:32.964 [main] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] - Initializing Spring embedded WebApplicationContext
2025-09-02 09:48:32.964 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2053 ms
2025-09-02 09:48:33.411 [main] DEBUG com.blog.filter.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-09-02 09:48:33.569 [main] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-09-02 09:48:33.626 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.3.1.Final
2025-09-02 09:48:33.667 [main] INFO  o.hibernate.cache.internal.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-09-02 09:48:33.922 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-09-02 09:48:33.951 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-09-02 09:48:34.136 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@60b4c754
2025-09-02 09:48:34.139 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-09-02 09:48:34.191 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-09-02 09:48:34.192 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-09-02 09:48:35.352 [main] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-09-02 09:48:35.481 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-09-02 09:48:35.839 [main] INFO  o.s.data.jpa.repository.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-09-02 09:48:38.174 [main] WARN  o.s.b.a.s.s.UserDetailsServiceAutoConfiguration - 

Using generated security password: 5bf102fb-c2d2-4838-a1ac-c1679d4525ec

This generated password is for development use only. Your security configuration must be updated before running your application in production.

2025-09-02 09:48:38.733 [main] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@6b7b3d77, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@24d533a7, org.springframework.security.web.context.SecurityContextHolderFilter@55048b81, org.springframework.security.web.header.HeaderWriterFilter@22896563, org.springframework.web.filter.CorsFilter@6c957807, org.springframework.security.web.authentication.logout.LogoutFilter@789e7ca, com.blog.filter.JwtAuthenticationFilter@56478522, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@5888b01d, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@5acd7897, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@b36d3d0, org.springframework.security.web.session.SessionManagementFilter@100f2694, org.springframework.security.web.access.ExceptionTranslationFilter@4009c7cb, org.springframework.security.web.access.intercept.AuthorizationFilter@71f72ffd]
2025-09-02 09:48:39.194 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-09-02 09:48:39.217 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/api'
2025-09-02 09:48:39.224 [main] INFO  com.blog.BlogApplication - Started BlogApplication in 9.095 seconds (process running for 9.521)
2025-09-02 09:48:59.303 [http-nio-8080-exec-2] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-09-02 09:48:59.304 [http-nio-8080-exec-2] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-09-02 09:48:59.306 [http-nio-8080-exec-2] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-09-02 09:48:59.757 [http-nio-8080-exec-2] WARN  o.s.web.servlet.handler.HandlerMappingIntrospector - Cache miss for REQUEST dispatch to '/api/users/me' (previous null). Performing MatchableHandlerMapping lookup. This is logged once only at WARN level, and every time at TRACE.
2025-09-02 09:48:59.925 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:48:59.962 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:49:00.002 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 09:49:00.313 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 09:49:00.313 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 09:49:00.331 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:49:00.335 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:49:00.338 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:49:00.342 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:49:00.345 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:49:00.345 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 09:49:00.347 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:49:00.349 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:49:00.350 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:49:00.352 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:49:00.361 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:49:00.367 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:49:00.370 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:49:00.372 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:49:00.374 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:49:00.376 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:49:00.378 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:49:00.380 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:49:00.382 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:49:00.385 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:49:00.387 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:49:00.389 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:49:00.393 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:49:00.396 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:49:00.398 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:49:00.488 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 09:49:00.836 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-02 09:49:01.107 [http-nio-8080-exec-9] ERROR com.blog.exception.GlobalExceptionHandler - 未捕获的异常: No static resource announcements/unread.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource announcements/unread.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-09-02 09:49:01.215 [http-nio-8080-exec-10] ERROR com.blog.exception.GlobalExceptionHandler - 未捕获的异常: No static resource announcements/unread.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource announcements/unread.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-09-02 09:50:20.929 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-09-02 09:50:20.982 [main] INFO  com.blog.BlogApplication - Starting BlogApplication using Java 17.0.2 with PID 26748 (D:\java\boke\backend\target\classes started by Redmi in D:\java\boke\backend)
2025-09-02 09:50:20.987 [main] DEBUG com.blog.BlogApplication - Running with Spring Boot v3.2.0, Spring v6.1.1
2025-09-02 09:50:20.988 [main] INFO  com.blog.BlogApplication - No active profile set, falling back to 1 default profile: "default"
2025-09-02 09:50:21.826 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-02 09:50:21.828 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-09-02 09:50:22.034 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 199 ms. Found 15 JPA repository interfaces.
2025-09-02 09:50:22.051 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-02 09:50:22.053 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-09-02 09:50:22.069 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.AnnouncementRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:50:22.070 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleLikeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:50:22.071 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:50:22.072 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:50:22.072 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CategoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:50:22.073 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CommentLikeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:50:22.073 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CommentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:50:22.073 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.FileInfoRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:50:22.074 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.LoginLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:50:22.074 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.NotificationRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:50:22.074 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.OperationLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:50:22.074 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.SecuritySettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:50:22.075 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.TagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:50:22.076 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.UserAnnouncementReadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:50:22.076 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:50:22.076 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 14 ms. Found 0 Redis repository interfaces.
2025-09-02 09:50:22.972 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-09-02 09:50:22.982 [main] INFO  org.apache.catalina.core.AprLifecycleListener - An older version [1.2.38] of the Apache Tomcat Native library is installed, while Tomcat recommends a minimum version of [2.0.5]
2025-09-02 09:50:22.983 [main] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [1.2.38] using APR version [1.7.4].
2025-09-02 09:50:22.989 [main] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 1.1.1v  1 Aug 2023]
2025-09-02 09:50:22.999 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-09-02 09:50:23.001 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-09-02 09:50:23.002 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.16]
2025-09-02 09:50:23.093 [main] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] - Initializing Spring embedded WebApplicationContext
2025-09-02 09:50:23.093 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2051 ms
2025-09-02 09:50:23.493 [main] DEBUG com.blog.filter.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-09-02 09:50:23.624 [main] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-09-02 09:50:23.734 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.3.1.Final
2025-09-02 09:50:23.778 [main] INFO  o.hibernate.cache.internal.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-09-02 09:50:23.989 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-09-02 09:50:24.016 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-09-02 09:50:24.167 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@1f4cb17b
2025-09-02 09:50:24.169 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-09-02 09:50:24.212 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-09-02 09:50:24.213 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-09-02 09:50:25.302 [main] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-09-02 09:50:25.422 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-09-02 09:50:25.751 [main] INFO  o.s.data.jpa.repository.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-09-02 09:50:28.213 [main] WARN  o.s.b.a.s.s.UserDetailsServiceAutoConfiguration - 

Using generated security password: bdfe4032-fb02-44f4-9920-ed6224139f68

This generated password is for development use only. Your security configuration must be updated before running your application in production.

2025-09-02 09:50:28.651 [main] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@53a7e677, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@33d9d098, org.springframework.security.web.context.SecurityContextHolderFilter@40bd544, org.springframework.security.web.header.HeaderWriterFilter@1c4e64b5, org.springframework.web.filter.CorsFilter@24191de8, org.springframework.security.web.authentication.logout.LogoutFilter@5d523725, com.blog.filter.JwtAuthenticationFilter@1d2046bb, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@2cec2052, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@4d5533, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@5ac60f01, org.springframework.security.web.session.SessionManagementFilter@24659777, org.springframework.security.web.access.ExceptionTranslationFilter@67eb9ab1, org.springframework.security.web.access.intercept.AuthorizationFilter@af3b487]
2025-09-02 09:50:29.108 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-09-02 09:50:29.126 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/api'
2025-09-02 09:50:29.132 [main] INFO  com.blog.BlogApplication - Started BlogApplication in 8.778 seconds (process running for 9.215)
2025-09-02 09:50:41.578 [http-nio-8080-exec-1] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-09-02 09:50:41.579 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-09-02 09:50:41.581 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-09-02 09:50:41.989 [http-nio-8080-exec-1] WARN  o.s.web.servlet.handler.HandlerMappingIntrospector - Cache miss for REQUEST dispatch to '/api/users/me' (previous null). Performing MatchableHandlerMapping lookup. This is logged once only at WARN level, and every time at TRACE.
2025-09-02 09:50:42.137 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:50:42.182 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:50:42.238 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 09:50:42.625 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 09:50:42.625 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 09:50:42.638 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:50:42.643 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:50:42.645 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:50:42.649 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:50:42.652 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:50:42.652 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 09:50:42.654 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:50:42.655 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:50:42.656 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:50:42.658 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:50:42.666 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:50:42.671 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:50:42.674 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:50:42.676 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:50:42.678 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:50:42.679 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:50:42.682 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:50:42.683 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:50:42.685 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:50:42.688 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:50:42.690 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:50:42.692 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:50:42.696 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:50:42.698 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:50:42.701 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:50:42.785 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 09:50:43.136 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-02 09:50:43.408 [http-nio-8080-exec-9] ERROR com.blog.exception.GlobalExceptionHandler - 未捕获的异常: No static resource announcements/unread.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource announcements/unread.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-09-02 09:50:43.514 [http-nio-8080-exec-4] ERROR com.blog.exception.GlobalExceptionHandler - 未捕获的异常: No static resource announcements/unread.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource announcements/unread.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-09-02 09:52:45.713 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-09-02 09:52:45.775 [main] INFO  com.blog.BlogApplication - Starting BlogApplication using Java 17.0.2 with PID 4892 (D:\java\boke\backend\target\classes started by Redmi in D:\java\boke\backend)
2025-09-02 09:52:45.775 [main] DEBUG com.blog.BlogApplication - Running with Spring Boot v3.2.0, Spring v6.1.1
2025-09-02 09:52:45.776 [main] INFO  com.blog.BlogApplication - No active profile set, falling back to 1 default profile: "default"
2025-09-02 09:52:46.662 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-02 09:52:46.663 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-09-02 09:52:46.860 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 189 ms. Found 15 JPA repository interfaces.
2025-09-02 09:52:46.876 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-02 09:52:46.877 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-09-02 09:52:46.892 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.AnnouncementRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:52:46.893 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleLikeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:52:46.894 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:52:46.896 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:52:46.896 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CategoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:52:46.897 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CommentLikeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:52:46.897 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CommentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:52:46.897 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.FileInfoRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:52:46.898 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.LoginLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:52:46.898 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.NotificationRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:52:46.899 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.OperationLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:52:46.899 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.SecuritySettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:52:46.899 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.TagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:52:46.900 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.UserAnnouncementReadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:52:46.901 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 09:52:46.901 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 15 ms. Found 0 Redis repository interfaces.
2025-09-02 09:52:47.834 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-09-02 09:52:47.843 [main] INFO  org.apache.catalina.core.AprLifecycleListener - An older version [1.2.38] of the Apache Tomcat Native library is installed, while Tomcat recommends a minimum version of [2.0.5]
2025-09-02 09:52:47.843 [main] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [1.2.38] using APR version [1.7.4].
2025-09-02 09:52:47.847 [main] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 1.1.1v  1 Aug 2023]
2025-09-02 09:52:47.859 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-09-02 09:52:47.861 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-09-02 09:52:47.861 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.16]
2025-09-02 09:52:47.954 [main] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] - Initializing Spring embedded WebApplicationContext
2025-09-02 09:52:47.954 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2133 ms
2025-09-02 09:52:48.338 [main] DEBUG com.blog.filter.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-09-02 09:52:48.476 [main] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-09-02 09:52:48.537 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.3.1.Final
2025-09-02 09:52:48.579 [main] INFO  o.hibernate.cache.internal.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-09-02 09:52:48.801 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-09-02 09:52:48.833 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-09-02 09:52:48.997 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@1bf52f10
2025-09-02 09:52:48.999 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-09-02 09:52:49.048 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-09-02 09:52:49.050 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-09-02 09:52:50.267 [main] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-09-02 09:52:50.424 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-09-02 09:52:50.754 [main] INFO  o.s.data.jpa.repository.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-09-02 09:52:52.930 [main] WARN  o.s.b.a.s.s.UserDetailsServiceAutoConfiguration - 

Using generated security password: bd5a65c8-e554-4407-af28-61fc7e5b79ad

This generated password is for development use only. Your security configuration must be updated before running your application in production.

2025-09-02 09:52:53.332 [main] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@33d9d098, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@24191de8, org.springframework.security.web.context.SecurityContextHolderFilter@c5d249d, org.springframework.security.web.header.HeaderWriterFilter@587a664e, org.springframework.web.filter.CorsFilter@5ac60f01, org.springframework.security.web.authentication.logout.LogoutFilter@100f2694, com.blog.filter.JwtAuthenticationFilter@1d2046bb, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@4d5533, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@5ab6118b, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@36bece70, org.springframework.security.web.session.SessionManagementFilter@38330440, org.springframework.security.web.access.ExceptionTranslationFilter@3994c5fa, org.springframework.security.web.access.intercept.AuthorizationFilter@45f5fdd]
2025-09-02 09:52:53.746 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-09-02 09:52:53.766 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/api'
2025-09-02 09:52:53.772 [main] INFO  com.blog.BlogApplication - Started BlogApplication in 8.645 seconds (process running for 9.086)
2025-09-02 09:53:00.873 [http-nio-8080-exec-1] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-09-02 09:53:00.881 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-09-02 09:53:00.889 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 3 ms
2025-09-02 09:53:01.415 [http-nio-8080-exec-1] WARN  o.s.web.servlet.handler.HandlerMappingIntrospector - Cache miss for REQUEST dispatch to '/api/users/me' (previous null). Performing MatchableHandlerMapping lookup. This is logged once only at WARN level, and every time at TRACE.
2025-09-02 09:53:01.583 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:53:01.621 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:53:01.663 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 09:53:01.953 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 09:53:01.953 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 09:53:01.966 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:53:01.971 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:53:01.974 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:53:01.978 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:53:01.980 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 09:53:01.980 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:53:01.983 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:53:01.983 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:53:01.985 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:53:01.985 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:53:01.994 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:53:02.000 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:53:02.002 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:53:02.004 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:53:02.006 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:53:02.008 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:53:02.010 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:53:02.012 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:53:02.015 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:53:02.018 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:53:02.019 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:53:02.021 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:53:02.024 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:53:02.027 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:53:02.030 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:53:02.092 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 09:53:02.431 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-02 09:53:02.706 [http-nio-8080-exec-9] ERROR com.blog.exception.GlobalExceptionHandler - 未捕获的异常: No static resource announcements/unread.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource announcements/unread.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-09-02 09:53:02.848 [http-nio-8080-exec-7] ERROR com.blog.exception.GlobalExceptionHandler - 未捕获的异常: No static resource announcements/unread.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource announcements/unread.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-09-02 09:54:59.717 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:54:59.725 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:54:59.730 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 09:55:15.034 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:55:15.040 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:55:15.046 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 09:55:17.339 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:55:17.343 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:55:17.349 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 09:55:17.911 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 09:55:17.916 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 09:55:17.927 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:55:17.930 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 09:55:17.931 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:55:17.934 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:55:17.934 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:55:17.937 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:55:17.937 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:55:17.939 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:55:17.939 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:55:17.942 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:55:17.942 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:55:17.945 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:55:17.945 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:55:17.947 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:55:17.950 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:55:17.953 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:55:17.966 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:55:17.982 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:55:17.993 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:55:18.001 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:55:18.010 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:55:18.026 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:55:18.028 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:55:18.031 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:55:18.034 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:55:18.108 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 09:55:18.459 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-02 09:55:18.733 [http-nio-8080-exec-1] ERROR com.blog.exception.GlobalExceptionHandler - 未捕获的异常: No static resource announcements/unread.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource announcements/unread.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-09-02 09:55:18.808 [http-nio-8080-exec-3] ERROR com.blog.exception.GlobalExceptionHandler - 未捕获的异常: No static resource announcements/unread.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource announcements/unread.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-09-02 09:55:27.173 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:55:27.178 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:55:27.182 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 09:55:27.431 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 09:55:27.431 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 09:55:27.435 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:55:27.435 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 09:55:27.438 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:55:27.438 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:55:27.461 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:55:27.466 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:55:27.466 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:55:27.470 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:55:27.471 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:55:27.473 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:55:27.473 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:55:27.476 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:55:27.476 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:55:27.480 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:55:27.480 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:55:27.484 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:55:27.490 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:55:27.493 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:55:27.495 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:55:27.499 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:55:27.501 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:55:27.504 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:55:27.506 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:55:27.509 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:55:27.511 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:55:27.556 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 09:55:27.895 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-02 09:55:28.164 [http-nio-8080-exec-1] ERROR com.blog.exception.GlobalExceptionHandler - 未捕获的异常: No static resource announcements/unread.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource announcements/unread.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-09-02 09:55:28.346 [http-nio-8080-exec-3] ERROR com.blog.exception.GlobalExceptionHandler - 未捕获的异常: No static resource announcements/unread.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource announcements/unread.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-09-02 09:55:37.313 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 09:55:37.318 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:55:37.323 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 09:55:37.581 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 09:55:37.582 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 09:55:37.586 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 09:55:37.586 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:55:37.588 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:55:37.589 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:55:37.590 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:55:37.592 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:55:37.592 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:55:37.594 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:55:37.594 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:55:37.596 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:55:37.596 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:55:37.598 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:55:37.598 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:55:37.600 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:55:37.600 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 09:55:37.602 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:55:37.604 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:55:37.606 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 09:55:37.608 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:55:37.610 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:55:37.611 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:55:37.613 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:55:37.614 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 09:55:37.616 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 09:55:37.618 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 09:55:37.664 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 09:55:37.958 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-02 09:55:38.075 [http-nio-8080-exec-1] ERROR com.blog.exception.GlobalExceptionHandler - 未捕获的异常: No static resource announcements/unread.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource announcements/unread.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-09-02 09:55:38.824 [http-nio-8080-exec-3] ERROR com.blog.exception.GlobalExceptionHandler - 未捕获的异常: No static resource announcements/unread.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource announcements/unread.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-09-02 09:57:30.216 [http-nio-8080-exec-8] ERROR com.blog.exception.GlobalExceptionHandler - 未捕获的异常: No static resource announcements/unread.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource announcements/unread.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-09-02 10:00:02.512 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-09-02 10:00:02.577 [main] INFO  com.blog.BlogApplication - Starting BlogApplication using Java 17.0.2 with PID 1916 (D:\java\boke\backend\target\classes started by Redmi in D:\java\boke\backend)
2025-09-02 10:00:02.578 [main] DEBUG com.blog.BlogApplication - Running with Spring Boot v3.2.0, Spring v6.1.1
2025-09-02 10:00:02.579 [main] INFO  com.blog.BlogApplication - No active profile set, falling back to 1 default profile: "default"
2025-09-02 10:00:03.481 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-02 10:00:03.483 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-09-02 10:00:03.685 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 195 ms. Found 15 JPA repository interfaces.
2025-09-02 10:00:03.701 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-02 10:00:03.703 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-09-02 10:00:03.717 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.AnnouncementRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:00:03.718 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleLikeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:00:03.719 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:00:03.720 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:00:03.721 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CategoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:00:03.721 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CommentLikeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:00:03.721 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CommentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:00:03.722 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.FileInfoRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:00:03.722 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.LoginLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:00:03.722 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.NotificationRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:00:03.722 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.OperationLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:00:03.723 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.SecuritySettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:00:03.723 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.TagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:00:03.724 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.UserAnnouncementReadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:00:03.725 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:00:03.726 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 15 ms. Found 0 Redis repository interfaces.
2025-09-02 10:00:04.647 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-09-02 10:00:04.656 [main] INFO  org.apache.catalina.core.AprLifecycleListener - An older version [1.2.38] of the Apache Tomcat Native library is installed, while Tomcat recommends a minimum version of [2.0.5]
2025-09-02 10:00:04.656 [main] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [1.2.38] using APR version [1.7.4].
2025-09-02 10:00:04.660 [main] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 1.1.1v  1 Aug 2023]
2025-09-02 10:00:04.672 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-09-02 10:00:04.675 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-09-02 10:00:04.676 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.16]
2025-09-02 10:00:04.800 [main] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] - Initializing Spring embedded WebApplicationContext
2025-09-02 10:00:04.800 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2169 ms
2025-09-02 10:00:05.214 [main] DEBUG com.blog.filter.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-09-02 10:00:05.350 [main] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-09-02 10:00:05.418 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.3.1.Final
2025-09-02 10:00:05.461 [main] INFO  o.hibernate.cache.internal.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-09-02 10:00:05.694 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-09-02 10:00:05.724 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-09-02 10:00:05.871 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@73e25780
2025-09-02 10:00:05.873 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-09-02 10:00:05.916 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-09-02 10:00:05.918 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-09-02 10:00:07.168 [main] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-09-02 10:00:07.328 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-09-02 10:00:07.697 [main] INFO  o.s.data.jpa.repository.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-09-02 10:00:10.265 [main] WARN  o.s.b.a.s.s.UserDetailsServiceAutoConfiguration - 

Using generated security password: 04bcbf96-5d7a-4325-a46b-c3e70bf4e53b

This generated password is for development use only. Your security configuration must be updated before running your application in production.

2025-09-02 10:00:10.723 [main] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@24191de8, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@5ac60f01, org.springframework.security.web.context.SecurityContextHolderFilter@2cec2052, org.springframework.security.web.header.HeaderWriterFilter@637f41e2, org.springframework.web.filter.CorsFilter@36bece70, org.springframework.security.web.authentication.logout.LogoutFilter@50769995, com.blog.filter.JwtAuthenticationFilter@7bce9ce4, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@5ab6118b, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@3faabf8c, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@4b9e952f, org.springframework.security.web.session.SessionManagementFilter@27a17581, org.springframework.security.web.access.ExceptionTranslationFilter@1c4e64b5, org.springframework.security.web.access.intercept.AuthorizationFilter@53a7e677]
2025-09-02 10:00:11.184 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-09-02 10:00:11.206 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/api'
2025-09-02 10:00:11.212 [main] INFO  com.blog.BlogApplication - Started BlogApplication in 9.349 seconds (process running for 9.819)
2025-09-02 10:00:21.989 [http-nio-8080-exec-1] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-09-02 10:00:21.990 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-09-02 10:00:21.992 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-09-02 10:00:22.445 [http-nio-8080-exec-1] WARN  o.s.web.servlet.handler.HandlerMappingIntrospector - Cache miss for REQUEST dispatch to '/api/users/me' (previous null). Performing MatchableHandlerMapping lookup. This is logged once only at WARN level, and every time at TRACE.
2025-09-02 10:00:22.600 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 10:00:22.633 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 10:00:22.672 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 10:00:23.039 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 10:00:23.039 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 10:00:23.056 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 10:00:23.063 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 10:00:23.066 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 10:00:23.069 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 10:00:23.070 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 10:00:23.072 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 10:00:23.074 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 10:00:23.074 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 10:00:23.077 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 10:00:23.077 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 10:00:23.086 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 10:00:23.092 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 10:00:23.094 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 10:00:23.096 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 10:00:23.098 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 10:00:23.100 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 10:00:23.102 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 10:00:23.104 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 10:00:23.106 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 10:00:23.108 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 10:00:23.110 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 10:00:23.113 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 10:00:23.117 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 10:00:23.120 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 10:00:23.122 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 10:00:23.203 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 10:00:23.568 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-02 10:00:23.835 [http-nio-8080-exec-9] ERROR com.blog.exception.GlobalExceptionHandler - 未捕获的异常: No static resource announcements/unread.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource announcements/unread.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-09-02 10:00:23.933 [http-nio-8080-exec-3] ERROR com.blog.exception.GlobalExceptionHandler - 未捕获的异常: No static resource announcements/unread.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource announcements/unread.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:74)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-09-02 10:02:01.153 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-09-02 10:02:01.214 [main] INFO  com.blog.BlogApplication - Starting BlogApplication using Java 17.0.2 with PID 34856 (D:\java\boke\backend\target\classes started by Redmi in D:\java\boke\backend)
2025-09-02 10:02:01.215 [main] DEBUG com.blog.BlogApplication - Running with Spring Boot v3.2.0, Spring v6.1.1
2025-09-02 10:02:01.216 [main] INFO  com.blog.BlogApplication - No active profile set, falling back to 1 default profile: "default"
2025-09-02 10:02:02.131 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-02 10:02:02.134 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-09-02 10:02:02.522 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 380 ms. Found 15 JPA repository interfaces.
2025-09-02 10:02:02.548 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-02 10:02:02.550 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-09-02 10:02:02.573 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.AnnouncementRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:02:02.574 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleLikeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:02:02.576 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:02:02.576 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:02:02.577 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CategoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:02:02.578 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CommentLikeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:02:02.578 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CommentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:02:02.579 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.FileInfoRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:02:02.580 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.LoginLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:02:02.580 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.NotificationRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:02:02.581 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.OperationLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:02:02.582 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.SecuritySettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:02:02.583 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.TagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:02:02.584 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.UserAnnouncementReadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:02:02.585 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:02:02.586 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 25 ms. Found 0 Redis repository interfaces.
2025-09-02 10:02:03.555 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-09-02 10:02:03.563 [main] INFO  org.apache.catalina.core.AprLifecycleListener - An older version [1.2.38] of the Apache Tomcat Native library is installed, while Tomcat recommends a minimum version of [2.0.5]
2025-09-02 10:02:03.564 [main] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [1.2.38] using APR version [1.7.4].
2025-09-02 10:02:03.567 [main] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 1.1.1v  1 Aug 2023]
2025-09-02 10:02:03.579 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-09-02 10:02:03.581 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-09-02 10:02:03.582 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.16]
2025-09-02 10:02:03.675 [main] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] - Initializing Spring embedded WebApplicationContext
2025-09-02 10:02:03.675 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2416 ms
2025-09-02 10:02:04.084 [main] DEBUG com.blog.filter.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-09-02 10:02:04.253 [main] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-09-02 10:02:04.320 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.3.1.Final
2025-09-02 10:02:04.356 [main] INFO  o.hibernate.cache.internal.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-09-02 10:02:04.623 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-09-02 10:02:04.653 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-09-02 10:02:04.828 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@6148827c
2025-09-02 10:02:04.830 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-09-02 10:02:04.874 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-09-02 10:02:04.876 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-09-02 10:02:06.054 [main] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-09-02 10:02:06.187 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-09-02 10:02:06.529 [main] INFO  o.s.data.jpa.repository.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-09-02 10:02:08.827 [main] WARN  o.s.b.a.s.s.UserDetailsServiceAutoConfiguration - 

Using generated security password: 2df1658d-77d6-424f-934a-c96259a8dba2

This generated password is for development use only. Your security configuration must be updated before running your application in production.

2025-09-02 10:02:09.370 [main] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@5ac60f01, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@36bece70, org.springframework.security.web.context.SecurityContextHolderFilter@4d5533, org.springframework.security.web.header.HeaderWriterFilter@7c5be362, org.springframework.web.filter.CorsFilter@4b9e952f, org.springframework.security.web.authentication.logout.LogoutFilter@19a36c8f, com.blog.filter.JwtAuthenticationFilter@fee881, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@3faabf8c, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@7209f69b, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@278427e9, org.springframework.security.web.session.SessionManagementFilter@40bd544, org.springframework.security.web.access.ExceptionTranslationFilter@587a664e, org.springframework.security.web.access.intercept.AuthorizationFilter@33d9d098]
2025-09-02 10:02:09.896 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-09-02 10:02:09.917 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/api'
2025-09-02 10:02:09.923 [main] INFO  com.blog.BlogApplication - Started BlogApplication in 9.438 seconds (process running for 9.952)
2025-09-02 10:02:23.589 [http-nio-8080-exec-1] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-09-02 10:02:23.590 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-09-02 10:02:23.591 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-09-02 10:02:23.611 [http-nio-8080-exec-1] WARN  o.s.web.servlet.handler.HandlerMappingIntrospector - Cache miss for REQUEST dispatch to '/api/announcements/unread' (previous null). Performing MatchableHandlerMapping lookup. This is logged once only at WARN level, and every time at TRACE.
2025-09-02 10:04:16.649 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-09-02 10:04:16.711 [main] INFO  com.blog.BlogApplication - Starting BlogApplication using Java 17.0.2 with PID 61040 (D:\java\boke\backend\target\classes started by Redmi in D:\java\boke\backend)
2025-09-02 10:04:16.712 [main] DEBUG com.blog.BlogApplication - Running with Spring Boot v3.2.0, Spring v6.1.1
2025-09-02 10:04:16.714 [main] INFO  com.blog.BlogApplication - No active profile set, falling back to 1 default profile: "default"
2025-09-02 10:04:17.580 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-02 10:04:17.582 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-09-02 10:04:17.798 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 209 ms. Found 15 JPA repository interfaces.
2025-09-02 10:04:17.817 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-02 10:04:17.818 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-09-02 10:04:17.839 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.AnnouncementRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:04:17.840 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleLikeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:04:17.842 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:04:17.843 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:04:17.843 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CategoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:04:17.844 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CommentLikeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:04:17.845 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CommentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:04:17.845 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.FileInfoRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:04:17.846 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.LoginLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:04:17.846 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.NotificationRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:04:17.847 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.OperationLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:04:17.848 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.SecuritySettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:04:17.848 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.TagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:04:17.849 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.UserAnnouncementReadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:04:17.850 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:04:17.850 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 21 ms. Found 0 Redis repository interfaces.
2025-09-02 10:04:18.884 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-09-02 10:04:18.893 [main] INFO  org.apache.catalina.core.AprLifecycleListener - An older version [1.2.38] of the Apache Tomcat Native library is installed, while Tomcat recommends a minimum version of [2.0.5]
2025-09-02 10:04:18.893 [main] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [1.2.38] using APR version [1.7.4].
2025-09-02 10:04:18.901 [main] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 1.1.1v  1 Aug 2023]
2025-09-02 10:04:18.909 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-09-02 10:04:18.912 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-09-02 10:04:18.912 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.16]
2025-09-02 10:04:18.996 [main] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] - Initializing Spring embedded WebApplicationContext
2025-09-02 10:04:18.997 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2235 ms
2025-09-02 10:04:19.376 [main] DEBUG com.blog.filter.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-09-02 10:04:19.518 [main] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-09-02 10:04:19.591 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.3.1.Final
2025-09-02 10:04:19.630 [main] INFO  o.hibernate.cache.internal.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-09-02 10:04:19.893 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-09-02 10:04:19.922 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-09-02 10:04:20.123 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@393bcd6b
2025-09-02 10:04:20.125 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-09-02 10:04:20.175 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-09-02 10:04:20.176 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-09-02 10:04:21.296 [main] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-09-02 10:04:21.413 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-09-02 10:04:21.759 [main] INFO  o.s.data.jpa.repository.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-09-02 10:04:24.138 [main] WARN  o.s.b.a.s.s.UserDetailsServiceAutoConfiguration - 

Using generated security password: 8f61133d-8d32-42bf-891f-40ea9936a2bc

This generated password is for development use only. Your security configuration must be updated before running your application in production.

2025-09-02 10:04:24.608 [main] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@3468192e, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@7d21fdde, org.springframework.security.web.context.SecurityContextHolderFilter@25ebb657, org.springframework.security.web.header.HeaderWriterFilter@1bd09bbc, org.springframework.web.filter.CorsFilter@189df3b9, org.springframework.security.web.authentication.logout.LogoutFilter@3bcb7aa9, com.blog.filter.JwtAuthenticationFilter@7e1a9173, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@4cd40430, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@d498f9b, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@48b2103, org.springframework.security.web.session.SessionManagementFilter@1807c124, org.springframework.security.web.access.ExceptionTranslationFilter@4b7c5ab5, org.springframework.security.web.access.intercept.AuthorizationFilter@ddd108b]
2025-09-02 10:04:25.042 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-09-02 10:04:25.061 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/api'
2025-09-02 10:04:25.067 [main] INFO  com.blog.BlogApplication - Started BlogApplication in 9.004 seconds (process running for 9.436)
2025-09-02 10:04:59.071 [http-nio-8080-exec-1] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-09-02 10:04:59.072 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-09-02 10:04:59.073 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-09-02 10:04:59.091 [http-nio-8080-exec-1] WARN  o.s.web.servlet.handler.HandlerMappingIntrospector - Cache miss for REQUEST dispatch to '/api/announcements/unread' (previous null). Performing MatchableHandlerMapping lookup. This is logged once only at WARN level, and every time at TRACE.
2025-09-02 10:06:30.734 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-09-02 10:06:30.789 [main] INFO  com.blog.BlogApplication - Starting BlogApplication using Java 17.0.2 with PID 14604 (D:\java\boke\backend\target\classes started by Redmi in D:\java\boke\backend)
2025-09-02 10:06:30.790 [main] DEBUG com.blog.BlogApplication - Running with Spring Boot v3.2.0, Spring v6.1.1
2025-09-02 10:06:30.790 [main] INFO  com.blog.BlogApplication - No active profile set, falling back to 1 default profile: "default"
2025-09-02 10:06:31.642 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-02 10:06:31.644 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-09-02 10:06:31.842 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 192 ms. Found 15 JPA repository interfaces.
2025-09-02 10:06:31.860 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-02 10:06:31.861 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-09-02 10:06:31.876 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.AnnouncementRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:06:31.878 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleLikeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:06:31.879 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:06:31.880 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:06:31.880 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CategoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:06:31.880 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CommentLikeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:06:31.881 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CommentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:06:31.881 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.FileInfoRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:06:31.881 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.LoginLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:06:31.881 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.NotificationRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:06:31.882 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.OperationLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:06:31.882 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.SecuritySettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:06:31.882 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.TagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:06:31.885 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.UserAnnouncementReadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:06:31.886 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:06:31.887 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 17 ms. Found 0 Redis repository interfaces.
2025-09-02 10:06:32.798 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-09-02 10:06:32.807 [main] INFO  org.apache.catalina.core.AprLifecycleListener - An older version [1.2.38] of the Apache Tomcat Native library is installed, while Tomcat recommends a minimum version of [2.0.5]
2025-09-02 10:06:32.807 [main] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [1.2.38] using APR version [1.7.4].
2025-09-02 10:06:32.810 [main] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 1.1.1v  1 Aug 2023]
2025-09-02 10:06:32.821 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-09-02 10:06:32.825 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-09-02 10:06:32.826 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.16]
2025-09-02 10:06:32.958 [main] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] - Initializing Spring embedded WebApplicationContext
2025-09-02 10:06:32.959 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2122 ms
2025-09-02 10:06:33.487 [main] DEBUG com.blog.filter.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-09-02 10:06:33.612 [main] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-09-02 10:06:33.667 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.3.1.Final
2025-09-02 10:06:33.702 [main] INFO  o.hibernate.cache.internal.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-09-02 10:06:33.925 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-09-02 10:06:33.956 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-09-02 10:06:34.159 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@22ab1b8a
2025-09-02 10:06:34.161 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-09-02 10:06:34.210 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-09-02 10:06:34.212 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-09-02 10:06:35.527 [main] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-09-02 10:06:35.703 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-09-02 10:06:36.066 [main] INFO  o.s.data.jpa.repository.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-09-02 10:06:38.278 [main] WARN  o.s.b.a.s.s.UserDetailsServiceAutoConfiguration - 

Using generated security password: d8d104fe-4d2a-428b-b9c4-d9e9742019d8

This generated password is for development use only. Your security configuration must be updated before running your application in production.

2025-09-02 10:06:38.761 [main] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@50769995, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@19a36c8f, org.springframework.security.web.context.SecurityContextHolderFilter@13df5b90, org.springframework.security.web.header.HeaderWriterFilter@123d3838, org.springframework.web.filter.CorsFilter@55048b81, org.springframework.security.web.authentication.logout.LogoutFilter@22896563, com.blog.filter.JwtAuthenticationFilter@6591f8ea, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@1f53503, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@229686ac, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@3c562c33, org.springframework.security.web.session.SessionManagementFilter@587a664e, org.springframework.security.web.access.ExceptionTranslationFilter@6c231af5, org.springframework.security.web.access.intercept.AuthorizationFilter@5d523725]
2025-09-02 10:06:39.184 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-09-02 10:06:39.203 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/api'
2025-09-02 10:06:39.209 [main] INFO  com.blog.BlogApplication - Started BlogApplication in 9.044 seconds (process running for 9.473)
2025-09-02 10:06:53.540 [http-nio-8080-exec-1] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-09-02 10:06:53.541 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-09-02 10:06:53.542 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-09-02 10:06:53.561 [http-nio-8080-exec-1] WARN  o.s.web.servlet.handler.HandlerMappingIntrospector - Cache miss for REQUEST dispatch to '/api/announcements/unread' (previous null). Performing MatchableHandlerMapping lookup. This is logged once only at WARN level, and every time at TRACE.
2025-09-02 10:11:27.771 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-09-02 10:11:27.823 [main] INFO  com.blog.BlogApplication - Starting BlogApplication using Java 17.0.2 with PID 28548 (D:\java\boke\backend\target\classes started by Redmi in D:\java\boke\backend)
2025-09-02 10:11:27.824 [main] DEBUG com.blog.BlogApplication - Running with Spring Boot v3.2.0, Spring v6.1.1
2025-09-02 10:11:27.825 [main] INFO  com.blog.BlogApplication - No active profile set, falling back to 1 default profile: "default"
2025-09-02 10:11:28.849 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-02 10:11:28.852 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-09-02 10:11:29.124 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 263 ms. Found 15 JPA repository interfaces.
2025-09-02 10:11:29.144 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-02 10:11:29.146 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-09-02 10:11:29.163 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.AnnouncementRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:11:29.163 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleLikeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:11:29.165 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:11:29.166 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:11:29.166 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CategoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:11:29.166 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CommentLikeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:11:29.167 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CommentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:11:29.167 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.FileInfoRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:11:29.167 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.LoginLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:11:29.168 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.NotificationRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:11:29.169 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.OperationLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:11:29.170 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.SecuritySettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:11:29.171 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.TagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:11:29.172 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.UserAnnouncementReadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:11:29.173 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:11:29.173 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 17 ms. Found 0 Redis repository interfaces.
2025-09-02 10:11:30.055 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-09-02 10:11:30.063 [main] INFO  org.apache.catalina.core.AprLifecycleListener - An older version [1.2.38] of the Apache Tomcat Native library is installed, while Tomcat recommends a minimum version of [2.0.5]
2025-09-02 10:11:30.064 [main] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [1.2.38] using APR version [1.7.4].
2025-09-02 10:11:30.072 [main] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 1.1.1v  1 Aug 2023]
2025-09-02 10:11:30.083 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-09-02 10:11:30.086 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-09-02 10:11:30.086 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.16]
2025-09-02 10:11:30.174 [main] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] - Initializing Spring embedded WebApplicationContext
2025-09-02 10:11:30.175 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2303 ms
2025-09-02 10:11:30.554 [main] DEBUG com.blog.filter.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-09-02 10:11:30.676 [main] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-09-02 10:11:30.728 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.3.1.Final
2025-09-02 10:11:30.764 [main] INFO  o.hibernate.cache.internal.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-09-02 10:11:30.985 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-09-02 10:11:31.013 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-09-02 10:11:31.174 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@21a0795f
2025-09-02 10:11:31.176 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-09-02 10:11:31.225 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-09-02 10:11:31.227 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-09-02 10:11:32.343 [main] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-09-02 10:11:32.468 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-09-02 10:11:32.856 [main] INFO  o.s.data.jpa.repository.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-09-02 10:11:35.343 [main] WARN  o.s.b.a.s.s.UserDetailsServiceAutoConfiguration - 

Using generated security password: b68e1a2b-e27d-46f9-b323-b6448ecfdab8

This generated password is for development use only. Your security configuration must be updated before running your application in production.

2025-09-02 10:11:35.753 [main] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@2b64a8cc, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@265e3e27, org.springframework.security.web.context.SecurityContextHolderFilter@1bd09bbc, org.springframework.security.web.header.HeaderWriterFilter@64b752c4, org.springframework.web.filter.CorsFilter@3bcb7aa9, org.springframework.security.web.authentication.logout.LogoutFilter@5ef49a1a, com.blog.filter.JwtAuthenticationFilter@5dd747c1, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@24659777, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@38330440, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@af3b487, org.springframework.security.web.session.SessionManagementFilter@229686ac, org.springframework.security.web.access.ExceptionTranslationFilter@1270fd7c, org.springframework.security.web.access.intercept.AuthorizationFilter@5888b01d]
2025-09-02 10:11:36.194 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-09-02 10:11:36.218 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/api'
2025-09-02 10:11:36.225 [main] INFO  com.blog.BlogApplication - Started BlogApplication in 8.966 seconds (process running for 9.389)
2025-09-02 10:13:19.106 [SpringApplicationShutdownHook] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-09-02 10:13:19.108 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-09-02 10:13:19.117 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-09-02 10:13:59.330 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-09-02 10:13:59.384 [main] INFO  com.blog.BlogApplication - Starting BlogApplication using Java 17.0.2 with PID 29312 (D:\java\boke\backend\target\classes started by Redmi in D:\java\boke\backend)
2025-09-02 10:13:59.384 [main] DEBUG com.blog.BlogApplication - Running with Spring Boot v3.2.0, Spring v6.1.1
2025-09-02 10:13:59.391 [main] INFO  com.blog.BlogApplication - No active profile set, falling back to 1 default profile: "default"
2025-09-02 10:14:00.299 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-02 10:14:00.301 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-09-02 10:14:00.522 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 214 ms. Found 15 JPA repository interfaces.
2025-09-02 10:14:00.538 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-02 10:14:00.540 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-09-02 10:14:00.557 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.AnnouncementRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:14:00.559 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleLikeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:14:00.560 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:14:00.560 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:14:00.561 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CategoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:14:00.561 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CommentLikeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:14:00.562 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CommentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:14:00.562 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.FileInfoRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:14:00.562 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.LoginLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:14:00.563 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.NotificationRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:14:00.563 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.OperationLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:14:00.563 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.SecuritySettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:14:00.571 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.TagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:14:00.574 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.UserAnnouncementReadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:14:00.575 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:14:00.576 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 26 ms. Found 0 Redis repository interfaces.
2025-09-02 10:14:01.537 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-09-02 10:14:01.545 [main] INFO  org.apache.catalina.core.AprLifecycleListener - An older version [1.2.38] of the Apache Tomcat Native library is installed, while Tomcat recommends a minimum version of [2.0.5]
2025-09-02 10:14:01.545 [main] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [1.2.38] using APR version [1.7.4].
2025-09-02 10:14:01.548 [main] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 1.1.1v  1 Aug 2023]
2025-09-02 10:14:01.557 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-09-02 10:14:01.560 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-09-02 10:14:01.560 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.16]
2025-09-02 10:14:01.670 [main] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] - Initializing Spring embedded WebApplicationContext
2025-09-02 10:14:01.671 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2230 ms
2025-09-02 10:14:02.086 [main] DEBUG com.blog.filter.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-09-02 10:14:02.203 [main] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-09-02 10:14:02.255 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.3.1.Final
2025-09-02 10:14:02.290 [main] INFO  o.hibernate.cache.internal.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-09-02 10:14:02.508 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-09-02 10:14:02.538 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-09-02 10:14:02.696 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@301e5d23
2025-09-02 10:14:02.698 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-09-02 10:14:02.753 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-09-02 10:14:02.755 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-09-02 10:14:03.943 [main] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-09-02 10:14:04.058 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-09-02 10:14:04.390 [main] INFO  o.s.data.jpa.repository.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-09-02 10:14:06.607 [main] WARN  o.s.b.a.s.s.UserDetailsServiceAutoConfiguration - 

Using generated security password: aaed62ad-9d2e-4658-9d20-6927b9212f38

This generated password is for development use only. Your security configuration must be updated before running your application in production.

2025-09-02 10:14:07.123 [main] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@7d21fdde, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@189df3b9, org.springframework.security.web.context.SecurityContextHolderFilter@3c35d2f, org.springframework.security.web.header.HeaderWriterFilter@de5dd8c, org.springframework.web.filter.CorsFilter@48b2103, org.springframework.security.web.authentication.logout.LogoutFilter@af3b487, com.blog.filter.JwtAuthenticationFilter@636e4bf8, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@d498f9b, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@7568d96b, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@705ef9d5, org.springframework.security.web.session.SessionManagementFilter@7257b1e6, org.springframework.security.web.access.ExceptionTranslationFilter@3325fdf6, org.springframework.security.web.access.intercept.AuthorizationFilter@32d5cbf2]
2025-09-02 10:14:07.539 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-09-02 10:14:07.559 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/api'
2025-09-02 10:14:07.566 [main] INFO  com.blog.BlogApplication - Started BlogApplication in 8.816 seconds (process running for 9.236)
2025-09-02 10:14:11.865 [SpringApplicationShutdownHook] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-09-02 10:14:11.867 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-09-02 10:14:11.875 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-09-02 10:15:43.934 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-09-02 10:15:43.994 [main] INFO  com.blog.BlogApplication - Starting BlogApplication using Java 17.0.2 with PID 36552 (D:\java\boke\backend\target\classes started by Redmi in D:\java\boke\backend)
2025-09-02 10:15:43.995 [main] DEBUG com.blog.BlogApplication - Running with Spring Boot v3.2.0, Spring v6.1.1
2025-09-02 10:15:43.996 [main] INFO  com.blog.BlogApplication - No active profile set, falling back to 1 default profile: "default"
2025-09-02 10:15:44.944 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-02 10:15:44.946 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-09-02 10:15:45.160 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 207 ms. Found 15 JPA repository interfaces.
2025-09-02 10:15:45.176 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-02 10:15:45.178 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-09-02 10:15:45.196 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.AnnouncementRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:15:45.197 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleLikeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:15:45.198 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:15:45.198 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:15:45.198 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CategoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:15:45.199 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CommentLikeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:15:45.199 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CommentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:15:45.199 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.FileInfoRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:15:45.200 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.LoginLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:15:45.200 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.NotificationRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:15:45.200 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.OperationLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:15:45.201 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.SecuritySettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:15:45.201 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.TagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:15:45.203 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.UserAnnouncementReadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:15:45.204 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:15:45.204 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 17 ms. Found 0 Redis repository interfaces.
2025-09-02 10:15:46.173 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-09-02 10:15:46.181 [main] INFO  org.apache.catalina.core.AprLifecycleListener - An older version [1.2.38] of the Apache Tomcat Native library is installed, while Tomcat recommends a minimum version of [2.0.5]
2025-09-02 10:15:46.182 [main] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [1.2.38] using APR version [1.7.4].
2025-09-02 10:15:46.185 [main] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 1.1.1v  1 Aug 2023]
2025-09-02 10:15:46.200 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-09-02 10:15:46.203 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-09-02 10:15:46.203 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.16]
2025-09-02 10:15:46.309 [main] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] - Initializing Spring embedded WebApplicationContext
2025-09-02 10:15:46.310 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2262 ms
2025-09-02 10:15:46.731 [main] DEBUG com.blog.filter.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-09-02 10:15:46.862 [main] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-09-02 10:15:46.918 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.3.1.Final
2025-09-02 10:15:46.957 [main] INFO  o.hibernate.cache.internal.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-09-02 10:15:47.196 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-09-02 10:15:47.228 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-09-02 10:15:47.425 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@543ba2e1
2025-09-02 10:15:47.428 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-09-02 10:15:47.473 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-09-02 10:15:47.474 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-09-02 10:15:48.800 [main] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-09-02 10:15:48.933 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-09-02 10:15:49.265 [main] INFO  o.s.data.jpa.repository.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-09-02 10:15:51.448 [main] WARN  o.s.b.a.s.s.UserDetailsServiceAutoConfiguration - 

Using generated security password: a9b06608-6486-4c9b-98dc-2f44250dbed4

This generated password is for development use only. Your security configuration must be updated before running your application in production.

2025-09-02 10:15:51.867 [main] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@53a7e677, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@33d9d098, org.springframework.security.web.context.SecurityContextHolderFilter@40bd544, org.springframework.security.web.header.HeaderWriterFilter@1c4e64b5, org.springframework.web.filter.CorsFilter@24191de8, org.springframework.security.web.authentication.logout.LogoutFilter@5d523725, com.blog.filter.JwtAuthenticationFilter@248d3a, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@2cec2052, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@4d5533, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@5ac60f01, org.springframework.security.web.session.SessionManagementFilter@24659777, org.springframework.security.web.access.ExceptionTranslationFilter@67eb9ab1, org.springframework.security.web.access.intercept.AuthorizationFilter@af3b487]
2025-09-02 10:15:52.301 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-09-02 10:15:52.324 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/api'
2025-09-02 10:15:52.331 [main] INFO  com.blog.BlogApplication - Started BlogApplication in 9.073 seconds (process running for 9.492)
2025-09-02 10:15:59.152 [SpringApplicationShutdownHook] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-09-02 10:15:59.153 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-09-02 10:15:59.160 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-09-02 10:18:05.921 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-09-02 10:18:05.987 [main] INFO  com.blog.BlogApplication - Starting BlogApplication using Java 17.0.2 with PID 24784 (D:\java\boke\backend\target\classes started by Redmi in D:\java\boke\backend)
2025-09-02 10:18:05.988 [main] DEBUG com.blog.BlogApplication - Running with Spring Boot v3.2.0, Spring v6.1.1
2025-09-02 10:18:05.989 [main] INFO  com.blog.BlogApplication - No active profile set, falling back to 1 default profile: "default"
2025-09-02 10:18:07.060 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-02 10:18:07.062 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-09-02 10:18:07.263 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 193 ms. Found 15 JPA repository interfaces.
2025-09-02 10:18:07.279 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-02 10:18:07.282 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-09-02 10:18:07.297 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.AnnouncementRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:18:07.298 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleLikeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:18:07.299 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:18:07.300 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:18:07.300 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CategoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:18:07.300 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CommentLikeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:18:07.300 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CommentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:18:07.301 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.FileInfoRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:18:07.301 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.LoginLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:18:07.301 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.NotificationRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:18:07.301 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.OperationLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:18:07.302 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.SecuritySettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:18:07.302 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.TagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:18:07.303 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.UserAnnouncementReadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:18:07.303 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:18:07.303 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 13 ms. Found 0 Redis repository interfaces.
2025-09-02 10:18:08.174 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-09-02 10:18:08.183 [main] INFO  org.apache.catalina.core.AprLifecycleListener - An older version [1.2.38] of the Apache Tomcat Native library is installed, while Tomcat recommends a minimum version of [2.0.5]
2025-09-02 10:18:08.184 [main] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [1.2.38] using APR version [1.7.4].
2025-09-02 10:18:08.186 [main] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 1.1.1v  1 Aug 2023]
2025-09-02 10:18:08.195 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-09-02 10:18:08.198 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-09-02 10:18:08.199 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.16]
2025-09-02 10:18:08.302 [main] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] - Initializing Spring embedded WebApplicationContext
2025-09-02 10:18:08.303 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2267 ms
2025-09-02 10:18:08.669 [main] DEBUG com.blog.filter.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-09-02 10:18:08.791 [main] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-09-02 10:18:08.847 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.3.1.Final
2025-09-02 10:18:08.885 [main] INFO  o.hibernate.cache.internal.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-09-02 10:18:09.101 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-09-02 10:18:09.128 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-09-02 10:18:09.276 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@74787609
2025-09-02 10:18:09.279 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-09-02 10:18:09.336 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-09-02 10:18:09.339 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-09-02 10:18:10.778 [main] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-09-02 10:18:10.901 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-09-02 10:18:11.241 [main] INFO  o.s.data.jpa.repository.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-09-02 10:18:13.577 [main] WARN  o.s.b.a.s.s.UserDetailsServiceAutoConfiguration - 

Using generated security password: 131c4307-52a5-4513-825d-bcc2449c69bd

This generated password is for development use only. Your security configuration must be updated before running your application in production.

2025-09-02 10:18:13.992 [main] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@c2a4f3, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@41b6c627, org.springframework.security.web.context.SecurityContextHolderFilter@783d2f36, org.springframework.security.web.header.HeaderWriterFilter@58be6170, org.springframework.web.filter.CorsFilter@7226ecfb, org.springframework.security.web.authentication.logout.LogoutFilter@4d5533, com.blog.filter.JwtAuthenticationFilter@5d800a56, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@3a3a44f, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@123d3838, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@4009c7cb, org.springframework.security.web.session.SessionManagementFilter@58898064, org.springframework.security.web.access.ExceptionTranslationFilter@db850a, org.springframework.security.web.access.intercept.AuthorizationFilter@7568d96b]
2025-09-02 10:18:14.415 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-09-02 10:18:14.435 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/api'
2025-09-02 10:18:14.442 [main] INFO  com.blog.BlogApplication - Started BlogApplication in 9.11 seconds (process running for 9.559)
2025-09-02 10:18:22.410 [http-nio-8080-exec-2] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-09-02 10:18:22.412 [http-nio-8080-exec-2] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-09-02 10:18:22.414 [http-nio-8080-exec-2] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-09-02 10:18:22.435 [http-nio-8080-exec-2] WARN  o.s.web.servlet.handler.HandlerMappingIntrospector - Cache miss for REQUEST dispatch to '/api/announcements/test' (previous null). Performing MatchableHandlerMapping lookup. This is logged once only at WARN level, and every time at TRACE.
2025-09-02 10:19:32.141 [SpringApplicationShutdownHook] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-09-02 10:19:32.144 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-09-02 10:19:32.153 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-09-02 10:19:44.442 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-09-02 10:19:44.506 [main] INFO  com.blog.BlogApplication - Starting BlogApplication using Java 17.0.2 with PID 34796 (D:\java\boke\backend\target\classes started by Redmi in D:\java\boke\backend)
2025-09-02 10:19:44.506 [main] DEBUG com.blog.BlogApplication - Running with Spring Boot v3.2.0, Spring v6.1.1
2025-09-02 10:19:44.507 [main] INFO  com.blog.BlogApplication - No active profile set, falling back to 1 default profile: "default"
2025-09-02 10:19:45.530 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-02 10:19:45.532 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-09-02 10:19:45.773 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 233 ms. Found 15 JPA repository interfaces.
2025-09-02 10:19:45.799 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-02 10:19:45.801 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-09-02 10:19:45.821 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.AnnouncementRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:19:45.822 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleLikeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:19:45.824 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:19:45.825 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:19:45.826 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CategoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:19:45.826 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CommentLikeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:19:45.827 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CommentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:19:45.827 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.FileInfoRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:19:45.828 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.LoginLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:19:45.828 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.NotificationRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:19:45.829 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.OperationLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:19:45.830 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.SecuritySettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:19:45.831 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.TagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:19:45.833 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.UserAnnouncementReadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:19:45.833 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:19:45.834 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 21 ms. Found 0 Redis repository interfaces.
2025-09-02 10:19:47.098 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-09-02 10:19:47.107 [main] INFO  org.apache.catalina.core.AprLifecycleListener - An older version [1.2.38] of the Apache Tomcat Native library is installed, while Tomcat recommends a minimum version of [2.0.5]
2025-09-02 10:19:47.108 [main] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [1.2.38] using APR version [1.7.4].
2025-09-02 10:19:47.115 [main] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 1.1.1v  1 Aug 2023]
2025-09-02 10:19:47.129 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-09-02 10:19:47.133 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-09-02 10:19:47.133 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.16]
2025-09-02 10:19:47.264 [main] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] - Initializing Spring embedded WebApplicationContext
2025-09-02 10:19:47.265 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2699 ms
2025-09-02 10:19:47.717 [main] DEBUG com.blog.filter.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-09-02 10:19:47.916 [main] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-09-02 10:19:47.981 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.3.1.Final
2025-09-02 10:19:48.022 [main] INFO  o.hibernate.cache.internal.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-09-02 10:19:48.293 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-09-02 10:19:48.326 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-09-02 10:19:48.508 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@64a8d575
2025-09-02 10:19:48.510 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-09-02 10:19:48.568 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-09-02 10:19:48.569 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-09-02 10:19:50.051 [main] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-09-02 10:19:50.208 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-09-02 10:19:50.630 [main] INFO  o.s.data.jpa.repository.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-09-02 10:19:53.165 [main] WARN  o.s.b.a.s.s.UserDetailsServiceAutoConfiguration - 

Using generated security password: 7caadde2-ff43-425e-8ff1-f48bb855d6dc

This generated password is for development use only. Your security configuration must be updated before running your application in production.

2025-09-02 10:19:53.692 [main] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@4d509a1f, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@ddd108b, org.springframework.security.web.context.SecurityContextHolderFilter@1807c124, org.springframework.security.web.header.HeaderWriterFilter@229686ac, org.springframework.web.filter.CorsFilter@32d5cbf2, org.springframework.security.web.authentication.logout.LogoutFilter@5acd7897, com.blog.filter.JwtAuthenticationFilter@4ca0b9b1, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@18eb36ff, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@25ebb657, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@3468192e, org.springframework.security.web.session.SessionManagementFilter@5ab6118b, org.springframework.security.web.access.ExceptionTranslationFilter@181c07b3, org.springframework.security.web.access.intercept.AuthorizationFilter@4b9e952f]
2025-09-02 10:19:54.242 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-09-02 10:19:54.264 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/api'
2025-09-02 10:19:54.271 [main] INFO  com.blog.BlogApplication - Started BlogApplication in 10.443 seconds (process running for 11.138)
2025-09-02 10:20:19.206 [http-nio-8080-exec-1] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-09-02 10:20:19.206 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-09-02 10:20:19.208 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-09-02 10:20:19.230 [http-nio-8080-exec-1] WARN  o.s.web.servlet.handler.HandlerMappingIntrospector - Cache miss for REQUEST dispatch to '/api/announcements/test' (previous null). Performing MatchableHandlerMapping lookup. This is logged once only at WARN level, and every time at TRACE.
2025-09-02 10:20:19.310 [http-nio-8080-exec-1] ERROR com.blog.exception.GlobalExceptionHandler - 未捕获的异常: No acceptable representation
org.springframework.web.HttpMediaTypeNotAcceptableException: No acceptable representation
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:256)
	at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.handleReturnValue(RequestResponseBodyMethodProcessor.java:190)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:917)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:829)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-09-02 10:20:19.318 [http-nio-8080-exec-1] WARN  o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Failure in @ExceptionHandler com.blog.exception.GlobalExceptionHandler#handleException(Exception)
org.springframework.web.HttpMediaTypeNotAcceptableException: No acceptable representation
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:256)
	at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.handleReturnValue(RequestResponseBodyMethodProcessor.java:190)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:78)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:136)
	at org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver.doResolveHandlerMethodException(ExceptionHandlerExceptionResolver.java:432)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodExceptionResolver.doResolveException(AbstractHandlerMethodExceptionResolver.java:74)
	at org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:161)
	at org.springframework.web.servlet.handler.HandlerExceptionResolverComposite.resolveException(HandlerExceptionResolverComposite.java:80)
	at org.springframework.web.servlet.DispatcherServlet.processHandlerException(DispatcherServlet.java:1357)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1160)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1106)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-09-02 10:20:19.321 [http-nio-8080-exec-1] WARN  o.s.w.s.m.support.DefaultHandlerExceptionResolver - Resolved [org.springframework.web.HttpMediaTypeNotAcceptableException: No acceptable representation]
2025-09-02 10:22:07.736 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.content,
        a1_0.created_at,
        a1_0.deleted,
        a1_0.enabled,
        a1_0.end_time,
        a1_0.pinned,
        a1_0.priority,
        a1_0.publisher_id,
        a1_0.start_time,
        a1_0.title,
        a1_0.type,
        a1_0.updated_at 
    from
        personal_blog_announcement a1_0 
    where
        a1_0.deleted=0 
        and a1_0.enabled=1 
        and (
            a1_0.start_time is null 
            or a1_0.start_time<=?
        ) 
        and (
            a1_0.end_time is null 
            or a1_0.end_time>=?
        ) 
    order by
        a1_0.pinned desc,
        a1_0.priority desc,
        a1_0.created_at desc
2025-09-02 10:22:07.777 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 10:22:07.807 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        count(uar1_0.id) 
    from
        personal_blog_user_announcement_read uar1_0 
    where
        uar1_0.announcement_id=?
2025-09-02 10:23:39.591 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 10:23:39.596 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 10:23:39.642 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 10:23:40.597 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 10:23:40.597 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 10:23:40.656 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 10:23:40.660 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 10:23:40.663 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 10:23:40.665 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 10:23:40.667 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 10:23:40.668 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 10:23:40.671 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 10:23:40.671 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 10:23:40.674 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 10:23:40.674 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 10:23:40.684 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 10:23:40.689 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 10:23:40.691 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 10:23:40.693 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 10:23:40.694 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 10:23:40.696 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 10:23:40.698 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 10:23:40.700 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 10:23:40.702 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 10:23:40.704 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 10:23:40.706 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 10:23:40.708 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 10:23:40.711 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 10:23:40.714 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 10:23:40.716 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 10:23:40.776 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 10:23:41.120 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-02 10:23:41.378 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.content,
        a1_0.created_at,
        a1_0.deleted,
        a1_0.enabled,
        a1_0.end_time,
        a1_0.pinned,
        a1_0.priority,
        a1_0.publisher_id,
        a1_0.start_time,
        a1_0.title,
        a1_0.type,
        a1_0.updated_at 
    from
        personal_blog_announcement a1_0 
    where
        a1_0.deleted=0 
        and a1_0.enabled=1 
        and (
            a1_0.start_time is null 
            or a1_0.start_time<=?
        ) 
        and (
            a1_0.end_time is null 
            or a1_0.end_time>=?
        ) 
    order by
        a1_0.pinned desc,
        a1_0.priority desc,
        a1_0.created_at desc
2025-09-02 10:23:41.382 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 10:23:41.385 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        count(uar1_0.id) 
    from
        personal_blog_user_announcement_read uar1_0 
    where
        uar1_0.announcement_id=?
2025-09-02 10:23:44.030 [http-nio-8080-exec-10] ERROR com.blog.exception.GlobalExceptionHandler - 未捕获的异常: No static resource announcements/read-batch.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource announcements/read-batch.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:120)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-09-02 10:23:56.156 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 10:23:56.156 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 10:23:56.162 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        uar1_0.id 
    from
        personal_blog_user_announcement_read uar1_0 
    where
        uar1_0.user_id=? 
        and uar1_0.announcement_id=? 
    limit
        ?
2025-09-02 10:23:56.162 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        uar1_0.id 
    from
        personal_blog_user_announcement_read uar1_0 
    where
        uar1_0.user_id=? 
        and uar1_0.announcement_id=? 
    limit
        ?
2025-09-02 10:24:01.503 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 10:24:01.509 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 10:24:01.519 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 10:24:02.209 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 10:24:02.209 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 10:24:02.216 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 10:24:02.218 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 10:24:02.223 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 10:24:02.224 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 10:24:02.229 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 10:24:02.229 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 10:24:02.235 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 10:24:02.236 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 10:24:02.240 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 10:24:02.240 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 10:24:02.244 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 10:24:02.246 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 10:24:02.247 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 10:24:02.250 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 10:24:02.251 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 10:24:02.254 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 10:24:02.258 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 10:24:02.261 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 10:24:02.264 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 10:24:02.267 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 10:24:02.271 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 10:24:02.274 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 10:24:02.277 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 10:24:02.279 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 10:24:02.283 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 10:24:02.508 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 10:24:02.899 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-02 10:24:03.054 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.content,
        a1_0.created_at,
        a1_0.deleted,
        a1_0.enabled,
        a1_0.end_time,
        a1_0.pinned,
        a1_0.priority,
        a1_0.publisher_id,
        a1_0.start_time,
        a1_0.title,
        a1_0.type,
        a1_0.updated_at 
    from
        personal_blog_announcement a1_0 
    where
        a1_0.deleted=0 
        and a1_0.enabled=1 
        and (
            a1_0.start_time is null 
            or a1_0.start_time<=?
        ) 
        and (
            a1_0.end_time is null 
            or a1_0.end_time>=?
        ) 
    order by
        a1_0.pinned desc,
        a1_0.priority desc,
        a1_0.created_at desc
2025-09-02 10:24:03.058 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 10:24:03.062 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        count(uar1_0.id) 
    from
        personal_blog_user_announcement_read uar1_0 
    where
        uar1_0.announcement_id=?
2025-09-02 10:24:03.404 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.content,
        a1_0.created_at,
        a1_0.deleted,
        a1_0.enabled,
        a1_0.end_time,
        a1_0.pinned,
        a1_0.priority,
        a1_0.publisher_id,
        a1_0.start_time,
        a1_0.title,
        a1_0.type,
        a1_0.updated_at 
    from
        personal_blog_announcement a1_0 
    where
        a1_0.deleted=0 
        and a1_0.enabled=1 
        and (
            a1_0.start_time is null 
            or a1_0.start_time<=?
        ) 
        and (
            a1_0.end_time is null 
            or a1_0.end_time>=?
        ) 
    order by
        a1_0.pinned desc,
        a1_0.priority desc,
        a1_0.created_at desc
2025-09-02 10:24:03.409 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 10:24:03.414 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        count(uar1_0.id) 
    from
        personal_blog_user_announcement_read uar1_0 
    where
        uar1_0.announcement_id=?
2025-09-02 10:24:08.075 [http-nio-8080-exec-6] ERROR com.blog.exception.GlobalExceptionHandler - 未捕获的异常: No static resource announcements/read-batch.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource announcements/read-batch.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:120)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-09-02 10:42:57.560 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-09-02 10:42:57.630 [main] INFO  com.blog.BlogApplication - Starting BlogApplication using Java 17.0.2 with PID 35652 (D:\java\boke\backend\target\classes started by Redmi in D:\java\boke\backend)
2025-09-02 10:42:57.631 [main] DEBUG com.blog.BlogApplication - Running with Spring Boot v3.2.0, Spring v6.1.1
2025-09-02 10:42:57.632 [main] INFO  com.blog.BlogApplication - No active profile set, falling back to 1 default profile: "default"
2025-09-02 10:42:58.598 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-02 10:42:58.599 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-09-02 10:42:58.816 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 210 ms. Found 15 JPA repository interfaces.
2025-09-02 10:42:58.833 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-02 10:42:58.834 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-09-02 10:42:58.852 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.AnnouncementRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:42:58.853 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleLikeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:42:58.855 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:42:58.855 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:42:58.855 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CategoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:42:58.856 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CommentLikeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:42:58.856 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CommentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:42:58.857 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.FileInfoRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:42:58.857 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.LoginLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:42:58.857 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.NotificationRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:42:58.857 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.OperationLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:42:58.858 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.SecuritySettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:42:58.859 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.TagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:42:58.860 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.UserAnnouncementReadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:42:58.861 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 10:42:58.862 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 17 ms. Found 0 Redis repository interfaces.
2025-09-02 10:42:59.765 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-09-02 10:42:59.773 [main] INFO  org.apache.catalina.core.AprLifecycleListener - An older version [1.2.38] of the Apache Tomcat Native library is installed, while Tomcat recommends a minimum version of [2.0.5]
2025-09-02 10:42:59.774 [main] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [1.2.38] using APR version [1.7.4].
2025-09-02 10:42:59.777 [main] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 1.1.1v  1 Aug 2023]
2025-09-02 10:42:59.787 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-09-02 10:42:59.790 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-09-02 10:42:59.791 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.16]
2025-09-02 10:42:59.901 [main] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] - Initializing Spring embedded WebApplicationContext
2025-09-02 10:42:59.902 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2214 ms
2025-09-02 10:43:00.360 [main] DEBUG com.blog.filter.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-09-02 10:43:00.509 [main] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-09-02 10:43:00.570 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.3.1.Final
2025-09-02 10:43:00.605 [main] INFO  o.hibernate.cache.internal.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-09-02 10:43:00.837 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-09-02 10:43:00.867 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-09-02 10:43:01.034 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@67689c81
2025-09-02 10:43:01.036 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-09-02 10:43:01.091 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-09-02 10:43:01.092 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-09-02 10:43:02.210 [main] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-09-02 10:43:02.345 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-09-02 10:43:02.679 [main] INFO  o.s.data.jpa.repository.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-09-02 10:43:05.055 [main] WARN  o.s.b.a.s.s.UserDetailsServiceAutoConfiguration - 

Using generated security password: 5ab5cb14-9619-4bf6-ac44-f98309388cf4

This generated password is for development use only. Your security configuration must be updated before running your application in production.

2025-09-02 10:43:05.566 [main] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@3c562c33, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@5888b01d, org.springframework.security.web.context.SecurityContextHolderFilter@229686ac, org.springframework.security.web.header.HeaderWriterFilter@6977f492, org.springframework.web.filter.CorsFilter@5acd7897, org.springframework.security.web.authentication.logout.LogoutFilter@74e04a55, com.blog.filter.JwtAuthenticationFilter@5b3755f4, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@3325fdf6, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@1bd09bbc, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@2b64a8cc, org.springframework.security.web.session.SessionManagementFilter@13df5b90, org.springframework.security.web.access.ExceptionTranslationFilter@368e1d6, org.springframework.security.web.access.intercept.AuthorizationFilter@19a36c8f]
2025-09-02 10:43:06.069 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-09-02 10:43:06.090 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/api'
2025-09-02 10:43:06.099 [main] INFO  com.blog.BlogApplication - Started BlogApplication in 9.149 seconds (process running for 9.766)
2025-09-02 10:44:40.357 [http-nio-8080-exec-1] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-09-02 10:44:40.358 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-09-02 10:44:40.360 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-09-02 10:44:40.771 [http-nio-8080-exec-1] WARN  o.s.web.servlet.handler.HandlerMappingIntrospector - Cache miss for REQUEST dispatch to '/api/users/me' (previous null). Performing MatchableHandlerMapping lookup. This is logged once only at WARN level, and every time at TRACE.
2025-09-02 10:44:40.924 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 10:44:40.959 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 10:44:40.998 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 10:44:41.382 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 10:44:41.382 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 10:44:41.414 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 10:44:41.418 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 10:44:41.421 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 10:44:41.424 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 10:44:41.424 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 10:44:41.428 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 10:44:41.429 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 10:44:41.431 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 10:44:41.432 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 10:44:41.434 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 10:44:41.442 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 10:44:41.449 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 10:44:41.451 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 10:44:41.453 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 10:44:41.456 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 10:44:41.458 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 10:44:41.459 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 10:44:41.461 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 10:44:41.463 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 10:44:41.465 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 10:44:41.467 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 10:44:41.468 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 10:44:41.471 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 10:44:41.473 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 10:44:41.475 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 10:44:41.536 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 10:44:41.875 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-02 10:44:42.151 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.content,
        a1_0.created_at,
        a1_0.deleted,
        a1_0.enabled,
        a1_0.end_time,
        a1_0.pinned,
        a1_0.priority,
        a1_0.publisher_id,
        a1_0.start_time,
        a1_0.title,
        a1_0.type,
        a1_0.updated_at 
    from
        personal_blog_announcement a1_0 
    where
        a1_0.deleted=0 
        and a1_0.enabled=1 
        and (
            a1_0.start_time is null 
            or a1_0.start_time<=?
        ) 
        and (
            a1_0.end_time is null 
            or a1_0.end_time>=?
        ) 
    order by
        a1_0.pinned desc,
        a1_0.priority desc,
        a1_0.created_at desc
2025-09-02 10:44:42.155 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 10:44:42.160 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        count(uar1_0.id) 
    from
        personal_blog_user_announcement_read uar1_0 
    where
        uar1_0.announcement_id=?
2025-09-02 10:44:44.120 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 10:44:44.125 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        uar1_0.id 
    from
        personal_blog_user_announcement_read uar1_0 
    where
        uar1_0.user_id=? 
        and uar1_0.announcement_id=? 
    limit
        ?
2025-09-02 11:02:45.868 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 11:02:45.874 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:02:45.881 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 11:02:46.384 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 11:02:46.384 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 11:02:46.390 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 11:02:46.390 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:02:46.392 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:02:46.393 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:02:46.396 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:02:46.397 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:02:46.399 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:02:46.401 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:02:46.401 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:02:46.405 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:02:46.405 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:02:46.408 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:02:46.408 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:02:46.413 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:02:46.420 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:02:46.421 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:02:46.425 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:02:46.438 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:02:46.441 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:02:46.444 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:02:46.448 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:02:46.451 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:02:46.454 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:02:46.457 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:02:46.460 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:02:46.662 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 11:02:47.040 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-02 11:02:47.208 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.content,
        a1_0.created_at,
        a1_0.deleted,
        a1_0.enabled,
        a1_0.end_time,
        a1_0.pinned,
        a1_0.priority,
        a1_0.publisher_id,
        a1_0.start_time,
        a1_0.title,
        a1_0.type,
        a1_0.updated_at 
    from
        personal_blog_announcement a1_0 
    where
        a1_0.deleted=0 
        and a1_0.enabled=1 
        and (
            a1_0.start_time is null 
            or a1_0.start_time<=?
        ) 
        and (
            a1_0.end_time is null 
            or a1_0.end_time>=?
        ) 
    order by
        a1_0.pinned desc,
        a1_0.priority desc,
        a1_0.created_at desc
2025-09-02 11:02:47.227 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:02:47.252 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        count(uar1_0.id) 
    from
        personal_blog_user_announcement_read uar1_0 
    where
        uar1_0.announcement_id=?
2025-09-02 11:02:47.312 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.content,
        a1_0.created_at,
        a1_0.deleted,
        a1_0.enabled,
        a1_0.end_time,
        a1_0.pinned,
        a1_0.priority,
        a1_0.publisher_id,
        a1_0.start_time,
        a1_0.title,
        a1_0.type,
        a1_0.updated_at 
    from
        personal_blog_announcement a1_0 
    where
        a1_0.deleted=0 
        and a1_0.enabled=1 
        and (
            a1_0.start_time is null 
            or a1_0.start_time<=?
        ) 
        and (
            a1_0.end_time is null 
            or a1_0.end_time>=?
        ) 
    order by
        a1_0.pinned desc,
        a1_0.priority desc,
        a1_0.created_at desc
2025-09-02 11:02:47.318 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:02:47.326 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        count(uar1_0.id) 
    from
        personal_blog_user_announcement_read uar1_0 
    where
        uar1_0.announcement_id=?
2025-09-02 11:02:50.742 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 11:02:50.754 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        uar1_0.id 
    from
        personal_blog_user_announcement_read uar1_0 
    where
        uar1_0.user_id=? 
        and uar1_0.announcement_id=? 
    limit
        ?
2025-09-02 11:03:08.849 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-09-02 11:03:08.858 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-09-02 11:03:08.983 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-09-02 11:03:09.105 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    update
        users 
    set
        article_count=?,
        avatar=?,
        bio=?,
        deleted=?,
        email=?,
        email_verified=?,
        follower_count=?,
        following_count=?,
        github=?,
        last_login_ip=?,
        last_login_time=?,
        nickname=?,
        password=?,
        role=?,
        status=?,
        updated_at=?,
        username=?,
        website=? 
    where
        id=?
2025-09-02 11:03:09.122 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-09-02 11:03:09.212 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        login_logs
        (created_at, device_info, ip_address, is_current_session, location, login_status, login_time, logout_time, session_id, updated_at, user_agent, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 11:03:09.220 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:03:09.230 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    update
        users 
    set
        article_count=?,
        avatar=?,
        bio=?,
        deleted=?,
        email=?,
        email_verified=?,
        follower_count=?,
        following_count=?,
        github=?,
        last_login_ip=?,
        last_login_time=?,
        nickname=?,
        password=?,
        role=?,
        status=?,
        updated_at=?,
        username=?,
        website=? 
    where
        id=?
2025-09-02 11:03:09.242 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 11:03:12.180 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 11:03:12.191 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        uar1_0.id 
    from
        personal_blog_user_announcement_read uar1_0 
    where
        uar1_0.user_id=? 
        and uar1_0.announcement_id=? 
    limit
        ?
2025-09-02 11:03:26.967 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 11:03:26.976 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:03:26.984 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 11:03:27.290 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 11:03:27.291 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 11:03:27.299 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 11:03:27.301 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:03:27.307 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:03:27.307 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:03:27.328 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:03:27.333 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:03:27.345 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:03:27.349 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:03:27.352 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:03:27.357 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:03:27.359 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:03:27.366 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:03:27.371 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:03:27.379 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:03:27.383 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:03:27.386 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:03:27.395 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:03:27.408 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:03:27.415 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:03:27.429 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:03:27.439 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:03:27.454 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:03:27.459 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:03:27.468 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:03:27.473 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:03:27.538 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 11:03:27.589 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-02 11:03:28.149 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.content,
        a1_0.created_at,
        a1_0.deleted,
        a1_0.enabled,
        a1_0.end_time,
        a1_0.pinned,
        a1_0.priority,
        a1_0.publisher_id,
        a1_0.start_time,
        a1_0.title,
        a1_0.type,
        a1_0.updated_at 
    from
        personal_blog_announcement a1_0 
    where
        a1_0.deleted=0 
        and a1_0.enabled=1 
        and (
            a1_0.start_time is null 
            or a1_0.start_time<=?
        ) 
        and (
            a1_0.end_time is null 
            or a1_0.end_time>=?
        ) 
    order by
        a1_0.pinned desc,
        a1_0.priority desc,
        a1_0.created_at desc
2025-09-02 11:03:28.155 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:03:28.160 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(uar1_0.id) 
    from
        personal_blog_user_announcement_read uar1_0 
    where
        uar1_0.announcement_id=?
2025-09-02 11:03:29.413 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 11:03:29.420 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        uar1_0.id 
    from
        personal_blog_user_announcement_read uar1_0 
    where
        uar1_0.user_id=? 
        and uar1_0.announcement_id=? 
    limit
        ?
2025-09-02 11:03:50.201 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 11:03:50.209 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:03:50.254 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    insert 
    into
        comment
        (article_id, content, created_at, deleted, ip_address, like_count, parent_id, reply_count, reply_to_id, status, updated_at, user_id, user_agent) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 11:03:50.279 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 11:03:57.933 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-09-02 11:03:57.938 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-09-02 11:03:58.051 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-09-02 11:03:58.058 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    update
        users 
    set
        article_count=?,
        avatar=?,
        bio=?,
        deleted=?,
        email=?,
        email_verified=?,
        follower_count=?,
        following_count=?,
        github=?,
        last_login_ip=?,
        last_login_time=?,
        nickname=?,
        password=?,
        role=?,
        status=?,
        updated_at=?,
        username=?,
        website=? 
    where
        id=?
2025-09-02 11:03:58.069 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=? 
        or u1_0.email=?
2025-09-02 11:03:58.080 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    insert 
    into
        login_logs
        (created_at, device_info, ip_address, is_current_session, location, login_status, login_time, logout_time, session_id, updated_at, user_agent, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 11:03:58.086 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:03:58.097 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    update
        users 
    set
        article_count=?,
        avatar=?,
        bio=?,
        deleted=?,
        email=?,
        email_verified=?,
        follower_count=?,
        following_count=?,
        github=?,
        last_login_ip=?,
        last_login_time=?,
        nickname=?,
        password=?,
        role=?,
        status=?,
        updated_at=?,
        username=?,
        website=? 
    where
        id=?
2025-09-02 11:03:58.110 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 11:04:01.884 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 11:04:01.890 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        uar1_0.id 
    from
        personal_blog_user_announcement_read uar1_0 
    where
        uar1_0.user_id=? 
        and uar1_0.announcement_id=? 
    limit
        ?
2025-09-02 11:04:04.138 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 11:04:04.159 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:04:04.190 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 11:04:04.675 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 11:04:04.690 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 11:04:04.714 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:04:04.779 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 11:04:04.829 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:04:04.852 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:04:04.911 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:04:04.917 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:04:04.931 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:04:04.933 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:04:04.941 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:04:04.961 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:04:04.962 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:04:04.967 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:04:04.971 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:04:04.974 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:04:04.992 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:04:04.998 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:04:05.004 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:04:05.007 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:04:05.013 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:04:05.019 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:04:05.024 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:04:05.029 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:04:05.036 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:04:05.042 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:04:05.092 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 11:04:05.462 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-02 11:04:43.380 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 11:04:43.386 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:04:43.391 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 11:04:44.144 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 11:04:44.144 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 11:04:44.150 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 11:04:44.152 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:04:44.153 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:04:44.155 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:04:44.158 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:04:44.160 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:04:44.161 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:04:44.163 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:04:44.163 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:04:44.166 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:04:44.167 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:04:44.168 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:04:44.169 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:04:44.172 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:04:44.175 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:04:44.177 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:04:44.181 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:04:44.183 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:04:44.186 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:04:44.188 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:04:44.189 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:04:44.191 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:04:44.193 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:04:44.195 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:04:44.278 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 11:04:44.611 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-02 11:04:44.865 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 11:04:44.869 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:04:44.883 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 11:04:45.759 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 11:04:45.760 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 11:04:45.763 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:04:45.764 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 11:04:45.765 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:04:45.766 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:04:45.769 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:04:45.771 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:04:45.774 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:04:45.779 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:04:45.779 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:04:45.781 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:04:45.783 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:04:45.784 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:04:45.786 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:04:45.786 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:04:45.788 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:04:45.798 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:04:45.801 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:04:45.804 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:04:45.807 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:04:45.809 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:04:45.812 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:04:45.818 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:04:45.820 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:04:45.822 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:04:46.317 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 11:04:46.581 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-02 11:04:46.842 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 11:04:46.849 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        count(u1_0.id) 
    from
        users u1_0
2025-09-02 11:04:46.853 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        date(c1_0.created_at),
        count(c1_0.id) 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
        and c1_0.created_at>=? 
    group by
        date(c1_0.created_at) 
    order by
        date(c1_0.created_at)
2025-09-02 11:04:46.855 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        count(c1_0.id) 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED'
2025-09-02 11:04:46.864 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        coalesce(sum(a1_0.view_count), 0) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 11:04:46.891 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    SELECT
        DATE(published_at) as date,
        COALESCE(SUM(view_count), 0) as totalViews 
    FROM
        article 
    WHERE
        status = 'PUBLISHED' 
        AND published_at >= ? 
    GROUP BY
        DATE(published_at) 
    ORDER BY
        DATE(published_at)
2025-09-02 11:04:46.891 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    SELECT
        c.name as categoryName,
        COUNT(*) as count 
    FROM
        article a 
    JOIN
        category c 
            ON a.category_id = c.id 
    WHERE
        a.status = 'PUBLISHED' 
    GROUP BY
        c.id,
        c.name 
    ORDER BY
        COUNT(*) DESC
2025-09-02 11:04:46.891 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    SELECT
        DATE(published_at) as date,
        COUNT(*) as count 
    FROM
        article 
    WHERE
        status = 'PUBLISHED' 
        AND published_at >= ? 
    GROUP BY
        DATE(published_at) 
    ORDER BY
        DATE(published_at)
2025-09-02 11:04:47.036 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.content,
        a1_0.created_at,
        a1_0.deleted,
        a1_0.enabled,
        a1_0.end_time,
        a1_0.pinned,
        a1_0.priority,
        a1_0.publisher_id,
        a1_0.start_time,
        a1_0.title,
        a1_0.type,
        a1_0.updated_at 
    from
        personal_blog_announcement a1_0 
    where
        a1_0.deleted=0 
        and a1_0.enabled=1 
        and (
            a1_0.start_time is null 
            or a1_0.start_time<=?
        ) 
        and (
            a1_0.end_time is null 
            or a1_0.end_time>=?
        ) 
    order by
        a1_0.pinned desc,
        a1_0.priority desc,
        a1_0.created_at desc
2025-09-02 11:04:47.040 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:04:47.044 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        count(uar1_0.id) 
    from
        personal_blog_user_announcement_read uar1_0 
    where
        uar1_0.announcement_id=?
2025-09-02 11:04:47.121 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    SELECT
        HOUR(published_at) as hour,
        COUNT(*) as visits,
        COUNT(DISTINCT author_id) as uniqueVisits 
    FROM
        article 
    WHERE
        status = 'PUBLISHED' 
        AND published_at >= ? 
    GROUP BY
        HOUR(published_at) 
    ORDER BY
        HOUR(published_at)
2025-09-02 11:04:47.199 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 11:04:47.200 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 11:04:47.206 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(n1_0.id) 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
        and not(n1_0.is_read)
2025-09-02 11:04:47.208 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.is_read,
        n1_0.related_id,
        n1_0.related_type,
        n1_0.title,
        n1_0.type,
        n1_0.updated_at,
        n1_0.user_id 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
    order by
        n1_0.created_at desc 
    limit
        ?, ?
2025-09-02 11:04:47.220 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.like_count desc 
    limit
        ?, ?
2025-09-02 11:04:47.224 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 11:04:47.226 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:04:47.229 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:04:47.231 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:04:47.233 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:04:47.234 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:04:47.238 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:04:47.240 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:04:47.242 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:04:47.244 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:04:47.246 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:04:47.248 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:04:47.250 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:04:47.371 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.content,
        a1_0.created_at,
        a1_0.deleted,
        a1_0.enabled,
        a1_0.end_time,
        a1_0.pinned,
        a1_0.priority,
        a1_0.publisher_id,
        a1_0.start_time,
        a1_0.title,
        a1_0.type,
        a1_0.updated_at 
    from
        personal_blog_announcement a1_0 
    where
        a1_0.deleted=0 
        and a1_0.enabled=1 
        and (
            a1_0.start_time is null 
            or a1_0.start_time<=?
        ) 
        and (
            a1_0.end_time is null 
            or a1_0.end_time>=?
        ) 
    order by
        a1_0.pinned desc,
        a1_0.priority desc,
        a1_0.created_at desc
2025-09-02 11:04:47.375 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:04:47.379 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        count(uar1_0.id) 
    from
        personal_blog_user_announcement_read uar1_0 
    where
        uar1_0.announcement_id=?
2025-09-02 11:04:47.607 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 11:04:47.611 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:04:47.614 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:04:47.616 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:04:47.619 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:04:47.621 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:04:47.625 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:04:47.629 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:04:47.844 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 11:04:47.847 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:04:47.848 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:04:47.851 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:04:51.535 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    SELECT
        DATE(published_at) as date,
        COUNT(*) as count 
    FROM
        article 
    WHERE
        status = 'PUBLISHED' 
        AND published_at >= ? 
    GROUP BY
        DATE(published_at) 
    ORDER BY
        DATE(published_at)
2025-09-02 11:04:51.860 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    SELECT
        DATE(published_at) as date,
        COALESCE(SUM(view_count), 0) as totalViews 
    FROM
        article 
    WHERE
        status = 'PUBLISHED' 
        AND published_at >= ? 
    GROUP BY
        DATE(published_at) 
    ORDER BY
        DATE(published_at)
2025-09-02 11:04:51.861 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        date(c1_0.created_at),
        count(c1_0.id) 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
        and c1_0.created_at>=? 
    group by
        date(c1_0.created_at) 
    order by
        date(c1_0.created_at)
2025-09-02 11:05:01.074 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 11:05:01.078 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:05:01.083 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 11:05:01.890 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    SELECT
        DATE(published_at) as date,
        COALESCE(SUM(view_count), 0) as totalViews 
    FROM
        article 
    WHERE
        status = 'PUBLISHED' 
        AND published_at >= ? 
    GROUP BY
        DATE(published_at) 
    ORDER BY
        DATE(published_at)
2025-09-02 11:05:01.894 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    SELECT
        DATE(published_at) as date,
        COUNT(*) as count 
    FROM
        article 
    WHERE
        status = 'PUBLISHED' 
        AND published_at >= ? 
    GROUP BY
        DATE(published_at) 
    ORDER BY
        DATE(published_at)
2025-09-02 11:05:01.896 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        date(c1_0.created_at),
        count(c1_0.id) 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
        and c1_0.created_at>=? 
    group by
        date(c1_0.created_at) 
    order by
        date(c1_0.created_at)
2025-09-02 11:05:01.897 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 11:05:01.906 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    SELECT
        c.name as categoryName,
        COUNT(*) as count 
    FROM
        article a 
    JOIN
        category c 
            ON a.category_id = c.id 
    WHERE
        a.status = 'PUBLISHED' 
    GROUP BY
        c.id,
        c.name 
    ORDER BY
        COUNT(*) DESC
2025-09-02 11:05:01.908 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        count(u1_0.id) 
    from
        users u1_0
2025-09-02 11:05:01.911 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        count(c1_0.id) 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED'
2025-09-02 11:05:01.916 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        coalesce(sum(a1_0.view_count), 0) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 11:05:02.190 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    SELECT
        HOUR(published_at) as hour,
        COUNT(*) as visits,
        COUNT(DISTINCT author_id) as uniqueVisits 
    FROM
        article 
    WHERE
        status = 'PUBLISHED' 
        AND published_at >= ? 
    GROUP BY
        HOUR(published_at) 
    ORDER BY
        HOUR(published_at)
2025-09-02 11:05:02.238 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 11:05:02.238 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 11:05:02.244 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.is_read,
        n1_0.related_id,
        n1_0.related_type,
        n1_0.title,
        n1_0.type,
        n1_0.updated_at,
        n1_0.user_id 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
    order by
        n1_0.created_at desc 
    limit
        ?, ?
2025-09-02 11:05:02.244 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        count(n1_0.id) 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
        and not(n1_0.is_read)
2025-09-02 11:05:02.330 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.like_count desc 
    limit
        ?, ?
2025-09-02 11:05:02.333 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 11:05:02.335 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:05:02.337 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:05:02.338 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:05:02.340 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:05:02.342 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:05:02.344 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:05:02.345 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:05:02.346 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:05:02.348 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:05:02.350 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:05:02.351 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:05:02.353 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:05:02.712 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 11:05:02.715 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:05:02.717 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:05:02.719 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:05:02.721 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:05:02.723 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:05:02.725 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:05:02.726 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:05:02.829 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 11:05:02.833 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:05:02.837 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 11:05:02.983 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 11:05:02.986 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:05:02.988 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:05:02.991 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:05:04.178 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        (
            ? is null 
            or ?='' 
            or c1_0.content like replace(?, '\\', '\\\\')
        ) 
        and (
            ? is null 
            or ?='' 
            or exists(select
                1 
            from
                users u2_0 
            where
                u2_0.id=c1_0.user_id 
                and u2_0.nickname like replace(?, '\\', '\\\\'))
        ) 
        and (
            ? is null 
            or ?='' 
            or exists(select
                1 
            from
                article a2_0 
            where
                a2_0.id=c1_0.article_id 
                and a2_0.title like replace(?, '\\', '\\\\'))
        ) 
        and (
            ? is null 
            or c1_0.status=?
        ) 
        and (
            ? is null 
            or ?=0 
            or (
                ?=1 
                and c1_0.article_id is null
            )
        ) 
    order by
        c1_0.created_at desc,
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 11:05:04.183 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:05:04.413 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 11:05:04.413 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 11:05:04.417 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:05:04.417 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 11:05:04.419 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:05:04.419 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:05:04.421 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:05:04.422 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:05:04.424 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:05:04.424 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:05:04.426 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:05:04.427 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:05:04.428 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:05:04.430 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:05:04.430 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:05:04.433 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:05:04.436 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:05:04.440 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:05:04.441 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:05:04.444 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:05:04.445 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:05:04.447 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:05:04.449 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:05:04.452 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:05:04.456 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:05:04.459 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:05:04.874 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 11:05:04.907 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-02 11:05:05.136 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.content,
        a1_0.created_at,
        a1_0.deleted,
        a1_0.enabled,
        a1_0.end_time,
        a1_0.pinned,
        a1_0.priority,
        a1_0.publisher_id,
        a1_0.start_time,
        a1_0.title,
        a1_0.type,
        a1_0.updated_at 
    from
        personal_blog_announcement a1_0 
    where
        a1_0.deleted=0 
        and a1_0.enabled=1 
        and (
            a1_0.start_time is null 
            or a1_0.start_time<=?
        ) 
        and (
            a1_0.end_time is null 
            or a1_0.end_time>=?
        ) 
    order by
        a1_0.pinned desc,
        a1_0.priority desc,
        a1_0.created_at desc
2025-09-02 11:05:05.140 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:05:05.145 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        count(uar1_0.id) 
    from
        personal_blog_user_announcement_read uar1_0 
    where
        uar1_0.announcement_id=?
2025-09-02 11:05:21.308 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 11:05:21.318 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:05:21.325 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.id=?
2025-09-02 11:05:21.333 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        comment
        (article_id, content, created_at, deleted, ip_address, like_count, parent_id, reply_count, reply_to_id, status, updated_at, user_id, user_agent) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 11:05:21.342 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    update
        comment 
    set
        article_id=?,
        content=?,
        deleted=?,
        ip_address=?,
        like_count=?,
        parent_id=?,
        reply_count=?,
        reply_to_id=?,
        status=?,
        updated_at=?,
        user_id=?,
        user_agent=? 
    where
        id=?
2025-09-02 11:05:21.356 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 11:05:27.896 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 11:05:27.901 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:05:27.905 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 11:05:28.253 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        (
            ? is null 
            or ?='' 
            or c1_0.content like replace(?, '\\', '\\\\')
        ) 
        and (
            ? is null 
            or ?='' 
            or exists(select
                1 
            from
                users u2_0 
            where
                u2_0.id=c1_0.user_id 
                and u2_0.nickname like replace(?, '\\', '\\\\'))
        ) 
        and (
            ? is null 
            or ?='' 
            or exists(select
                1 
            from
                article a2_0 
            where
                a2_0.id=c1_0.article_id 
                and a2_0.title like replace(?, '\\', '\\\\'))
        ) 
        and (
            ? is null 
            or c1_0.status=?
        ) 
        and (
            ? is null 
            or ?=0 
            or (
                ?=1 
                and c1_0.article_id is null
            )
        ) 
    order by
        c1_0.created_at desc,
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 11:05:28.257 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:05:28.259 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:05:28.345 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 11:05:28.347 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 11:05:28.351 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.is_read,
        n1_0.related_id,
        n1_0.related_type,
        n1_0.title,
        n1_0.type,
        n1_0.updated_at,
        n1_0.user_id 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
    order by
        n1_0.created_at desc 
    limit
        ?, ?
2025-09-02 11:05:28.351 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        count(n1_0.id) 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
        and not(n1_0.is_read)
2025-09-02 11:05:45.941 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 11:05:45.947 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        count(u1_0.id) 
    from
        users u1_0
2025-09-02 11:05:45.951 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        count(c1_0.id) 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED'
2025-09-02 11:05:45.956 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        coalesce(sum(a1_0.view_count), 0) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 11:05:46.301 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    SELECT
        DATE(published_at) as date,
        COUNT(*) as count 
    FROM
        article 
    WHERE
        status = 'PUBLISHED' 
        AND published_at >= ? 
    GROUP BY
        DATE(published_at) 
    ORDER BY
        DATE(published_at)
2025-09-02 11:05:46.568 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.like_count desc 
    limit
        ?, ?
2025-09-02 11:05:46.572 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    SELECT
        DATE(published_at) as date,
        COALESCE(SUM(view_count), 0) as totalViews 
    FROM
        article 
    WHERE
        status = 'PUBLISHED' 
        AND published_at >= ? 
    GROUP BY
        DATE(published_at) 
    ORDER BY
        DATE(published_at)
2025-09-02 11:05:46.580 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 11:05:46.588 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        date(c1_0.created_at),
        count(c1_0.id) 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
        and c1_0.created_at>=? 
    group by
        date(c1_0.created_at) 
    order by
        date(c1_0.created_at)
2025-09-02 11:05:46.591 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    SELECT
        c.name as categoryName,
        COUNT(*) as count 
    FROM
        article a 
    JOIN
        category c 
            ON a.category_id = c.id 
    WHERE
        a.status = 'PUBLISHED' 
    GROUP BY
        c.id,
        c.name 
    ORDER BY
        COUNT(*) DESC
2025-09-02 11:05:46.591 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:05:46.595 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    SELECT
        HOUR(published_at) as hour,
        COUNT(*) as visits,
        COUNT(DISTINCT author_id) as uniqueVisits 
    FROM
        article 
    WHERE
        status = 'PUBLISHED' 
        AND published_at >= ? 
    GROUP BY
        HOUR(published_at) 
    ORDER BY
        HOUR(published_at)
2025-09-02 11:05:46.605 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:05:46.608 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:05:46.614 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:05:46.618 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:05:46.622 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:05:46.624 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:05:46.631 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:05:46.635 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:05:46.640 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:05:46.644 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:05:46.648 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:05:47.675 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 11:05:47.678 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:05:47.682 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 11:05:48.748 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 11:05:48.751 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    SELECT
        DATE(published_at) as date,
        COUNT(*) as count 
    FROM
        article 
    WHERE
        status = 'PUBLISHED' 
        AND published_at >= ? 
    GROUP BY
        DATE(published_at) 
    ORDER BY
        DATE(published_at)
2025-09-02 11:05:48.754 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    SELECT
        DATE(published_at) as date,
        COALESCE(SUM(view_count), 0) as totalViews 
    FROM
        article 
    WHERE
        status = 'PUBLISHED' 
        AND published_at >= ? 
    GROUP BY
        DATE(published_at) 
    ORDER BY
        DATE(published_at)
2025-09-02 11:05:48.756 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(u1_0.id) 
    from
        users u1_0
2025-09-02 11:05:48.757 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    SELECT
        c.name as categoryName,
        COUNT(*) as count 
    FROM
        article a 
    JOIN
        category c 
            ON a.category_id = c.id 
    WHERE
        a.status = 'PUBLISHED' 
    GROUP BY
        c.id,
        c.name 
    ORDER BY
        COUNT(*) DESC
2025-09-02 11:05:48.761 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(c1_0.id) 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED'
2025-09-02 11:05:48.767 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        coalesce(sum(a1_0.view_count), 0) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 11:05:48.767 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        date(c1_0.created_at),
        count(c1_0.id) 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
        and c1_0.created_at>=? 
    group by
        date(c1_0.created_at) 
    order by
        date(c1_0.created_at)
2025-09-02 11:05:49.050 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    SELECT
        HOUR(published_at) as hour,
        COUNT(*) as visits,
        COUNT(DISTINCT author_id) as uniqueVisits 
    FROM
        article 
    WHERE
        status = 'PUBLISHED' 
        AND published_at >= ? 
    GROUP BY
        HOUR(published_at) 
    ORDER BY
        HOUR(published_at)
2025-09-02 11:05:49.098 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 11:05:49.098 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 11:05:49.104 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        count(n1_0.id) 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
        and not(n1_0.is_read)
2025-09-02 11:05:49.106 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.is_read,
        n1_0.related_id,
        n1_0.related_type,
        n1_0.title,
        n1_0.type,
        n1_0.updated_at,
        n1_0.user_id 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
    order by
        n1_0.created_at desc 
    limit
        ?, ?
2025-09-02 11:05:49.175 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.like_count desc 
    limit
        ?, ?
2025-09-02 11:05:49.178 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 11:05:49.180 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:05:49.181 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:05:49.183 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:05:49.185 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:05:49.187 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:05:49.189 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:05:49.191 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:05:49.192 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:05:49.193 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:05:49.195 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:05:49.197 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:05:49.198 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:05:49.561 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 11:05:49.564 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:05:49.566 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:05:49.569 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:05:49.571 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:05:49.573 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:05:49.575 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:05:49.577 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:05:49.618 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 11:05:49.622 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:05:49.643 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 11:05:49.820 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 11:05:49.823 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:05:49.825 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:05:51.189 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 11:05:51.189 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 11:05:51.193 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:05:51.193 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 11:05:51.196 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:05:51.196 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:05:51.199 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:05:51.199 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:05:51.201 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:05:51.201 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:05:51.204 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:05:51.205 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:05:51.206 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:05:51.207 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:05:51.208 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:05:51.211 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:05:51.214 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:05:51.217 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:05:51.220 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:05:51.222 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:05:51.224 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:05:51.227 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:05:51.231 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:05:51.236 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:05:51.238 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:05:51.241 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:05:51.461 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        (
            ? is null 
            or ?='' 
            or c1_0.content like replace(?, '\\', '\\\\')
        ) 
        and (
            ? is null 
            or ?='' 
            or exists(select
                1 
            from
                users u2_0 
            where
                u2_0.id=c1_0.user_id 
                and u2_0.nickname like replace(?, '\\', '\\\\'))
        ) 
        and (
            ? is null 
            or ?='' 
            or exists(select
                1 
            from
                article a2_0 
            where
                a2_0.id=c1_0.article_id 
                and a2_0.title like replace(?, '\\', '\\\\'))
        ) 
        and (
            ? is null 
            or c1_0.status=?
        ) 
        and (
            ? is null 
            or ?=0 
            or (
                ?=1 
                and c1_0.article_id is null
            )
        ) 
    order by
        c1_0.created_at desc,
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 11:05:51.463 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:05:51.470 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:05:51.633 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 11:05:51.877 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-02 11:05:52.039 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.content,
        a1_0.created_at,
        a1_0.deleted,
        a1_0.enabled,
        a1_0.end_time,
        a1_0.pinned,
        a1_0.priority,
        a1_0.publisher_id,
        a1_0.start_time,
        a1_0.title,
        a1_0.type,
        a1_0.updated_at 
    from
        personal_blog_announcement a1_0 
    where
        a1_0.deleted=0 
        and a1_0.enabled=1 
        and (
            a1_0.start_time is null 
            or a1_0.start_time<=?
        ) 
        and (
            a1_0.end_time is null 
            or a1_0.end_time>=?
        ) 
    order by
        a1_0.pinned desc,
        a1_0.priority desc,
        a1_0.created_at desc
2025-09-02 11:05:52.043 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:05:52.046 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        count(uar1_0.id) 
    from
        personal_blog_user_announcement_read uar1_0 
    where
        uar1_0.announcement_id=?
2025-09-02 11:05:52.374 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.content,
        a1_0.created_at,
        a1_0.deleted,
        a1_0.enabled,
        a1_0.end_time,
        a1_0.pinned,
        a1_0.priority,
        a1_0.publisher_id,
        a1_0.start_time,
        a1_0.title,
        a1_0.type,
        a1_0.updated_at 
    from
        personal_blog_announcement a1_0 
    where
        a1_0.deleted=0 
        and a1_0.enabled=1 
        and (
            a1_0.start_time is null 
            or a1_0.start_time<=?
        ) 
        and (
            a1_0.end_time is null 
            or a1_0.end_time>=?
        ) 
    order by
        a1_0.pinned desc,
        a1_0.priority desc,
        a1_0.created_at desc
2025-09-02 11:05:52.377 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:05:52.380 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        count(uar1_0.id) 
    from
        personal_blog_user_announcement_read uar1_0 
    where
        uar1_0.announcement_id=?
2025-09-02 11:05:55.346 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 11:05:55.347 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 11:05:55.407 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:05:55.432 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 11:05:55.544 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:05:55.680 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:05:55.751 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:05:55.812 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:05:55.866 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:05:55.933 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:05:55.962 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:05:55.985 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:05:55.986 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:05:55.988 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:05:55.989 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:05:55.991 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:05:55.993 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:05:55.995 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:05:55.997 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:05:55.999 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:05:56.001 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:05:56.003 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:05:56.005 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:05:56.007 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:05:56.009 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:05:56.012 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:05:56.090 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 11:05:56.455 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-02 11:05:59.842 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 11:05:59.846 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:05:59.850 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 11:06:00.069 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 11:06:00.070 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 11:06:00.073 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:06:00.074 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 11:06:00.076 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:06:00.076 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:06:00.079 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:06:00.082 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:06:00.085 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:06:00.085 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:06:00.086 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:06:00.086 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:06:00.088 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:06:00.088 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:06:00.090 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:06:00.091 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:06:00.093 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:06:00.094 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:06:00.095 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:06:00.097 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:06:00.098 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:06:00.099 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:06:00.101 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:06:00.103 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:06:00.104 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:06:00.105 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:06:00.207 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 11:06:00.467 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-02 11:06:10.659 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 11:06:10.663 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    SELECT
        DATE(published_at) as date,
        COALESCE(SUM(view_count), 0) as totalViews 
    FROM
        article 
    WHERE
        status = 'PUBLISHED' 
        AND published_at >= ? 
    GROUP BY
        DATE(published_at) 
    ORDER BY
        DATE(published_at)
2025-09-02 11:06:10.667 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        count(u1_0.id) 
    from
        users u1_0
2025-09-02 11:06:10.669 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    SELECT
        c.name as categoryName,
        COUNT(*) as count 
    FROM
        article a 
    JOIN
        category c 
            ON a.category_id = c.id 
    WHERE
        a.status = 'PUBLISHED' 
    GROUP BY
        c.id,
        c.name 
    ORDER BY
        COUNT(*) DESC
2025-09-02 11:06:10.670 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        count(c1_0.id) 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED'
2025-09-02 11:06:10.675 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    SELECT
        DATE(published_at) as date,
        COUNT(*) as count 
    FROM
        article 
    WHERE
        status = 'PUBLISHED' 
        AND published_at >= ? 
    GROUP BY
        DATE(published_at) 
    ORDER BY
        DATE(published_at)
2025-09-02 11:06:10.678 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        coalesce(sum(a1_0.view_count), 0) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 11:06:10.678 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        date(c1_0.created_at),
        count(c1_0.id) 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
        and c1_0.created_at>=? 
    group by
        date(c1_0.created_at) 
    order by
        date(c1_0.created_at)
2025-09-02 11:06:10.948 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    SELECT
        HOUR(published_at) as hour,
        COUNT(*) as visits,
        COUNT(DISTINCT author_id) as uniqueVisits 
    FROM
        article 
    WHERE
        status = 'PUBLISHED' 
        AND published_at >= ? 
    GROUP BY
        HOUR(published_at) 
    ORDER BY
        HOUR(published_at)
2025-09-02 11:06:10.996 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 11:06:11.002 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.is_read,
        n1_0.related_id,
        n1_0.related_type,
        n1_0.title,
        n1_0.type,
        n1_0.updated_at,
        n1_0.user_id 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
    order by
        n1_0.created_at desc 
    limit
        ?, ?
2025-09-02 11:06:11.014 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.like_count desc 
    limit
        ?, ?
2025-09-02 11:06:11.015 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 11:06:11.017 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 11:06:11.019 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:06:11.020 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        count(n1_0.id) 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
        and not(n1_0.is_read)
2025-09-02 11:06:11.021 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:06:11.022 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:06:11.024 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:06:11.026 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:06:11.028 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:06:11.031 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:06:11.033 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:06:11.034 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:06:11.036 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:06:11.037 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:06:11.039 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:06:11.390 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 11:06:11.392 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:06:11.395 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:06:11.397 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:06:11.398 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:06:11.400 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:06:11.402 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:06:11.403 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:06:11.650 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 11:06:11.652 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:06:11.654 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:06:14.592 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    order by
        a1_0.created_at desc,
        a1_0.created_at desc 
    limit
        ?, ?
2025-09-02 11:06:14.596 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0
2025-09-02 11:06:14.597 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:06:14.600 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:06:14.601 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:06:14.603 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:06:14.605 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:06:14.607 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:06:14.609 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:06:14.611 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:06:14.612 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:06:14.614 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:06:14.616 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:06:14.618 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:06:14.620 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:06:14.621 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:06:14.623 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:06:14.624 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:06:14.626 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:06:14.628 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:06:14.630 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:06:14.632 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:06:14.634 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:06:14.636 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:06:14.638 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:06:14.639 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:06:21.008 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 11:06:21.012 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:06:21.015 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 11:06:21.899 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 11:06:21.917 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    order by
        a1_0.created_at desc,
        a1_0.created_at desc 
    limit
        ?, ?
2025-09-02 11:06:21.923 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0
2025-09-02 11:06:21.924 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 11:06:21.926 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:06:21.927 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 11:06:21.928 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:06:21.930 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:06:21.930 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        count(n1_0.id) 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
        and not(n1_0.is_read)
2025-09-02 11:06:21.933 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:06:21.933 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.is_read,
        n1_0.related_id,
        n1_0.related_type,
        n1_0.title,
        n1_0.type,
        n1_0.updated_at,
        n1_0.user_id 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
    order by
        n1_0.created_at desc 
    limit
        ?, ?
2025-09-02 11:06:21.936 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:06:21.938 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:06:21.940 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:06:21.941 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:06:21.942 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:06:21.944 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:06:21.947 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:06:21.949 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:06:21.950 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:06:21.952 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:06:21.954 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:06:21.956 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:06:21.958 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:06:21.960 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:06:21.962 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:06:21.964 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:06:21.966 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:06:21.968 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:06:21.970 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:06:21.972 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:06:22.429 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 11:06:22.433 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:06:22.437 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 11:06:24.121 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 11:06:24.122 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 11:06:24.124 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:06:24.125 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 11:06:24.126 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:06:24.127 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:06:24.129 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:06:24.131 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:06:24.133 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:06:24.134 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:06:24.136 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:06:24.137 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:06:24.138 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:06:24.139 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:06:24.142 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:06:24.147 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:06:24.149 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:06:24.152 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:06:24.156 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:06:24.160 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:06:35.389 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 11:06:35.863 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 11:06:44.301 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:06:44.304 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:06:44.307 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:06:44.307 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:06:44.309 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:06:44.313 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 11:06:44.313 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:06:44.317 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.content,
        a1_0.created_at,
        a1_0.deleted,
        a1_0.enabled,
        a1_0.end_time,
        a1_0.pinned,
        a1_0.priority,
        a1_0.publisher_id,
        a1_0.start_time,
        a1_0.title,
        a1_0.type,
        a1_0.updated_at 
    from
        personal_blog_announcement a1_0 
    where
        a1_0.deleted=0 
        and a1_0.enabled=1 
        and (
            a1_0.start_time is null 
            or a1_0.start_time<=?
        ) 
        and (
            a1_0.end_time is null 
            or a1_0.end_time>=?
        ) 
    order by
        a1_0.pinned desc,
        a1_0.priority desc,
        a1_0.created_at desc
2025-09-02 11:06:44.319 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 11:06:44.322 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:06:44.324 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:06:44.326 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(uar1_0.id) 
    from
        personal_blog_user_announcement_read uar1_0 
    where
        uar1_0.announcement_id=?
2025-09-02 11:06:44.329 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:06:45.114 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 11:06:45.114 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 11:06:45.120 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 11:06:45.126 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:06:45.138 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:06:45.143 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:06:45.143 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:06:45.146 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:06:45.146 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:06:45.149 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:06:45.150 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:06:45.153 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:06:45.153 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:06:45.156 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:06:45.158 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:06:45.162 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:06:45.168 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:06:45.170 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:06:45.172 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:06:45.175 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:06:45.178 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:06:45.180 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:06:45.182 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:06:45.185 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:06:45.189 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:06:45.193 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:06:45.240 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 11:06:45.836 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-02 11:06:45.938 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.content,
        a1_0.created_at,
        a1_0.deleted,
        a1_0.enabled,
        a1_0.end_time,
        a1_0.pinned,
        a1_0.priority,
        a1_0.publisher_id,
        a1_0.start_time,
        a1_0.title,
        a1_0.type,
        a1_0.updated_at 
    from
        personal_blog_announcement a1_0 
    where
        a1_0.deleted=0 
        and a1_0.enabled=1 
        and (
            a1_0.start_time is null 
            or a1_0.start_time<=?
        ) 
        and (
            a1_0.end_time is null 
            or a1_0.end_time>=?
        ) 
    order by
        a1_0.pinned desc,
        a1_0.priority desc,
        a1_0.created_at desc
2025-09-02 11:06:45.948 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:06:45.965 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        count(uar1_0.id) 
    from
        personal_blog_user_announcement_read uar1_0 
    where
        uar1_0.announcement_id=?
2025-09-02 11:06:47.265 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 11:06:47.275 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.is_read,
        n1_0.related_id,
        n1_0.related_type,
        n1_0.title,
        n1_0.type,
        n1_0.updated_at,
        n1_0.user_id 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
    order by
        n1_0.created_at desc 
    limit
        ?, ?
2025-09-02 11:06:47.287 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 11:06:47.294 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        count(n1_0.id) 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
        and not(n1_0.is_read)
2025-09-02 11:06:48.707 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 11:06:48.711 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        uar1_0.id 
    from
        personal_blog_user_announcement_read uar1_0 
    where
        uar1_0.user_id=? 
        and uar1_0.announcement_id=? 
    limit
        ?
2025-09-02 11:15:27.206 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-09-02 11:15:27.282 [main] INFO  com.blog.BlogApplication - Starting BlogApplication using Java 17.0.2 with PID 7352 (D:\java\boke\backend\target\classes started by Redmi in D:\java\boke\backend)
2025-09-02 11:15:27.284 [main] DEBUG com.blog.BlogApplication - Running with Spring Boot v3.2.0, Spring v6.1.1
2025-09-02 11:15:27.285 [main] INFO  com.blog.BlogApplication - No active profile set, falling back to 1 default profile: "default"
2025-09-02 11:15:28.440 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-02 11:15:28.442 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-09-02 11:15:28.655 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 206 ms. Found 15 JPA repository interfaces.
2025-09-02 11:15:28.672 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-02 11:15:28.674 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-09-02 11:15:28.689 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.AnnouncementRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:15:28.689 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleLikeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:15:28.691 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:15:28.691 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:15:28.692 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CategoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:15:28.692 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CommentLikeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:15:28.693 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CommentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:15:28.693 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.FileInfoRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:15:28.693 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.LoginLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:15:28.693 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.NotificationRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:15:28.694 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.OperationLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:15:28.694 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.SecuritySettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:15:28.695 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.TagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:15:28.695 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.UserAnnouncementReadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:15:28.696 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:15:28.696 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 13 ms. Found 0 Redis repository interfaces.
2025-09-02 11:15:29.613 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-09-02 11:15:29.622 [main] INFO  org.apache.catalina.core.AprLifecycleListener - An older version [1.2.38] of the Apache Tomcat Native library is installed, while Tomcat recommends a minimum version of [2.0.5]
2025-09-02 11:15:29.623 [main] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [1.2.38] using APR version [1.7.4].
2025-09-02 11:15:29.629 [main] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 1.1.1v  1 Aug 2023]
2025-09-02 11:15:29.640 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-09-02 11:15:29.644 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-09-02 11:15:29.645 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.16]
2025-09-02 11:15:29.742 [main] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] - Initializing Spring embedded WebApplicationContext
2025-09-02 11:15:29.743 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2394 ms
2025-09-02 11:15:30.109 [main] DEBUG com.blog.filter.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-09-02 11:15:30.228 [main] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-09-02 11:15:30.280 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.3.1.Final
2025-09-02 11:15:30.314 [main] INFO  o.hibernate.cache.internal.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-09-02 11:15:30.518 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-09-02 11:15:30.544 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-09-02 11:15:30.707 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@543ba2e1
2025-09-02 11:15:30.710 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-09-02 11:15:30.749 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-09-02 11:15:30.751 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-09-02 11:15:31.961 [main] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-09-02 11:15:32.126 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-09-02 11:15:32.518 [main] INFO  o.s.data.jpa.repository.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-09-02 11:15:35.472 [main] WARN  o.s.b.a.s.s.UserDetailsServiceAutoConfiguration - 

Using generated security password: 1134b02a-9576-48e5-b562-21c271552e85

This generated password is for development use only. Your security configuration must be updated before running your application in production.

2025-09-02 11:15:35.872 [main] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@ddd108b, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@32d5cbf2, org.springframework.security.web.context.SecurityContextHolderFilter@7257b1e6, org.springframework.security.web.header.HeaderWriterFilter@4b7c5ab5, org.springframework.web.filter.CorsFilter@3468192e, org.springframework.security.web.authentication.logout.LogoutFilter@2b64a8cc, com.blog.filter.JwtAuthenticationFilter@248d3a, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@25ebb657, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@3c35d2f, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@7d21fdde, org.springframework.security.web.session.SessionManagementFilter@3faabf8c, org.springframework.security.web.access.ExceptionTranslationFilter@1f53503, org.springframework.security.web.access.intercept.AuthorizationFilter@278427e9]
2025-09-02 11:15:36.324 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-09-02 11:15:36.346 [main] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.context.ApplicationContextException: Failed to start bean 'webServerStartStop'
2025-09-02 11:15:36.349 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-09-02 11:15:36.351 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-09-02 11:15:36.360 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-09-02 11:15:36.383 [main] INFO  o.s.b.a.logging.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-09-02 11:15:36.398 [main] ERROR o.s.b.diagnostics.LoggingFailureAnalysisReporter - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Web server failed to start. Port 8080 was already in use.

Action:

Identify and stop the process that's listening on port 8080 or configure this application to listen on another port.

2025-09-02 11:17:38.485 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-09-02 11:17:38.551 [main] INFO  com.blog.BlogApplication - Starting BlogApplication using Java 17.0.2 with PID 13056 (D:\java\boke\backend\target\classes started by Redmi in D:\java\boke\backend)
2025-09-02 11:17:38.552 [main] DEBUG com.blog.BlogApplication - Running with Spring Boot v3.2.0, Spring v6.1.1
2025-09-02 11:17:38.553 [main] INFO  com.blog.BlogApplication - No active profile set, falling back to 1 default profile: "default"
2025-09-02 11:17:39.471 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-02 11:17:39.472 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-09-02 11:17:39.675 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 195 ms. Found 15 JPA repository interfaces.
2025-09-02 11:17:39.691 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-02 11:17:39.692 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-09-02 11:17:39.708 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.AnnouncementRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:17:39.709 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleLikeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:17:39.710 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:17:39.711 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:17:39.712 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CategoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:17:39.712 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CommentLikeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:17:39.712 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CommentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:17:39.713 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.FileInfoRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:17:39.713 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.LoginLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:17:39.713 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.NotificationRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:17:39.713 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.OperationLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:17:39.714 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.SecuritySettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:17:39.714 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.TagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:17:39.715 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.UserAnnouncementReadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:17:39.715 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:17:39.716 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 14 ms. Found 0 Redis repository interfaces.
2025-09-02 11:17:40.715 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-09-02 11:17:40.723 [main] INFO  org.apache.catalina.core.AprLifecycleListener - An older version [1.2.38] of the Apache Tomcat Native library is installed, while Tomcat recommends a minimum version of [2.0.5]
2025-09-02 11:17:40.723 [main] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [1.2.38] using APR version [1.7.4].
2025-09-02 11:17:40.727 [main] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 1.1.1v  1 Aug 2023]
2025-09-02 11:17:40.741 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-09-02 11:17:40.743 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-09-02 11:17:40.744 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.16]
2025-09-02 11:17:40.834 [main] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] - Initializing Spring embedded WebApplicationContext
2025-09-02 11:17:40.835 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2223 ms
2025-09-02 11:17:41.288 [main] DEBUG com.blog.filter.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-09-02 11:17:41.417 [main] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-09-02 11:17:41.476 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.3.1.Final
2025-09-02 11:17:41.514 [main] INFO  o.hibernate.cache.internal.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-09-02 11:17:41.741 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-09-02 11:17:41.766 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-09-02 11:17:41.915 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@393bcd6b
2025-09-02 11:17:41.916 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-09-02 11:17:41.957 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-09-02 11:17:41.960 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-09-02 11:17:43.246 [main] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-09-02 11:17:43.369 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-09-02 11:17:43.716 [main] INFO  o.s.data.jpa.repository.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-09-02 11:17:45.926 [main] WARN  o.s.b.a.s.s.UserDetailsServiceAutoConfiguration - 

Using generated security password: 89c02427-ce8f-4378-9ac4-1a06b9650c1b

This generated password is for development use only. Your security configuration must be updated before running your application in production.

2025-09-02 11:17:46.355 [main] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@3468192e, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@7d21fdde, org.springframework.security.web.context.SecurityContextHolderFilter@25ebb657, org.springframework.security.web.header.HeaderWriterFilter@1bd09bbc, org.springframework.web.filter.CorsFilter@189df3b9, org.springframework.security.web.authentication.logout.LogoutFilter@3bcb7aa9, com.blog.filter.JwtAuthenticationFilter@7e1a9173, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@4cd40430, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@d498f9b, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@48b2103, org.springframework.security.web.session.SessionManagementFilter@1807c124, org.springframework.security.web.access.ExceptionTranslationFilter@4b7c5ab5, org.springframework.security.web.access.intercept.AuthorizationFilter@ddd108b]
2025-09-02 11:17:46.972 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-09-02 11:17:47.012 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/api'
2025-09-02 11:17:47.024 [main] INFO  com.blog.BlogApplication - Started BlogApplication in 9.175 seconds (process running for 9.644)
2025-09-02 11:18:16.485 [http-nio-8080-exec-1] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-09-02 11:18:16.486 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-09-02 11:18:16.488 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-09-02 11:18:16.964 [http-nio-8080-exec-1] WARN  o.s.web.servlet.handler.HandlerMappingIntrospector - Cache miss for REQUEST dispatch to '/api/users/me' (previous null). Performing MatchableHandlerMapping lookup. This is logged once only at WARN level, and every time at TRACE.
2025-09-02 11:18:17.147 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 11:18:17.188 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:18:17.239 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 11:18:17.692 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 11:18:17.707 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.is_read,
        n1_0.related_id,
        n1_0.related_type,
        n1_0.title,
        n1_0.type,
        n1_0.updated_at,
        n1_0.user_id 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
    order by
        n1_0.created_at desc 
    limit
        ?, ?
2025-09-02 11:18:17.787 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 11:18:17.802 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        count(n1_0.id) 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
        and not(n1_0.is_read)
2025-09-02 11:18:22.570 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 11:18:22.570 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 11:18:22.639 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:18:22.641 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 11:18:22.648 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:18:22.658 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:18:22.661 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:18:22.711 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:18:22.718 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:18:22.737 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:18:22.749 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:18:22.756 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:18:22.759 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:18:22.773 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:18:22.782 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:18:22.790 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:18:22.793 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:18:22.801 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:18:22.806 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:18:22.812 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:18:22.818 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:18:22.826 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:18:22.850 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:18:22.862 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:18:22.868 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:18:22.876 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:18:23.082 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 11:18:23.476 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-02 11:18:56.315 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 11:18:56.325 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:18:56.421 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        comment
        (article_id, content, created_at, deleted, ip_address, like_count, parent_id, reply_count, reply_to_id, status, updated_at, user_id, user_agent) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 11:18:56.454 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.role=?
2025-09-02 11:18:56.499 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        personal_blog_notification
        (content, created_at, is_read, related_id, related_type, title, type, updated_at, user_id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 11:18:56.516 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 11:19:01.087 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 11:19:01.093 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:19:01.101 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 11:19:01.334 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 11:19:01.334 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 11:19:01.365 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:19:01.367 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 11:19:01.371 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:19:01.372 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:19:01.375 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:19:01.383 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:19:01.383 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:19:01.387 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:19:01.396 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:19:01.403 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:19:01.406 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:19:01.434 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:19:01.461 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:19:01.465 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:19:01.477 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:19:01.486 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:19:01.491 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:19:01.507 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:19:01.512 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:19:01.532 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:19:01.546 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:19:01.552 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:19:01.558 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:19:01.630 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 11:19:02.001 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-02 11:19:08.067 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 11:19:08.072 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        date(c1_0.created_at),
        count(c1_0.id) 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
        and c1_0.created_at>=? 
    group by
        date(c1_0.created_at) 
    order by
        date(c1_0.created_at)
2025-09-02 11:19:08.080 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(u1_0.id) 
    from
        users u1_0
2025-09-02 11:19:08.099 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(c1_0.id) 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED'
2025-09-02 11:19:08.140 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        coalesce(sum(a1_0.view_count), 0) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 11:19:08.189 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    SELECT
        DATE(published_at) as date,
        COALESCE(SUM(view_count), 0) as totalViews 
    FROM
        article 
    WHERE
        status = 'PUBLISHED' 
        AND published_at >= ? 
    GROUP BY
        DATE(published_at) 
    ORDER BY
        DATE(published_at)
2025-09-02 11:19:08.192 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    SELECT
        c.name as categoryName,
        COUNT(*) as count 
    FROM
        article a 
    JOIN
        category c 
            ON a.category_id = c.id 
    WHERE
        a.status = 'PUBLISHED' 
    GROUP BY
        c.id,
        c.name 
    ORDER BY
        COUNT(*) DESC
2025-09-02 11:19:08.190 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    SELECT
        DATE(published_at) as date,
        COUNT(*) as count 
    FROM
        article 
    WHERE
        status = 'PUBLISHED' 
        AND published_at >= ? 
    GROUP BY
        DATE(published_at) 
    ORDER BY
        DATE(published_at)
2025-09-02 11:19:08.265 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    SELECT
        HOUR(published_at) as hour,
        COUNT(*) as visits,
        COUNT(DISTINCT author_id) as uniqueVisits 
    FROM
        article 
    WHERE
        status = 'PUBLISHED' 
        AND published_at >= ? 
    GROUP BY
        HOUR(published_at) 
    ORDER BY
        HOUR(published_at)
2025-09-02 11:19:08.485 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 11:19:08.523 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.is_read,
        n1_0.related_id,
        n1_0.related_type,
        n1_0.title,
        n1_0.type,
        n1_0.updated_at,
        n1_0.user_id 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
    order by
        n1_0.created_at desc 
    limit
        ?, ?
2025-09-02 11:19:08.574 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.like_count desc 
    limit
        ?, ?
2025-09-02 11:19:08.589 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 11:19:08.593 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 11:19:08.601 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:19:08.612 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:19:08.624 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        count(n1_0.id) 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
        and not(n1_0.is_read)
2025-09-02 11:19:08.628 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:19:08.635 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:19:08.644 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:19:08.650 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:19:08.658 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:19:08.664 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:19:08.677 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:19:08.685 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:19:08.710 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:19:08.730 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:19:09.125 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 11:19:09.138 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:19:09.144 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:19:09.147 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:19:09.154 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:19:09.163 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:19:09.179 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:19:09.186 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:19:09.374 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 11:19:09.378 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:19:12.039 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 11:19:12.048 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.is_read,
        n1_0.related_id,
        n1_0.related_type,
        n1_0.title,
        n1_0.type,
        n1_0.updated_at,
        n1_0.user_id 
    from
        personal_blog_notification n1_0 
    where
        n1_0.id=?
2025-09-02 11:19:12.155 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    update
        personal_blog_notification 
    set
        content=?,
        created_at=?,
        is_read=?,
        related_id=?,
        related_type=?,
        title=?,
        type=?,
        updated_at=?,
        user_id=? 
    where
        id=?
2025-09-02 11:19:15.767 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 11:19:15.782 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.is_read,
        n1_0.related_id,
        n1_0.related_type,
        n1_0.title,
        n1_0.type,
        n1_0.updated_at,
        n1_0.user_id 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
    order by
        n1_0.created_at desc 
    limit
        ?, ?
2025-09-02 11:19:19.843 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        (
            ? is null 
            or ?='' 
            or c1_0.content like replace(?, '\\', '\\\\')
        ) 
        and (
            ? is null 
            or ?='' 
            or exists(select
                1 
            from
                users u2_0 
            where
                u2_0.id=c1_0.user_id 
                and u2_0.nickname like replace(?, '\\', '\\\\'))
        ) 
        and (
            ? is null 
            or ?='' 
            or exists(select
                1 
            from
                article a2_0 
            where
                a2_0.id=c1_0.article_id 
                and a2_0.title like replace(?, '\\', '\\\\'))
        ) 
        and (
            ? is null 
            or c1_0.status=?
        ) 
        and (
            ? is null 
            or ?=0 
            or (
                ?=1 
                and c1_0.article_id is null
            )
        ) 
    order by
        c1_0.created_at desc,
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 11:19:19.873 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        count(c1_0.id) 
    from
        comment c1_0 
    where
        (
            ? is null 
            or ?='' 
            or c1_0.content like replace(?, '\\', '\\\\')
        ) 
        and (
            ? is null 
            or ?='' 
            or exists(select
                1 
            from
                users u1_0 
            where
                u1_0.id=c1_0.user_id 
                and u1_0.nickname like replace(?, '\\', '\\\\'))
        ) 
        and (
            ? is null 
            or ?='' 
            or exists(select
                1 
            from
                article a1_0 
            where
                a1_0.id=c1_0.article_id 
                and a1_0.title like replace(?, '\\', '\\\\'))
        ) 
        and (
            ? is null 
            or c1_0.status=?
        ) 
        and (
            ? is null 
            or ?=0 
            or (
                ?=1 
                and c1_0.article_id is null
            )
        )
2025-09-02 11:19:19.887 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:19:19.894 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:19:19.899 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:19:19.906 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:19:19.914 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:19:19.925 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:19:19.937 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:19:19.941 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:19:19.954 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:19:19.958 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:19:19.966 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:19:19.972 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:19:19.986 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:19:21.154 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        (
            ? is null 
            or ?='' 
            or c1_0.content like replace(?, '\\', '\\\\')
        ) 
        and (
            ? is null 
            or ?='' 
            or exists(select
                1 
            from
                users u2_0 
            where
                u2_0.id=c1_0.user_id 
                and u2_0.nickname like replace(?, '\\', '\\\\'))
        ) 
        and (
            ? is null 
            or ?='' 
            or exists(select
                1 
            from
                article a2_0 
            where
                a2_0.id=c1_0.article_id 
                and a2_0.title like replace(?, '\\', '\\\\'))
        ) 
        and (
            ? is null 
            or c1_0.status=?
        ) 
        and (
            ? is null 
            or ?=0 
            or (
                ?=1 
                and c1_0.article_id is null
            )
        ) 
    order by
        c1_0.created_at desc,
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 11:19:21.163 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:19:21.167 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:20:34.386 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 11:20:34.390 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 11:20:34.392 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:20:34.395 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:20:34.397 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:20:34.399 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:20:34.401 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:20:34.403 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:20:34.405 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:20:34.407 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:20:34.411 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:20:34.414 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:20:34.415 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 11:20:34.416 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:20:34.420 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:20:34.449 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:20:34.452 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:20:34.452 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:20:34.456 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:20:34.456 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:20:34.461 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:20:34.461 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:20:34.466 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:20:34.470 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:20:34.471 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:20:34.544 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 11:20:34.550 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:20:34.553 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:20:34.555 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:20:34.558 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:20:34.560 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:20:34.616 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 11:20:34.617 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 11:20:34.620 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 11:20:34.623 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:20:34.625 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:20:34.627 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:20:34.629 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:20:34.632 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:20:34.634 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:20:34.635 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-02 11:20:34.635 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:20:34.638 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:20:34.639 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:20:34.642 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:20:34.645 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:20:34.647 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:20:34.649 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:20:34.651 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:20:34.653 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:20:34.655 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:20:34.658 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:23:38.947 [http-nio-8080-exec-1] ERROR com.blog.exception.GlobalExceptionHandler - 未捕获的异常: No static resource comments/messages/stats.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource comments/messages/stats.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:122)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-09-02 11:24:14.126 [http-nio-8080-exec-5] ERROR com.blog.exception.GlobalExceptionHandler - 未捕获的异常: No static resource comments/messages/stats.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource comments/messages/stats.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:122)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-09-02 11:27:00.464 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        (
            ? is null 
            or ?='' 
            or c1_0.content like replace(?, '\\', '\\\\')
        ) 
        and (
            ? is null 
            or ?='' 
            or exists(select
                1 
            from
                users u2_0 
            where
                u2_0.id=c1_0.user_id 
                and u2_0.nickname like replace(?, '\\', '\\\\'))
        ) 
        and (
            ? is null 
            or ?='' 
            or exists(select
                1 
            from
                article a2_0 
            where
                a2_0.id=c1_0.article_id 
                and a2_0.title like replace(?, '\\', '\\\\'))
        ) 
        and (
            ? is null 
            or c1_0.status=?
        ) 
        and (
            ? is null 
            or ?=0 
            or (
                ?=1 
                and c1_0.article_id is null
            )
        ) 
    order by
        c1_0.created_at desc,
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 11:27:00.468 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:27:00.471 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:27:00.469 [http-nio-8080-exec-3] ERROR com.blog.exception.GlobalExceptionHandler - 未捕获的异常: No static resource comments/messages/stats.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource comments/messages/stats.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:122)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-09-02 11:27:00.583 [http-nio-8080-exec-7] ERROR com.blog.exception.GlobalExceptionHandler - 未捕获的异常: No static resource comments/messages/stats.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource comments/messages/stats.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:122)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-09-02 11:27:00.631 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        (
            ? is null 
            or ?='' 
            or c1_0.content like replace(?, '\\', '\\\\')
        ) 
        and (
            ? is null 
            or ?='' 
            or exists(select
                1 
            from
                users u2_0 
            where
                u2_0.id=c1_0.user_id 
                and u2_0.nickname like replace(?, '\\', '\\\\'))
        ) 
        and (
            ? is null 
            or ?='' 
            or exists(select
                1 
            from
                article a2_0 
            where
                a2_0.id=c1_0.article_id 
                and a2_0.title like replace(?, '\\', '\\\\'))
        ) 
        and (
            ? is null 
            or c1_0.status=?
        ) 
        and (
            ? is null 
            or ?=0 
            or (
                ?=1 
                and c1_0.article_id is null
            )
        ) 
    order by
        c1_0.created_at desc,
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 11:27:00.634 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:27:00.637 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:27:41.283 [http-nio-8080-exec-10] ERROR com.blog.exception.GlobalExceptionHandler - 未捕获的异常: No static resource comments/messages/stats.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource comments/messages/stats.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:122)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-09-02 11:28:08.716 [http-nio-8080-exec-1] ERROR com.blog.exception.GlobalExceptionHandler - 未捕获的异常: No static resource comments/messages/stats.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource comments/messages/stats.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:122)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-09-02 11:29:27.033 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-09-02 11:29:27.086 [main] INFO  com.blog.BlogApplication - Starting BlogApplication using Java 17.0.2 with PID 56124 (D:\java\boke\backend\target\classes started by Redmi in D:\java\boke\backend)
2025-09-02 11:29:27.087 [main] DEBUG com.blog.BlogApplication - Running with Spring Boot v3.2.0, Spring v6.1.1
2025-09-02 11:29:27.087 [main] INFO  com.blog.BlogApplication - No active profile set, falling back to 1 default profile: "default"
2025-09-02 11:29:28.166 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-02 11:29:28.168 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-09-02 11:29:28.357 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 183 ms. Found 15 JPA repository interfaces.
2025-09-02 11:29:28.372 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-02 11:29:28.373 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-09-02 11:29:28.388 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.AnnouncementRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:29:28.388 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleLikeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:29:28.391 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:29:28.391 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:29:28.391 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CategoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:29:28.391 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CommentLikeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:29:28.392 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CommentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:29:28.392 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.FileInfoRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:29:28.392 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.LoginLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:29:28.393 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.NotificationRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:29:28.393 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.OperationLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:29:28.393 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.SecuritySettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:29:28.394 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.TagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:29:28.395 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.UserAnnouncementReadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:29:28.395 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:29:28.395 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 14 ms. Found 0 Redis repository interfaces.
2025-09-02 11:29:29.183 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-09-02 11:29:29.191 [main] INFO  org.apache.catalina.core.AprLifecycleListener - An older version [1.2.38] of the Apache Tomcat Native library is installed, while Tomcat recommends a minimum version of [2.0.5]
2025-09-02 11:29:29.192 [main] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [1.2.38] using APR version [1.7.4].
2025-09-02 11:29:29.199 [main] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 1.1.1v  1 Aug 2023]
2025-09-02 11:29:29.209 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-09-02 11:29:29.212 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-09-02 11:29:29.213 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.16]
2025-09-02 11:29:29.310 [main] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] - Initializing Spring embedded WebApplicationContext
2025-09-02 11:29:29.310 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2177 ms
2025-09-02 11:29:29.670 [main] DEBUG com.blog.filter.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-09-02 11:29:29.802 [main] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-09-02 11:29:29.865 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.3.1.Final
2025-09-02 11:29:29.905 [main] INFO  o.hibernate.cache.internal.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-09-02 11:29:30.116 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-09-02 11:29:30.143 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-09-02 11:29:30.288 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@5e0442dd
2025-09-02 11:29:30.289 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-09-02 11:29:30.331 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-09-02 11:29:30.333 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-09-02 11:29:31.437 [main] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-09-02 11:29:31.542 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-09-02 11:29:31.833 [main] INFO  o.s.data.jpa.repository.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-09-02 11:29:33.815 [main] WARN  o.s.b.a.s.s.UserDetailsServiceAutoConfiguration - 

Using generated security password: 983e0bec-6341-4664-aff6-1b1f79495d9f

This generated password is for development use only. Your security configuration must be updated before running your application in production.

2025-09-02 11:29:34.179 [main] INFO  o.s.security.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@6bc553d, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@7bb83993, org.springframework.security.web.context.SecurityContextHolderFilter@33d9d098, org.springframework.security.web.header.HeaderWriterFilter@73c74b67, org.springframework.web.filter.CorsFilter@179f606c, org.springframework.security.web.authentication.logout.LogoutFilter@77b71acd, com.blog.filter.JwtAuthenticationFilter@6f68756d, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@5ac60f01, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@36bece70, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@7bfac81c, org.springframework.security.web.session.SessionManagementFilter@af3b487, org.springframework.security.web.access.ExceptionTranslationFilter@69049281, org.springframework.security.web.access.intercept.AuthorizationFilter@51e7b595]
2025-09-02 11:29:34.577 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-09-02 11:29:34.595 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/api'
2025-09-02 11:29:34.600 [main] INFO  com.blog.BlogApplication - Started BlogApplication in 8.065 seconds (process running for 8.474)
2025-09-02 11:29:48.847 [http-nio-8080-exec-1] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-09-02 11:29:48.848 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-09-02 11:29:48.849 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-09-02 11:29:49.239 [http-nio-8080-exec-1] WARN  o.s.web.servlet.handler.HandlerMappingIntrospector - Cache miss for REQUEST dispatch to '/api/users/me' (previous null). Performing MatchableHandlerMapping lookup. This is logged once only at WARN level, and every time at TRACE.
2025-09-02 11:29:49.401 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 11:29:49.432 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:29:49.473 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 11:29:49.979 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 11:29:49.979 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 11:29:50.021 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:29:50.037 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 11:29:50.043 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:29:50.066 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:29:50.071 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:29:50.081 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:29:50.083 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:29:50.097 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:29:50.104 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:29:50.114 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:29:50.118 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:29:50.121 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:29:50.123 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:29:50.126 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:29:50.128 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:29:50.130 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:29:50.133 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:29:50.135 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:29:50.138 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:29:50.140 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:29:50.144 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:29:50.147 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:29:50.149 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:29:50.258 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 11:29:50.604 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-02 11:30:12.881 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 11:30:12.888 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:30:12.896 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 11:30:13.572 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        count(c1_0.id) 
    from
        comment c1_0 
    where
        c1_0.article_id is null
2025-09-02 11:30:13.573 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 11:30:13.578 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 11:30:13.585 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        count(c1_0.id) 
    from
        comment c1_0 
    where
        c1_0.article_id is null 
        and c1_0.status='APPROVED'
2025-09-02 11:30:13.587 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        count(n1_0.id) 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
        and not(n1_0.is_read)
2025-09-02 11:30:13.592 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        count(c1_0.id) 
    from
        comment c1_0 
    where
        c1_0.article_id is null 
        and c1_0.status='PENDING'
2025-09-02 11:30:13.594 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.is_read,
        n1_0.related_id,
        n1_0.related_type,
        n1_0.title,
        n1_0.type,
        n1_0.updated_at,
        n1_0.user_id 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
    order by
        n1_0.created_at desc 
    limit
        ?, ?
2025-09-02 11:30:13.601 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        (
            ? is null 
            or ?='' 
            or c1_0.content like replace(?, '\\', '\\\\')
        ) 
        and (
            ? is null 
            or ?='' 
            or exists(select
                1 
            from
                users u2_0 
            where
                u2_0.id=c1_0.user_id 
                and u2_0.nickname like replace(?, '\\', '\\\\'))
        ) 
        and (
            ? is null 
            or ?='' 
            or exists(select
                1 
            from
                article a2_0 
            where
                a2_0.id=c1_0.article_id 
                and a2_0.title like replace(?, '\\', '\\\\'))
        ) 
        and (
            ? is null 
            or c1_0.status=?
        ) 
        and (
            ? is null 
            or ?=0 
            or (
                ?=1 
                and c1_0.article_id is null
            )
        ) 
    order by
        c1_0.created_at desc,
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 11:30:13.605 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        count(c1_0.id) 
    from
        comment c1_0 
    where
        c1_0.article_id is null 
        and c1_0.status='REJECTED'
2025-09-02 11:30:13.611 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:30:13.615 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:30:23.987 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        (
            ? is null 
            or ?='' 
            or c1_0.content like replace(?, '\\', '\\\\')
        ) 
        and (
            ? is null 
            or ?='' 
            or exists(select
                1 
            from
                users u2_0 
            where
                u2_0.id=c1_0.user_id 
                and u2_0.nickname like replace(?, '\\', '\\\\'))
        ) 
        and (
            ? is null 
            or ?='' 
            or exists(select
                1 
            from
                article a2_0 
            where
                a2_0.id=c1_0.article_id 
                and a2_0.title like replace(?, '\\', '\\\\'))
        ) 
        and (
            ? is null 
            or c1_0.status=?
        ) 
        and (
            ? is null 
            or ?=0 
            or (
                ?=1 
                and c1_0.article_id is null
            )
        ) 
    order by
        c1_0.created_at desc,
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 11:30:24.025 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        count(c1_0.id) 
    from
        comment c1_0 
    where
        (
            ? is null 
            or ?='' 
            or c1_0.content like replace(?, '\\', '\\\\')
        ) 
        and (
            ? is null 
            or ?='' 
            or exists(select
                1 
            from
                users u1_0 
            where
                u1_0.id=c1_0.user_id 
                and u1_0.nickname like replace(?, '\\', '\\\\'))
        ) 
        and (
            ? is null 
            or ?='' 
            or exists(select
                1 
            from
                article a1_0 
            where
                a1_0.id=c1_0.article_id 
                and a1_0.title like replace(?, '\\', '\\\\'))
        ) 
        and (
            ? is null 
            or c1_0.status=?
        ) 
        and (
            ? is null 
            or ?=0 
            or (
                ?=1 
                and c1_0.article_id is null
            )
        )
2025-09-02 11:30:24.035 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:30:24.038 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:30:24.047 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:30:24.051 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:30:24.059 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:30:24.062 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:30:24.070 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:30:24.095 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:30:24.104 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:30:24.112 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:30:24.115 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:30:24.121 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:30:24.126 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:30:51.737 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        (
            ? is null 
            or ?='' 
            or c1_0.content like replace(?, '\\', '\\\\')
        ) 
        and (
            ? is null 
            or ?='' 
            or exists(select
                1 
            from
                users u2_0 
            where
                u2_0.id=c1_0.user_id 
                and u2_0.nickname like replace(?, '\\', '\\\\'))
        ) 
        and (
            ? is null 
            or ?='' 
            or exists(select
                1 
            from
                article a2_0 
            where
                a2_0.id=c1_0.article_id 
                and a2_0.title like replace(?, '\\', '\\\\'))
        ) 
        and (
            ? is null 
            or c1_0.status=?
        ) 
        and (
            ? is null 
            or ?=0 
            or (
                ?=1 
                and c1_0.article_id is null
            )
        ) 
    order by
        c1_0.created_at desc,
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 11:30:51.745 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:30:51.752 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:32:36.276 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 11:32:36.283 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        count(u1_0.id) 
    from
        users u1_0
2025-09-02 11:32:36.290 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        count(c1_0.id) 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED'
2025-09-02 11:32:36.297 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        coalesce(sum(a1_0.view_count), 0) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 11:32:36.310 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        date(c1_0.created_at),
        count(c1_0.id) 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
        and c1_0.created_at>=? 
    group by
        date(c1_0.created_at) 
    order by
        date(c1_0.created_at)
2025-09-02 11:32:36.324 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    SELECT
        DATE(published_at) as date,
        COUNT(*) as count 
    FROM
        article 
    WHERE
        status = 'PUBLISHED' 
        AND published_at >= ? 
    GROUP BY
        DATE(published_at) 
    ORDER BY
        DATE(published_at)
2025-09-02 11:32:36.324 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    SELECT
        DATE(published_at) as date,
        COALESCE(SUM(view_count), 0) as totalViews 
    FROM
        article 
    WHERE
        status = 'PUBLISHED' 
        AND published_at >= ? 
    GROUP BY
        DATE(published_at) 
    ORDER BY
        DATE(published_at)
2025-09-02 11:32:36.324 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    SELECT
        c.name as categoryName,
        COUNT(*) as count 
    FROM
        article a 
    JOIN
        category c 
            ON a.category_id = c.id 
    WHERE
        a.status = 'PUBLISHED' 
    GROUP BY
        c.id,
        c.name 
    ORDER BY
        COUNT(*) DESC
2025-09-02 11:32:36.533 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    SELECT
        HOUR(published_at) as hour,
        COUNT(*) as visits,
        COUNT(DISTINCT author_id) as uniqueVisits 
    FROM
        article 
    WHERE
        status = 'PUBLISHED' 
        AND published_at >= ? 
    GROUP BY
        HOUR(published_at) 
    ORDER BY
        HOUR(published_at)
2025-09-02 11:32:36.629 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.like_count desc 
    limit
        ?, ?
2025-09-02 11:32:36.638 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 11:32:36.640 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:32:36.644 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:32:36.648 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:32:36.651 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:32:36.655 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:32:36.659 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:32:36.663 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:32:36.666 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:32:36.669 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:32:36.672 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:32:36.674 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:32:36.677 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:32:37.031 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 11:32:37.035 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:32:37.038 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:32:37.041 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:32:37.044 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:32:37.047 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:32:37.051 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:32:37.054 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:32:37.308 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 11:32:37.312 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:32:54.338 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        (
            ? is null 
            or ?='' 
            or c1_0.content like replace(?, '\\', '\\\\')
        ) 
        and (
            ? is null 
            or ?='' 
            or exists(select
                1 
            from
                users u2_0 
            where
                u2_0.id=c1_0.user_id 
                and u2_0.nickname like replace(?, '\\', '\\\\'))
        ) 
        and (
            ? is null 
            or ?='' 
            or exists(select
                1 
            from
                article a2_0 
            where
                a2_0.id=c1_0.article_id 
                and a2_0.title like replace(?, '\\', '\\\\'))
        ) 
        and (
            ? is null 
            or c1_0.status=?
        ) 
        and (
            ? is null 
            or ?=0 
            or (
                ?=1 
                and c1_0.article_id is null
            )
        ) 
    order by
        c1_0.created_at desc,
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 11:32:54.359 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:32:54.362 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:32:54.369 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:32:54.373 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:32:54.376 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:32:54.384 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:32:54.390 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:32:54.396 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:32:54.403 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:32:54.407 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:32:54.411 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:32:54.422 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:32:54.425 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:32:54.439 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:32:58.042 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 11:32:58.065 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.is_read,
        n1_0.related_id,
        n1_0.related_type,
        n1_0.title,
        n1_0.type,
        n1_0.updated_at,
        n1_0.user_id 
    from
        personal_blog_notification n1_0 
    where
        n1_0.id=?
2025-09-02 11:32:58.272 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    update
        personal_blog_notification 
    set
        content=?,
        created_at=?,
        is_read=?,
        related_id=?,
        related_type=?,
        title=?,
        type=?,
        updated_at=?,
        user_id=? 
    where
        id=?
2025-09-02 11:33:01.020 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 11:33:01.065 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.is_read,
        n1_0.related_id,
        n1_0.related_type,
        n1_0.title,
        n1_0.type,
        n1_0.updated_at,
        n1_0.user_id 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
    order by
        n1_0.created_at desc 
    limit
        ?, ?
2025-09-02 11:33:04.964 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 11:33:04.988 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.is_read,
        n1_0.related_id,
        n1_0.related_type,
        n1_0.title,
        n1_0.type,
        n1_0.updated_at,
        n1_0.user_id 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
        and not(n1_0.is_read) 
    order by
        n1_0.created_at desc 
    limit
        ?, ?
2025-09-02 11:33:05.431 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 11:33:05.447 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.is_read,
        n1_0.related_id,
        n1_0.related_type,
        n1_0.title,
        n1_0.type,
        n1_0.updated_at,
        n1_0.user_id 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
        and n1_0.type=? 
    order by
        n1_0.created_at desc 
    limit
        ?, ?
2025-09-02 11:33:06.160 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 11:33:06.183 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.is_read,
        n1_0.related_id,
        n1_0.related_type,
        n1_0.title,
        n1_0.type,
        n1_0.updated_at,
        n1_0.user_id 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
        and n1_0.type=? 
    order by
        n1_0.created_at desc 
    limit
        ?, ?
2025-09-02 11:33:17.053 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 11:33:17.202 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    order by
        a1_0.created_at desc,
        a1_0.created_at desc 
    limit
        ?, ?
2025-09-02 11:33:17.222 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0
2025-09-02 11:33:17.236 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:33:17.242 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:33:17.248 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:33:17.254 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:33:17.260 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:33:17.264 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:33:17.272 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:33:17.295 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:33:17.303 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:33:17.308 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:33:17.315 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:33:17.337 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:33:17.356 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:33:17.358 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:33:17.368 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:33:17.371 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:33:17.386 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:33:17.398 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:33:17.412 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:33:17.421 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:33:17.433 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:33:17.465 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:33:17.478 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:33:17.481 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:35:31.304 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 11:35:31.309 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:35:31.313 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 11:35:33.306 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        count(c1_0.id) 
    from
        comment c1_0 
    where
        c1_0.article_id is null
2025-09-02 11:35:33.309 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        count(c1_0.id) 
    from
        comment c1_0 
    where
        c1_0.article_id is null 
        and c1_0.status='APPROVED'
2025-09-02 11:35:33.312 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        count(c1_0.id) 
    from
        comment c1_0 
    where
        c1_0.article_id is null 
        and c1_0.status='PENDING'
2025-09-02 11:35:33.315 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        count(c1_0.id) 
    from
        comment c1_0 
    where
        c1_0.article_id is null 
        and c1_0.status='REJECTED'
2025-09-02 11:35:33.346 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 11:35:33.346 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        (
            ? is null 
            or ?='' 
            or c1_0.content like replace(?, '\\', '\\\\')
        ) 
        and (
            ? is null 
            or ?='' 
            or exists(select
                1 
            from
                users u2_0 
            where
                u2_0.id=c1_0.user_id 
                and u2_0.nickname like replace(?, '\\', '\\\\'))
        ) 
        and (
            ? is null 
            or ?='' 
            or exists(select
                1 
            from
                article a2_0 
            where
                a2_0.id=c1_0.article_id 
                and a2_0.title like replace(?, '\\', '\\\\'))
        ) 
        and (
            ? is null 
            or c1_0.status=?
        ) 
        and (
            ? is null 
            or ?=0 
            or (
                ?=1 
                and c1_0.article_id is null
            )
        ) 
    order by
        c1_0.created_at desc,
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 11:35:33.347 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 11:35:33.350 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:35:33.352 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.is_read,
        n1_0.related_id,
        n1_0.related_type,
        n1_0.title,
        n1_0.type,
        n1_0.updated_at,
        n1_0.user_id 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
    order by
        n1_0.created_at desc 
    limit
        ?, ?
2025-09-02 11:35:33.352 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:35:33.352 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        count(n1_0.id) 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
        and not(n1_0.is_read)
2025-09-02 11:36:00.835 [http-nio-8080-exec-9] ERROR com.blog.exception.GlobalExceptionHandler - 未捕获的异常: No static resource comments/messages/113/detail.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource comments/messages/113/detail.
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:585)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:52)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:110)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at com.blog.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:122)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:833)
2025-09-02 11:36:23.816 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 11:36:23.820 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:36:23.823 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 11:36:24.251 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        count(c1_0.id) 
    from
        comment c1_0 
    where
        c1_0.article_id is null
2025-09-02 11:36:24.252 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        (
            ? is null 
            or ?='' 
            or c1_0.content like replace(?, '\\', '\\\\')
        ) 
        and (
            ? is null 
            or ?='' 
            or exists(select
                1 
            from
                users u2_0 
            where
                u2_0.id=c1_0.user_id 
                and u2_0.nickname like replace(?, '\\', '\\\\'))
        ) 
        and (
            ? is null 
            or ?='' 
            or exists(select
                1 
            from
                article a2_0 
            where
                a2_0.id=c1_0.article_id 
                and a2_0.title like replace(?, '\\', '\\\\'))
        ) 
        and (
            ? is null 
            or c1_0.status=?
        ) 
        and (
            ? is null 
            or ?=0 
            or (
                ?=1 
                and c1_0.article_id is null
            )
        ) 
    order by
        c1_0.created_at desc,
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 11:36:24.253 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        count(c1_0.id) 
    from
        comment c1_0 
    where
        c1_0.article_id is null 
        and c1_0.status='APPROVED'
2025-09-02 11:36:24.254 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 11:36:24.255 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:36:24.256 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        count(c1_0.id) 
    from
        comment c1_0 
    where
        c1_0.article_id is null 
        and c1_0.status='PENDING'
2025-09-02 11:36:24.257 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:36:24.259 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.is_read,
        n1_0.related_id,
        n1_0.related_type,
        n1_0.title,
        n1_0.type,
        n1_0.updated_at,
        n1_0.user_id 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
    order by
        n1_0.created_at desc 
    limit
        ?, ?
2025-09-02 11:36:24.260 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        count(c1_0.id) 
    from
        comment c1_0 
    where
        c1_0.article_id is null 
        and c1_0.status='REJECTED'
2025-09-02 11:36:24.284 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 11:36:24.290 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        count(n1_0.id) 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
        and not(n1_0.is_read)
2025-09-02 11:36:48.794 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 11:36:48.799 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:36:48.804 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 11:36:49.965 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        count(c1_0.id) 
    from
        comment c1_0 
    where
        c1_0.article_id is null
2025-09-02 11:36:49.971 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        count(c1_0.id) 
    from
        comment c1_0 
    where
        c1_0.article_id is null 
        and c1_0.status='APPROVED'
2025-09-02 11:36:49.976 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        (
            ? is null 
            or ?='' 
            or c1_0.content like replace(?, '\\', '\\\\')
        ) 
        and (
            ? is null 
            or ?='' 
            or exists(select
                1 
            from
                users u2_0 
            where
                u2_0.id=c1_0.user_id 
                and u2_0.nickname like replace(?, '\\', '\\\\'))
        ) 
        and (
            ? is null 
            or ?='' 
            or exists(select
                1 
            from
                article a2_0 
            where
                a2_0.id=c1_0.article_id 
                and a2_0.title like replace(?, '\\', '\\\\'))
        ) 
        and (
            ? is null 
            or c1_0.status=?
        ) 
        and (
            ? is null 
            or ?=0 
            or (
                ?=1 
                and c1_0.article_id is null
            )
        ) 
    order by
        c1_0.created_at desc,
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 11:36:49.979 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        count(c1_0.id) 
    from
        comment c1_0 
    where
        c1_0.article_id is null 
        and c1_0.status='PENDING'
2025-09-02 11:36:49.981 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 11:36:49.993 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:36:49.995 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 11:36:49.996 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        count(c1_0.id) 
    from
        comment c1_0 
    where
        c1_0.article_id is null 
        and c1_0.status='REJECTED'
2025-09-02 11:36:49.999 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:36:50.003 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.is_read,
        n1_0.related_id,
        n1_0.related_type,
        n1_0.title,
        n1_0.type,
        n1_0.updated_at,
        n1_0.user_id 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
    order by
        n1_0.created_at desc 
    limit
        ?, ?
2025-09-02 11:36:50.010 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        count(n1_0.id) 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
        and not(n1_0.is_read)
2025-09-02 11:37:04.721 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 11:37:04.726 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:37:04.729 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 11:37:05.690 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_id,
        c1_0.content,
        c1_0.created_at,
        c1_0.deleted,
        c1_0.ip_address,
        c1_0.like_count,
        c1_0.parent_id,
        c1_0.reply_count,
        c1_0.reply_to_id,
        c1_0.status,
        c1_0.updated_at,
        c1_0.user_id,
        c1_0.user_agent 
    from
        comment c1_0 
    where
        c1_0.status='APPROVED' 
    order by
        c1_0.created_at desc 
    limit
        ?, ?
2025-09-02 11:37:05.692 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED' 
    order by
        a1_0.published_at desc,
        a1_0.published_at desc 
    limit
        ?, ?
2025-09-02 11:37:05.695 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:37:05.699 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:37:05.700 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        count(a1_0.id) 
    from
        article a1_0 
    where
        a1_0.status='PUBLISHED'
2025-09-02 11:37:05.705 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:37:05.705 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:37:05.709 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:37:05.709 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        a1_0.id,
        a1_0.allow_comment,
        a1_0.author_id,
        a1_0.category_id,
        a1_0.category_specific_data,
        a1_0.comment_count,
        a1_0.content,
        a1_0.cover_image,
        a1_0.created_at,
        a1_0.is_featured,
        a1_0.is_top,
        a1_0.like_count,
        a1_0.published_at,
        a1_0.reading_time,
        a1_0.seo_description,
        a1_0.seo_keywords,
        a1_0.seo_title,
        a1_0.slug,
        a1_0.status,
        a1_0.summary,
        a1_0.title,
        a1_0.updated_at,
        a1_0.view_count,
        a1_0.word_count 
    from
        article a1_0 
    where
        a1_0.id=?
2025-09-02 11:37:05.712 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:37:05.712 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:37:05.715 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:37:05.717 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:37:05.720 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:37:05.722 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:37:05.724 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:37:05.727 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:37:05.729 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:37:05.732 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:37:05.734 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:37:05.736 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:37:05.739 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:37:05.741 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0 
    where
        c1_0.id=?
2025-09-02 11:37:05.743 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        at1_0.article_id,
        at1_0.id,
        at1_0.created_at,
        at1_0.tag_id 
    from
        article_tag at1_0 
    where
        at1_0.article_id=?
2025-09-02 11:37:05.745 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    where
        t1_0.id=?
2025-09-02 11:37:05.811 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        c1_0.id,
        c1_0.article_count,
        c1_0.cover_image,
        c1_0.created_at,
        c1_0.description,
        c1_0.name,
        c1_0.slug,
        c1_0.sort_order,
        c1_0.status,
        c1_0.updated_at 
    from
        category c1_0
2025-09-02 11:37:06.204 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.article_count,
        t1_0.color,
        t1_0.created_at,
        t1_0.description,
        t1_0.name,
        t1_0.slug,
        t1_0.updated_at 
    from
        tag t1_0 
    order by
        t1_0.article_count desc 
    limit
        ?, ?
2025-09-02 11:37:54.999 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 11:37:55.003 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.id=?
2025-09-02 11:37:55.007 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    insert 
    into
        operation_logs
        (created_at, description, error_message, execution_time, ip_address, method, module, operation_time, operation_type, request_params, request_url, response_result, status, user_agent, user_id, username) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-09-02 11:37:56.399 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 11:37:56.404 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        n1_0.id,
        n1_0.content,
        n1_0.created_at,
        n1_0.is_read,
        n1_0.related_id,
        n1_0.related_type,
        n1_0.title,
        n1_0.type,
        n1_0.updated_at,
        n1_0.user_id 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
    order by
        n1_0.created_at desc 
    limit
        ?, ?
2025-09-02 11:37:56.703 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.article_count,
        u1_0.avatar,
        u1_0.bio,
        u1_0.created_at,
        u1_0.deleted,
        u1_0.email,
        u1_0.email_verified,
        u1_0.follower_count,
        u1_0.following_count,
        u1_0.github,
        u1_0.last_login_ip,
        u1_0.last_login_time,
        u1_0.nickname,
        u1_0.password,
        u1_0.role,
        u1_0.status,
        u1_0.updated_at,
        u1_0.username,
        u1_0.website 
    from
        users u1_0 
    where
        u1_0.username=?
2025-09-02 11:37:56.709 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        count(n1_0.id) 
    from
        personal_blog_notification n1_0 
    where
        n1_0.user_id=? 
        and not(n1_0.is_read)
2025-09-02 11:41:19.425 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-09-02 11:41:19.492 [main] INFO  com.blog.BlogApplication - Starting BlogApplication using Java 17.0.2 with PID 984 (D:\java\boke\backend\target\classes started by Redmi in D:\java\boke\backend)
2025-09-02 11:41:19.494 [main] DEBUG com.blog.BlogApplication - Running with Spring Boot v3.2.0, Spring v6.1.1
2025-09-02 11:41:19.495 [main] INFO  com.blog.BlogApplication - No active profile set, falling back to 1 default profile: "default"
2025-09-02 11:41:20.288 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-02 11:41:20.290 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-09-02 11:41:20.471 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 175 ms. Found 15 JPA repository interfaces.
2025-09-02 11:41:20.485 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-02 11:41:20.486 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-09-02 11:41:20.500 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.AnnouncementRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:41:20.501 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleLikeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:41:20.503 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:41:20.503 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:41:20.504 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CategoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:41:20.504 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CommentLikeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:41:20.504 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CommentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:41:20.504 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.FileInfoRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:41:20.504 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.LoginLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:41:20.505 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.NotificationRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:41:20.505 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.OperationLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:41:20.506 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.SecuritySettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:41:20.506 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.TagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:41:20.507 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.UserAnnouncementReadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:41:20.508 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:41:20.508 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 15 ms. Found 0 Redis repository interfaces.
2025-09-02 11:41:21.627 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-09-02 11:41:21.636 [main] INFO  org.apache.catalina.core.AprLifecycleListener - An older version [1.2.38] of the Apache Tomcat Native library is installed, while Tomcat recommends a minimum version of [2.0.5]
2025-09-02 11:41:21.636 [main] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [1.2.38] using APR version [1.7.4].
2025-09-02 11:41:21.641 [main] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 1.1.1v  1 Aug 2023]
2025-09-02 11:41:21.660 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-09-02 11:41:21.664 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-09-02 11:41:21.664 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.16]
2025-09-02 11:41:21.821 [main] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] - Initializing Spring embedded WebApplicationContext
2025-09-02 11:41:21.822 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2268 ms
2025-09-02 11:41:22.185 [main] DEBUG com.blog.filter.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-09-02 11:41:22.312 [main] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-09-02 11:41:22.385 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.3.1.Final
2025-09-02 11:41:22.423 [main] INFO  o.hibernate.cache.internal.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-09-02 11:41:22.699 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-09-02 11:41:22.724 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-09-02 11:41:22.872 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@4b9beefe
2025-09-02 11:41:22.874 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-09-02 11:41:22.916 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-09-02 11:41:22.918 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-09-02 11:41:24.015 [main] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-09-02 11:41:24.122 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-09-02 11:41:24.463 [main] INFO  o.s.data.jpa.repository.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-09-02 11:41:25.874 [main] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'articleController': Unsatisfied dependency expressed through field 'commentService': Error creating bean with name 'commentServiceImpl' defined in file [D:\java\boke\backend\target\classes\com\blog\service\impl\CommentServiceImpl.class]: Failed to instantiate [com.blog.service.impl.CommentServiceImpl]: Constructor threw exception
2025-09-02 11:41:25.875 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-09-02 11:41:25.877 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-09-02 11:41:25.885 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-09-02 11:41:25.899 [main] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-09-02 11:41:25.910 [main] INFO  o.s.b.a.logging.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-09-02 11:41:25.927 [main] ERROR org.springframework.boot.SpringApplication - Application run failed
org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'articleController': Unsatisfied dependency expressed through field 'commentService': Error creating bean with name 'commentServiceImpl' defined in file [D:\java\boke\backend\target\classes\com\blog\service\impl\CommentServiceImpl.class]: Failed to instantiate [com.blog.service.impl.CommentServiceImpl]: Constructor threw exception
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:772)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:752)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:145)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:493)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1420)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:973)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:946)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:616)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.blog.BlogApplication.main(BlogApplication.java:11)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'commentServiceImpl' defined in file [D:\java\boke\backend\target\classes\com\blog\service\impl\CommentServiceImpl.class]: Failed to instantiate [com.blog.service.impl.CommentServiceImpl]: Constructor threw exception
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateBean(AbstractAutowireCapableBeanFactory.java:1318)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1203)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:769)
	... 20 common frames omitted
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [com.blog.service.impl.CommentServiceImpl]: Constructor threw exception
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:223)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:88)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateBean(AbstractAutowireCapableBeanFactory.java:1312)
	... 31 common frames omitted
Caused by: java.lang.Error: Unresolved compilation problems: 
	The import javax.persistence cannot be resolved
	javax.persistence cannot be resolved to a type
	javax.persistence cannot be resolved to a type
	The method findAll(Example<S>, Pageable) in the type QueryByExampleExecutor<Comment> is not applicable for the arguments (Specification<Comment>, Pageable)

	at com.blog.service.impl.CommentServiceImpl.<init>(CommentServiceImpl.java:23)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:197)
	... 33 common frames omitted
2025-09-02 11:41:41.472 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.1.Final
2025-09-02 11:41:41.520 [main] INFO  com.blog.BlogApplication - Starting BlogApplication using Java 17.0.2 with PID 32188 (D:\java\boke\backend\target\classes started by Redmi in D:\java\boke\backend)
2025-09-02 11:41:41.521 [main] DEBUG com.blog.BlogApplication - Running with Spring Boot v3.2.0, Spring v6.1.1
2025-09-02 11:41:41.521 [main] INFO  com.blog.BlogApplication - No active profile set, falling back to 1 default profile: "default"
2025-09-02 11:41:42.269 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-02 11:41:42.271 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-09-02 11:41:42.480 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 202 ms. Found 15 JPA repository interfaces.
2025-09-02 11:41:42.494 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-09-02 11:41:42.496 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-09-02 11:41:42.513 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.AnnouncementRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:41:42.514 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleLikeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:41:42.515 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:41:42.516 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.ArticleTagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:41:42.516 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CategoryRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:41:42.516 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CommentLikeRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:41:42.517 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.CommentRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:41:42.517 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.FileInfoRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:41:42.517 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.LoginLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:41:42.518 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.NotificationRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:41:42.518 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.OperationLogRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:41:42.518 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.SecuritySettingsRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:41:42.519 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.TagRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:41:42.519 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.UserAnnouncementReadRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:41:42.520 [main] INFO  o.s.d.r.c.RepositoryConfigurationExtensionSupport - Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.blog.repository.UserRepository; If you want this repository to be a Redis repository, consider annotating your entities with one of these annotations: org.springframework.data.redis.core.RedisHash (preferred), or consider extending one of the following types with your repository: org.springframework.data.keyvalue.repository.KeyValueRepository
2025-09-02 11:41:42.521 [main] INFO  o.s.d.r.config.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 14 ms. Found 0 Redis repository interfaces.
2025-09-02 11:41:43.316 [main] INFO  o.s.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-09-02 11:41:43.325 [main] INFO  org.apache.catalina.core.AprLifecycleListener - An older version [1.2.38] of the Apache Tomcat Native library is installed, while Tomcat recommends a minimum version of [2.0.5]
2025-09-02 11:41:43.325 [main] INFO  org.apache.catalina.core.AprLifecycleListener - Loaded Apache Tomcat Native library [1.2.38] using APR version [1.7.4].
2025-09-02 11:41:43.329 [main] INFO  org.apache.catalina.core.AprLifecycleListener - OpenSSL successfully initialized [OpenSSL 1.1.1v  1 Aug 2023]
2025-09-02 11:41:43.344 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-09-02 11:41:43.347 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-09-02 11:41:43.348 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.16]
2025-09-02 11:41:43.453 [main] INFO  o.a.c.c.ContainerBase.[Tomcat].[localhost].[/api] - Initializing Spring embedded WebApplicationContext
2025-09-02 11:41:43.454 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1893 ms
2025-09-02 11:41:43.817 [main] DEBUG com.blog.filter.JwtAuthenticationFilter - Filter 'jwtAuthenticationFilter' configured for use
2025-09-02 11:41:43.970 [main] INFO  org.hibernate.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-09-02 11:41:44.039 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.3.1.Final
2025-09-02 11:41:44.072 [main] INFO  o.hibernate.cache.internal.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-09-02 11:41:44.313 [main] INFO  o.s.o.j.persistenceunit.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-09-02 11:41:44.340 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-09-02 11:41:44.482 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@4e1b5532
2025-09-02 11:41:44.484 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-09-02 11:41:44.537 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-09-02 11:41:44.540 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-09-02 11:41:45.578 [main] INFO  o.h.e.t.jta.platform.internal.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-09-02 11:41:45.684 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-09-02 11:41:45.978 [main] INFO  o.s.data.jpa.repository.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-09-02 11:41:47.480 [main] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'articleController': Unsatisfied dependency expressed through field 'commentService': Error creating bean with name 'commentServiceImpl' defined in file [D:\java\boke\backend\target\classes\com\blog\service\impl\CommentServiceImpl.class]: Failed to instantiate [com.blog.service.impl.CommentServiceImpl]: Constructor threw exception
2025-09-02 11:41:47.481 [main] INFO  o.s.orm.jpa.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-09-02 11:41:47.482 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-09-02 11:41:47.488 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-09-02 11:41:47.500 [main] INFO  org.apache.catalina.core.StandardService - Stopping service [Tomcat]
2025-09-02 11:41:47.507 [main] INFO  o.s.b.a.logging.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-09-02 11:41:47.520 [main] ERROR org.springframework.boot.SpringApplication - Application run failed
org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'articleController': Unsatisfied dependency expressed through field 'commentService': Error creating bean with name 'commentServiceImpl' defined in file [D:\java\boke\backend\target\classes\com\blog\service\impl\CommentServiceImpl.class]: Failed to instantiate [com.blog.service.impl.CommentServiceImpl]: Constructor threw exception
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:772)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:752)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:145)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:493)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1420)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:973)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:946)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:616)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:455)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:323)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1342)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1331)
	at com.blog.BlogApplication.main(BlogApplication.java:11)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'commentServiceImpl' defined in file [D:\java\boke\backend\target\classes\com\blog\service\impl\CommentServiceImpl.class]: Failed to instantiate [com.blog.service.impl.CommentServiceImpl]: Constructor threw exception
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateBean(AbstractAutowireCapableBeanFactory.java:1318)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1203)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:563)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1441)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1348)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:769)
	... 20 common frames omitted
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [com.blog.service.impl.CommentServiceImpl]: Constructor threw exception
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:223)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:88)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateBean(AbstractAutowireCapableBeanFactory.java:1312)
	... 31 common frames omitted
Caused by: java.lang.Error: Unresolved compilation problems: 
	The import javax.persistence cannot be resolved
	javax.persistence cannot be resolved to a type
	javax.persistence cannot be resolved to a type
	The method findAll(Example<S>, Pageable) in the type QueryByExampleExecutor<Comment> is not applicable for the arguments (Specification<Comment>, Pageable)

	at com.blog.service.impl.CommentServiceImpl.<init>(CommentServiceImpl.java:23)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:197)
	... 33 common frames omitted
